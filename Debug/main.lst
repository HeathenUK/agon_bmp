Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED15-Oct-23     14:03:09     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optspeed -noreduceopt -nopadbranc
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",8
                           A   144    .DEFINE "baudRate"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 4
                           A   148    .ENDEF
                           A   149    .DEFINE "dataBits"
                           A   150    .VALUE 3
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "stopBits"
                           A   155    .VALUE 4
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "parity"
                           A   160    .VALUE 5
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "flowcontrol"
                           A   165    .VALUE 6
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "eir"
                           A   170    .VALUE 7
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .ENDREC "NONAME3"
                           A   175    .BEGREC "NONAME4",15
                           A   176    .DEFINE "fs"
                           A   177    .VALUE 0
                           A   178    .CLASS 8
                           A   179    .TYPE 46
                           A   180    .ENDEF
                           A   181    .DEFINE "id"
                           A   182    .VALUE 3
                           A   183    .CLASS 8
                           A   184    .TYPE 13
                           A   185    .ENDEF
                           A   186    .DEFINE "attr"
                           A   187    .VALUE 5
                           A   188    .CLASS 8
                           A   189    .TYPE 12
                           A   190    .ENDEF
                           A   191    .DEFINE "stat"
                           A   192    .VALUE 6
                           A   193    .CLASS 8
                           A   194    .TYPE 12
                           A   195    .ENDEF
                           A   196    .DEFINE "sclust"
                           A   197    .VALUE 7
                           A   198    .CLASS 8
                           A   199    .TYPE 15
                           A   200    .ENDEF
                           A   201    .DEFINE "objsize"
                           A   202    .VALUE 11
                           A   203    .CLASS 8
                           A   204    .TYPE 15
                           A   205    .ENDEF
                           A   206    .ENDREC "NONAME4"
                           A   207    .BEGREC "NONAME5",36
                           A   208    .DEFINE "obj"
                           A   209    .VALUE 0
                           A   210    .CLASS 8
                           A   211    .TAG "NONAME4"
                           A   212    .TYPE 8
                           A   213    .ENDEF
                           A   214    .DEFINE "flag"
                           A   215    .VALUE 15
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "err"
                           A   220    .VALUE 16
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "fptr"
                           A   225    .VALUE 17
                           A   226    .CLASS 8
                           A   227    .TYPE 15
                           A   228    .ENDEF
                           A   229    .DEFINE "clust"
                           A   230    .VALUE 21
                           A   231    .CLASS 8
                           A   232    .TYPE 15
                           A   233    .ENDEF
                           A   234    .DEFINE "sect"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 15
                           A   238    .ENDEF
                           A   239    .DEFINE "dir_sect"
                           A   240    .VALUE 29
                           A   241    .CLASS 8
                           A   242    .TYPE 15
                           A   243    .ENDEF
                           A   244    .DEFINE "dir_ptr"
                           A   245    .VALUE 33
                           A   246    .CLASS 8
                           A   247    .TYPE 46
                           A   248    .ENDEF
                           A   249    .ENDREC "NONAME5"
                           A   250    ;    1	//Copyright HeathenUK 2023, others' cop
                           A   251    ;    2	
                           A   252    ;    3	#include <stdio.h>
                           A   253    ;    4	#include <stdlib.h>
                           A   254    ;    5	#include <ctype.h>
                           A   255    ;    6	#include <stdint.h>
                           A   256    ;    7	#include <string.h>
                           A   257    ;    8	#include <eZ80.h>
                           A   258    ;    9	#include <defines.h>
                           A   259    ;   10	#include "mos-interface.h"
                           A   260    ;   11	#include "vdp.h"
                           A   261    ;   12	
                           A   262    ;   13	typedef struct {
                           A   263    ;   14		
                           A   264    ;   15		uint16_t bmp_width;
                           A   265    ;   16		uint16_t bmp_height;
                           A   266    ;   17		uint8_t  bmp_bitdepth;
                           A   267    ;   18		
                           A   268    ;   19	} bmp_info;
                           A   269    .BEGREC "NONAME6",5
                           A   270    .DEFINE "bmp_width"
                           A   271    .VALUE 0
                           A   272    .CLASS 8
                           A   273    .TYPE 13
                           A   274    .ENDEF
                           A   275    .DEFINE "bmp_height"
                           A   276    .VALUE 2
                           A   277    .CLASS 8
                           A   278    .TYPE 13
                           A   279    .ENDEF
                           A   280    .DEFINE "bmp_bitdepth"
                           A   281    .VALUE 4
                           A   282    .CLASS 8
                           A   283    .TYPE 12
                           A   284    .ENDEF
                           A   285    .ENDREC "NONAME6"
                           A   286    ;   20	
                           A   287    ;   21	extern void write16bit(uint16_t w);
                           A   288    ;   22	extern void write24bit(uint24_t w);
                           A   289    ;   23	extern void write32bit(uint32_t w);
                           A   290    ;   24	
                           A   291    ;   25	void delay_secs(UINT16 ticks_end) { //1
0B00E5                     A   292    _delay_secs:
                           A   293    .DEFINE "_delay_secs"
                           A   294    
                           A   295    .VALUE _delay_secs
                           A   296    
                           A   297    .CLASS 2
                           A   298    
                           A   299    .TYPE 65
                           A   300    
                           A   301    .ENDEF
                           A   302    
                           A   303    .BEGFUNC "delay_secs",25,"_delay_secs"
                           A   304    
                           A   305    .LINE 25
                           A   306    
                           A   307    .DEFINE "ticks_end"
                           A   308    
                           A   309    .CLASS 65
                           A   310    
                           A   311    .VALUE 6
                           A   312    
                           A   313    .TYPE 13
                           A   314    
                           A   315    .ENDEF
                           A   316    
                           A   317    .DEFINE "ticks"
                           A   318    
                           A   319    .CLASS 65
                           A   320    
                           A   321    .VALUE -4
                           A   322    
                           A   323    .TYPE 15
                           A   324    
                           A   325    .ENDEF
                           A   326    
0B00E5 DDE5                A   327    	PUSH	IX
0B00E7 DD210000 00         A   328    	LD	IX,0
0B00EC DD39                A   329    	ADD	IX,SP
0B00EE C5                  A   330    	PUSH	BC
0B00EF 3B                  A   331    	DEC	SP
                           A   332    ;   26		
                           A   333    ;   27		UINT32 ticks = 0;
                           A   334    .LINE 27
                           A   335    
0B00F0 01000000            A   336    	LD	BC,0
0B00F4 AF                  A   337    	XOR	A,A
0B00F5 DD0FFC              A   338    	LD	(IX+%FFFFFFFC),BC
0B00F8 DD77FF              A   339    	LD	(IX+%FFFFFFFF),A
                           A   340    ;   28		ticks_end *= 60;
                           A   341    .LINE 28
                           A   342    
0B00FB 49213C00            A   343    	LD.LIS	HL,60
0B00FF DD0706              A   344    	LD	BC,(IX+%6)
0B0102 CD FA 2A 0B         A   345    	CALL	__smulu
0B0106 DD7506              A   346    	LD	(IX+%6),L
0B0109 DD7407              A   347    	LD	(IX+%7),H
                           A   348    ;   29		while(true) {
0B010C                     A   349    L_3:
                           A   350    .LINE 29
                           A   351    
                           A   352    ;   30			
                           A   353    ;   31			waitvblank();
                           A   354    .LINE 31
                           A   355    
0B010C CD A3 20 0B         A   356    	CALL	_waitvblank
                           A   357    ;   32			ticks++;
                           A   358    .LINE 32
                           A   359    
0B0110 DD27FC              A   360    	LD	HL,(IX+%FFFFFFFC)
0B0113 DD5EFF              A   361    	LD	E,(IX+%FFFFFFFF)
0B0116 3E01                A   362    	LD	A,%1
0B0118 CD 5D 24 0B         A   363    	CALL	__ladd_b
0B011C DD2FFC              A   364    	LD	(IX+%FFFFFFFC),HL
0B011F DD73FF              A   365    	LD	(IX+%FFFFFFFF),E
                           A   366    ;   33			if(ticks >= ticks_end) break;
                           A   367    .LINE 33
                           A   368    
0B0122 DD0706              A   369    	LD	BC,(IX+%6)
0B0125 CD 0C 28 0B         A   370    	CALL	__stoiu
0B0129 E5C1                A   371    	LD	BC,HL
0B012B AF                  A   372    	XOR	A,A
0B012C DD27FC              A   373    	LD	HL,(IX+%FFFFFFFC)
0B012F DD5EFF              A   374    	LD	E,(IX+%FFFFFFFF)
0B0132 CD 07 2A 0B         A   375    	CALL	__lcmpu
0B0136 38 D4               A   376    	JR	C,L_3
                           A   377    ;   34			
                           A   378    ;   35		}
                           A   379    ;   36		
                           A   380    ;   37	}
                           A   381    .LINE 37
                           A   382    
0B0138 DDF9                A   383    	LD	SP,IX
0B013A DDE1                A   384    	POP	IX
0B013C C9                  A   385    	RET	
                           A   386    
                           A   387    
                           A   388    ;**************************** _delay_secs *****
                           A   389    ;Name                         Addr/Register   S
                           A   390    ;_waitvblank                         IMPORT  --
                           A   391    ;ticks                                 IX-4    
                           A   392    ;ticks_end                             IX+6    
                           A   393    
                           A   394    
                           A   395    ; Stack Frame Size: 13 (bytes)
                           A   396    ;       Spill Code: 0 (instruction)
                           A   397    
                           A   398    
                           A   399    .ENDFUNC "delay_secs",37,"_delay_secs"
                           A   400    ;   38	
                           A   401    ;   39	int min(int a, int b) {
0B013D                     A   402    _min:
                           A   403    .DEFINE "_min"
                           A   404    
                           A   405    .VALUE _min
                           A   406    
                           A   407    .CLASS 2
                           A   408    
                           A   409    .TYPE 68
                           A   410    
                           A   411    .ENDEF
                           A   412    
                           A   413    .BEGFUNC "min",39,"_min"
                           A   414    
                           A   415    .LINE 39
                           A   416    
                           A   417    .DEFINE "a"
                           A   418    
                           A   419    .CLASS 65
                           A   420    
                           A   421    .VALUE 6
                           A   422    
                           A   423    .TYPE 4
                           A   424    
                           A   425    .ENDEF
                           A   426    
                           A   427    .DEFINE "b"
                           A   428    
                           A   429    .CLASS 65
                           A   430    
                           A   431    .VALUE 9
                           A   432    
                           A   433    .TYPE 4
                           A   434    
                           A   435    .ENDEF
                           A   436    
0B013D DDE5                A   437    	PUSH	IX
0B013F DD210000 00         A   438    	LD	IX,0
0B0144 DD39                A   439    	ADD	IX,SP
                           A   440    ;   40	    if (a > b)
                           A   441    .LINE 40
                           A   442    
0B0146 DD0706              A   443    	LD	BC,(IX+%6)
0B0149 DD2709              A   444    	LD	HL,(IX+%9)
0B014C B7                  A   445    	OR	A,A
0B014D ED42                A   446    	SBC	HL,BC
0B014F F2 59 01 0B         A   447    	JP	P,L__3
0B0153 EA 62 01 0B         A   448    	JP	PE,L_6
0B0157 18 04               A   449    	JR	L__4
0B0159                     A   450    L__3:
0B0159 E2 62 01 0B         A   451    	JP	PO,L_6
0B015D                     A   452    L__4:
                           A   453    ;   41	        return b;
                           A   454    .LINE 41
                           A   455    
0B015D DD2709              A   456    	LD	HL,(IX+%9)
0B0160 18 03               A   457    	JR	L_7
0B0162                     A   458    L_6:
                           A   459    ;   42	    return a;
                           A   460    .LINE 42
                           A   461    
0B0162 DD2706              A   462    	LD	HL,(IX+%6)
                           A   463    ;   43	}
0B0165                     A   464    L_7:
                           A   465    .LINE 43
                           A   466    
0B0165 DDF9                A   467    	LD	SP,IX
0B0167 DDE1                A   468    	POP	IX
0B0169 C9                  A   469    	RET	
                           A   470    
                           A   471    
                           A   472    ;**************************** _min ************
                           A   473    ;Name                         Addr/Register   S
                           A   474    ;b                                     IX+9    
                           A   475    ;a                                     IX+6    
                           A   476    
                           A   477    
                           A   478    ; Stack Frame Size: 12 (bytes)
                           A   479    ;       Spill Code: 0 (instruction)
                           A   480    
                           A   481    
                           A   482    .ENDFUNC "min",43,"_min"
                           A   483    ;   44	
                           A   484    ;   45	int max(int a, int b) {
0B016A                     A   485    _max:
                           A   486    .DEFINE "_max"
                           A   487    
                           A   488    .VALUE _max
                           A   489    
                           A   490    .CLASS 2
                           A   491    
                           A   492    .TYPE 68
                           A   493    
                           A   494    .ENDEF
                           A   495    
                           A   496    .BEGFUNC "max",45,"_max"
                           A   497    
                           A   498    .LINE 45
                           A   499    
                           A   500    .DEFINE "a"
                           A   501    
                           A   502    .CLASS 65
                           A   503    
                           A   504    .VALUE 6
                           A   505    
                           A   506    .TYPE 4
                           A   507    
                           A   508    .ENDEF
                           A   509    
                           A   510    .DEFINE "b"
                           A   511    
                           A   512    .CLASS 65
                           A   513    
                           A   514    .VALUE 9
                           A   515    
                           A   516    .TYPE 4
                           A   517    
                           A   518    .ENDEF
                           A   519    
0B016A DDE5                A   520    	PUSH	IX
0B016C DD210000 00         A   521    	LD	IX,0
0B0171 DD39                A   522    	ADD	IX,SP
                           A   523    ;   46	    if (a > b)
                           A   524    .LINE 46
                           A   525    
0B0173 DD0706              A   526    	LD	BC,(IX+%6)
0B0176 DD2709              A   527    	LD	HL,(IX+%9)
0B0179 B7                  A   528    	OR	A,A
0B017A ED42                A   529    	SBC	HL,BC
0B017C F2 86 01 0B         A   530    	JP	P,L__7
0B0180 EA 8F 01 0B         A   531    	JP	PE,L_9
0B0184 18 04               A   532    	JR	L__8
0B0186                     A   533    L__7:
0B0186 E2 8F 01 0B         A   534    	JP	PO,L_9
0B018A                     A   535    L__8:
                           A   536    ;   47	        return a;
                           A   537    .LINE 47
                           A   538    
0B018A DD2706              A   539    	LD	HL,(IX+%6)
0B018D 18 03               A   540    	JR	L_10
0B018F                     A   541    L_9:
                           A   542    ;   48	    return b;
                           A   543    .LINE 48
                           A   544    
0B018F DD2709              A   545    	LD	HL,(IX+%9)
                           A   546    ;   49	}
0B0192                     A   547    L_10:
                           A   548    .LINE 49
                           A   549    
0B0192 DDF9                A   550    	LD	SP,IX
0B0194 DDE1                A   551    	POP	IX
0B0196 C9                  A   552    	RET	
                           A   553    
                           A   554    
                           A   555    ;**************************** _max ************
                           A   556    ;Name                         Addr/Register   S
                           A   557    ;b                                     IX+9    
                           A   558    ;a                                     IX+6    
                           A   559    
                           A   560    
                           A   561    ; Stack Frame Size: 12 (bytes)
                           A   562    ;       Spill Code: 0 (instruction)
                           A   563    
                           A   564    
                           A   565    .ENDFUNC "max",49,"_max"
                           A   566    ;   50	
                           A   567    ;   51	void flip(uint32_t * framebuffer, int w
0B0197                     A   568    _flip:
                           A   569    .DEFINE "_flip"
                           A   570    
                           A   571    .VALUE _flip
                           A   572    
                           A   573    .CLASS 2
                           A   574    
                           A   575    .TYPE 65
                           A   576    
                           A   577    .ENDEF
                           A   578    
                           A   579    .BEGFUNC "flip",51,"_flip"
                           A   580    
                           A   581    .LINE 51
                           A   582    
                           A   583    .DEFINE "framebuffer"
                           A   584    
                           A   585    .CLASS 65
                           A   586    
                           A   587    .VALUE 6
                           A   588    
                           A   589    .TYPE 47
                           A   590    
                           A   591    .ENDEF
                           A   592    
                           A   593    .DEFINE "width"
                           A   594    
                           A   595    .CLASS 65
                           A   596    
                           A   597    .VALUE 9
                           A   598    
                           A   599    .TYPE 4
                           A   600    
                           A   601    .ENDEF
                           A   602    
                           A   603    .DEFINE "height"
                           A   604    
                           A   605    .CLASS 65
                           A   606    
                           A   607    .VALUE 12
                           A   608    
                           A   609    .TYPE 4
                           A   610    
                           A   611    .ENDEF
                           A   612    
                           A   613    .DEFINE "y"
                           A   614    
                           A   615    .CLASS 65
                           A   616    
                           A   617    .VALUE -2
                           A   618    
                           A   619    .TYPE 13
                           A   620    
                           A   621    .ENDEF
                           A   622    
                           A   623    .DEFINE "row_buffer"
                           A   624    
                           A   625    .CLASS 65
                           A   626    
                           A   627    .VALUE -5
                           A   628    
                           A   629    .TYPE 47
                           A   630    
                           A   631    .ENDEF
                           A   632    
                           A   633    .DEFINE "row_size"
                           A   634    
                           A   635    .CLASS 65
                           A   636    
                           A   637    .VALUE -8
                           A   638    
                           A   639    .TYPE 4
                           A   640    
                           A   641    .ENDEF
                           A   642    
                           A   643    .DEFINE "top_row"
                           A   644    
                           A   645    .CLASS 65
                           A   646    
                           A   647    .VALUE -11
                           A   648    
                           A   649    .TYPE 47
                           A   650    
                           A   651    .ENDEF
                           A   652    
                           A   653    .DEFINE "bottom_row"
                           A   654    
                           A   655    .CLASS 65
                           A   656    
                           A   657    .VALUE -14
                           A   658    
                           A   659    .TYPE 47
                           A   660    
                           A   661    .ENDEF
                           A   662    
0B0197 DDE5                A   663    	PUSH	IX
0B0199 DD210000 00         A   664    	LD	IX,0
0B019E DD39                A   665    	ADD	IX,SP
0B01A0 ED22F1              A   666    	LEA	HL,IX+%FFFFFFF1
0B01A3 F9                  A   667    	LD	SP,HL
                           A   668    ;   52	    uint16_t y;
                           A   669    ;   53	    uint32_t * row_buffer = (uint32_t *
                           A   670    .LINE 53
                           A   671    
0B01A4 DD2709              A   672    	LD	HL,(IX+%9)
0B01A7 29                  A   673    	ADD	HL,HL
0B01A8 29                  A   674    	ADD	HL,HL
0B01A9 E5                  A   675    	PUSH	HL
0B01AA DD77F1              A   676    	LD	(IX+%FFFFFFF1),A
0B01AD CD 77 25 0B         A   677    	CALL	_malloc
0B01B1 DD7EF1              A   678    	LD	A,(IX+%FFFFFFF1)
0B01B4 C1                  A   679    	POP	BC
0B01B5 DD2FFB              A   680    	LD	(IX+%FFFFFFFB),HL
                           A   681    ;   54	    int row_size = width * sizeof(uint3
                           A   682    .LINE 54
                           A   683    
0B01B8 DD2709              A   684    	LD	HL,(IX+%9)
0B01BB 29                  A   685    	ADD	HL,HL
0B01BC 29                  A   686    	ADD	HL,HL
0B01BD DD2FF8              A   687    	LD	(IX+%FFFFFFF8),HL
                           A   688    ;   55	
                           A   689    ;   56	    for (y = 0; y < height / 2; y++) {
                           A   690    .LINE 56
                           A   691    
0B01C0 DD36FE00            A   692    	LD	(IX+%FFFFFFFE),%0
0B01C4 DD36FF00            A   693    	LD	(IX+%FFFFFFFF),%0
0B01C8 C3 58 02 0B         A   694    	JR	L_14
0B01CC                     A   695    L_12:
                           A   696    ;   57	        uint32_t * top_row = framebuffe
                           A   697    .LINE 57
                           A   698    
0B01CC DD07FE              A   699    	LD	BC,(IX+%FFFFFFFE)
0B01CF CD 0C 28 0B         A   700    	CALL	__stoiu
0B01D3 DD0709              A   701    	LD	BC,(IX+%9)
0B01D6 CD 8B 29 0B         A   702    	CALL	__imuls
0B01DA 29                  A   703    	ADD	HL,HL
0B01DB 29                  A   704    	ADD	HL,HL
0B01DC DD0706              A   705    	LD	BC,(IX+%6)
0B01DF 09                  A   706    	ADD	HL,BC
0B01E0 DD2FF5              A   707    	LD	(IX+%FFFFFFF5),HL
                           A   708    ;   58	        uint32_t * bottom_row = framebu
                           A   709    .LINE 58
                           A   710    
0B01E3 DD07FE              A   711    	LD	BC,(IX+%FFFFFFFE)
0B01E6 CD 0C 28 0B         A   712    	CALL	__stoiu
0B01EA E5C1                A   713    	LD	BC,HL
0B01EC DD270C              A   714    	LD	HL,(IX+%C)
0B01EF B7                  A   715    	OR	A,A
0B01F0 ED42                A   716    	SBC	HL,BC
0B01F2 2B                  A   717    	DEC	HL
0B01F3 DD0709              A   718    	LD	BC,(IX+%9)
0B01F6 CD 8B 29 0B         A   719    	CALL	__imuls
0B01FA 29                  A   720    	ADD	HL,HL
0B01FB 29                  A   721    	ADD	HL,HL
0B01FC DD0706              A   722    	LD	BC,(IX+%6)
0B01FF 09                  A   723    	ADD	HL,BC
0B0200 DD2FF2              A   724    	LD	(IX+%FFFFFFF2),HL
                           A   725    ;   59	
                           A   726    ;   60	        memcpy(row_buffer, top_row, row
                           A   727    .LINE 60
                           A   728    
0B0203 DD07F8              A   729    	LD	BC,(IX+%FFFFFFF8)
0B0206 C5                  A   730    	PUSH	BC
0B0207 DD07F5              A   731    	LD	BC,(IX+%FFFFFFF5)
0B020A C5                  A   732    	PUSH	BC
0B020B DD07FB              A   733    	LD	BC,(IX+%FFFFFFFB)
0B020E C5                  A   734    	PUSH	BC
0B020F DD77F1              A   735    	LD	(IX+%FFFFFFF1),A
0B0212 CD 2B 29 0B         A   736    	CALL	_memcpy
0B0216 DD7EF1              A   737    	LD	A,(IX+%FFFFFFF1)
0B0219 C1                  A   738    	POP	BC
0B021A C1                  A   739    	POP	BC
0B021B C1                  A   740    	POP	BC
                           A   741    ;   61	        memcpy(top_row, bottom_row, row
                           A   742    .LINE 61
                           A   743    
0B021C DD07F8              A   744    	LD	BC,(IX+%FFFFFFF8)
0B021F C5                  A   745    	PUSH	BC
0B0220 DD07F2              A   746    	LD	BC,(IX+%FFFFFFF2)
0B0223 C5                  A   747    	PUSH	BC
0B0224 DD07F5              A   748    	LD	BC,(IX+%FFFFFFF5)
0B0227 C5                  A   749    	PUSH	BC
0B0228 DD77F1              A   750    	LD	(IX+%FFFFFFF1),A
0B022B CD 2B 29 0B         A   751    	CALL	_memcpy
0B022F DD7EF1              A   752    	LD	A,(IX+%FFFFFFF1)
0B0232 C1                  A   753    	POP	BC
0B0233 C1                  A   754    	POP	BC
0B0234 C1                  A   755    	POP	BC
                           A   756    ;   62	        memcpy(bottom_row, row_buffer, 
                           A   757    .LINE 62
                           A   758    
0B0235 DD07F8              A   759    	LD	BC,(IX+%FFFFFFF8)
0B0238 C5                  A   760    	PUSH	BC
0B0239 DD07FB              A   761    	LD	BC,(IX+%FFFFFFFB)
0B023C C5                  A   762    	PUSH	BC
0B023D DD07F2              A   763    	LD	BC,(IX+%FFFFFFF2)
0B0240 C5                  A   764    	PUSH	BC
0B0241 DD77F1              A   765    	LD	(IX+%FFFFFFF1),A
0B0244 CD 2B 29 0B         A   766    	CALL	_memcpy
0B0248 DD7EF1              A   767    	LD	A,(IX+%FFFFFFF1)
0B024B C1                  A   768    	POP	BC
0B024C C1                  A   769    	POP	BC
0B024D C1                  A   770    	POP	BC
0B024E DD27FE              A   771    	LD	HL,(IX+%FFFFFFFE)
0B0251 23                  A   772    	INC	HL
0B0252 DD75FE              A   773    	LD	(IX+%FFFFFFFE),L
0B0255 DD74FF              A   774    	LD	(IX+%FFFFFFFF),H
                           A   775    ;   63	    }
0B0258                     A   776    L_14:
                           A   777    .LINE 63
                           A   778    
0B0258 01020000            A   779    	LD	BC,2
0B025C DD270C              A   780    	LD	HL,(IX+%C)
0B025F CD C7 29 0B         A   781    	CALL	__idivs
0B0263 E5D1                A   782    	LD	DE,HL
0B0265 DD07FE              A   783    	LD	BC,(IX+%FFFFFFFE)
0B0268 CD 0C 28 0B         A   784    	CALL	__stoiu
0B026C B7                  A   785    	OR	A,A
0B026D ED52                A   786    	SBC	HL,DE
0B026F FA 79 02 0B         A   787    	JP	M,L__11
0B0273 EA CC 01 0B         A   788    	JP	PE,L_12
0B0277 18 04               A   789    	JR	L__12
0B0279                     A   790    L__11:
0B0279 E2 CC 01 0B         A   791    	JP	PO,L_12
0B027D                     A   792    L__12:
                           A   793    ;   64	
                           A   794    ;   65	    free(row_buffer);
                           A   795    .LINE 65
                           A   796    
0B027D DD07FB              A   797    	LD	BC,(IX+%FFFFFFFB)
0B0280 C5                  A   798    	PUSH	BC
0B0281 CD 72 24 0B         A   799    	CALL	_free
0B0285 C1                  A   800    	POP	BC
                           A   801    ;   66	}
                           A   802    .LINE 66
                           A   803    
0B0286 DDF9                A   804    	LD	SP,IX
0B0288 DDE1                A   805    	POP	IX
0B028A C9                  A   806    	RET	
                           A   807    
                           A   808    
                           A   809    ;**************************** _flip ***********
                           A   810    ;Name                         Addr/Register   S
                           A   811    ;_free                               IMPORT  --
                           A   812    ;_memcpy                             IMPORT  --
                           A   813    ;_malloc                             IMPORT  --
                           A   814    ;bottom_row                           IX-14    
                           A   815    ;top_row                              IX-11    
                           A   816    ;row_size                              IX-8    
                           A   817    ;row_buffer                            IX-5    
                           A   818    ;y                                     IX-2    
                           A   819    ;height                               IX+12    
                           A   820    ;width                                 IX+9    
                           A   821    ;framebuffer                           IX+6    
                           A   822    
                           A   823    
                           A   824    ; Stack Frame Size: 30 (bytes)
                           A   825    ;       Spill Code: 0 (instruction)
                           A   826    
                           A   827    
                           A   828    .ENDFUNC "flip",66,"_flip"
                           A   829    ;   67	
                           A   830    ;   68	void twiddle_buffer(char* buffer, int w
0B028B                     A   831    _twiddle_buffer:
                           A   832    .DEFINE "_twiddle_buffer"
                           A   833    
                           A   834    .VALUE _twiddle_buffer
                           A   835    
                           A   836    .CLASS 2
                           A   837    
                           A   838    .TYPE 65
                           A   839    
                           A   840    .ENDEF
                           A   841    
                           A   842    .BEGFUNC "twiddle_buffer",68,"_twiddle_buffer"
                           A   843    
                           A   844    .LINE 68
                           A   845    
                           A   846    .DEFINE "buffer"
                           A   847    
                           A   848    .CLASS 65
                           A   849    
                           A   850    .VALUE 6
                           A   851    
                           A   852    .TYPE 34
                           A   853    
                           A   854    .ENDEF
                           A   855    
                           A   856    .DEFINE "width"
                           A   857    
                           A   858    .CLASS 65
                           A   859    
                           A   860    .VALUE 9
                           A   861    
                           A   862    .TYPE 4
                           A   863    
                           A   864    .ENDEF
                           A   865    
                           A   866    .DEFINE "height"
                           A   867    
                           A   868    .CLASS 65
                           A   869    
                           A   870    .VALUE 12
                           A   871    
                           A   872    .TYPE 4
                           A   873    
                           A   874    .ENDEF
                           A   875    
                           A   876    .DEFINE "col"
                           A   877    
                           A   878    .CLASS 65
                           A   879    
                           A   880    .VALUE -3
                           A   881    
                           A   882    .TYPE 4
                           A   883    
                           A   884    .ENDEF
                           A   885    
                           A   886    .DEFINE "tempRow"
                           A   887    
                           A   888    .CLASS 65
                           A   889    
                           A   890    .VALUE -6
                           A   891    
                           A   892    .TYPE 34
                           A   893    
                           A   894    .ENDEF
                           A   895    
                           A   896    .DEFINE "oppositeRowPtr"
                           A   897    
                           A   898    .CLASS 65
                           A   899    
                           A   900    .VALUE -9
                           A   901    
                           A   902    .TYPE 34
                           A   903    
                           A   904    .ENDEF
                           A   905    
                           A   906    .DEFINE "rowPtr"
                           A   907    
                           A   908    .CLASS 65
                           A   909    
                           A   910    .VALUE -12
                           A   911    
                           A   912    .TYPE 34
                           A   913    
                           A   914    .ENDEF
                           A   915    
                           A   916    .DEFINE "row"
                           A   917    
                           A   918    .CLASS 65
                           A   919    
                           A   920    .VALUE -15
                           A   921    
                           A   922    .TYPE 4
                           A   923    
                           A   924    .ENDEF
                           A   925    
0B028B DDE5                A   926    	PUSH	IX
0B028D DD210000 00         A   927    	LD	IX,0
0B0292 DD39                A   928    	ADD	IX,SP
0B0294 ED22E4              A   929    	LEA	HL,IX+%FFFFFFE4
0B0297 F9                  A   930    	LD	SP,HL
                           A   931    ;   69	    int row, col;
                           A   932    ;   70	    char* rowPtr;
                           A   933    ;   71		char* oppositeRowPtr;
                           A   934    ;   72		char* tempRow = (char*)malloc(width
                           A   935    .LINE 72
                           A   936    
0B0298 DD2709              A   937    	LD	HL,(IX+%9)
0B029B 29                  A   938    	ADD	HL,HL
0B029C 29                  A   939    	ADD	HL,HL
0B029D E5                  A   940    	PUSH	HL
0B029E DD77E4              A   941    	LD	(IX+%FFFFFFE4),A
0B02A1 CD 77 25 0B         A   942    	CALL	_malloc
0B02A5 DD7EE4              A   943    	LD	A,(IX+%FFFFFFE4)
0B02A8 C1                  A   944    	POP	BC
0B02A9 DD2FFA              A   945    	LD	(IX+%FFFFFFFA),HL
                           A   946    ;   73	
                           A   947    ;   74	    //Iterate over each row
                           A   948    ;   75	    for (row = 0; row < height / 2; row
                           A   949    .LINE 75
                           A   950    
0B02AC 01000000            A   951    	LD	BC,0
0B02B0 DD0FF1              A   952    	LD	(IX+%FFFFFFF1),BC
0B02B3 C3 6B 04 0B         A   953    	JR	L_24
0B02B7                     A   954    L_22:
                           A   955    ;   76	        rowPtr = buffer + row * width *
                           A   956    .LINE 76
                           A   957    
0B02B7 DD27F1              A   958    	LD	HL,(IX+%FFFFFFF1)
0B02BA DD0709              A   959    	LD	BC,(IX+%9)
0B02BD CD 8B 29 0B         A   960    	CALL	__imuls
0B02C1 29                  A   961    	ADD	HL,HL
0B02C2 29                  A   962    	ADD	HL,HL
0B02C3 DD0706              A   963    	LD	BC,(IX+%6)
0B02C6 09                  A   964    	ADD	HL,BC
0B02C7 DD2FF4              A   965    	LD	(IX+%FFFFFFF4),HL
                           A   966    ;   77	        oppositeRowPtr = buffer + (heig
                           A   967    .LINE 77
                           A   968    
0B02CA DD07F1              A   969    	LD	BC,(IX+%FFFFFFF1)
0B02CD DD270C              A   970    	LD	HL,(IX+%C)
0B02D0 B7                  A   971    	OR	A,A
0B02D1 ED42                A   972    	SBC	HL,BC
0B02D3 2B                  A   973    	DEC	HL
0B02D4 DD0709              A   974    	LD	BC,(IX+%9)
0B02D7 CD 8B 29 0B         A   975    	CALL	__imuls
0B02DB 29                  A   976    	ADD	HL,HL
0B02DC 29                  A   977    	ADD	HL,HL
0B02DD DD0706              A   978    	LD	BC,(IX+%6)
0B02E0 09                  A   979    	ADD	HL,BC
0B02E1 DD2FF7              A   980    	LD	(IX+%FFFFFFF7),HL
                           A   981    ;   78	
                           A   982    ;   79	        //Swap bytes within each row (B
                           A   983    ;   80	        for (col = 0; col < width; col+
                           A   984    .LINE 80
                           A   985    
0B02E4 01000000            A   986    	LD	BC,0
0B02E8 DD0FFD              A   987    	LD	(IX+%FFFFFFFD),BC
0B02EB C3 4D 04 0B         A   988    	JR	L_21
0B02EF                     A   989    L_19:
                           A   990    ;   81	            tempRow[col * 4] = opposite
                           A   991    .LINE 81
                           A   992    
0B02EF DD27FD              A   993    	LD	HL,(IX+%FFFFFFFD)
0B02F2 29                  A   994    	ADD	HL,HL
0B02F3 29                  A   995    	ADD	HL,HL
0B02F4 E5C1                A   996    	LD	BC,HL
0B02F6 DD27FD              A   997    	LD	HL,(IX+%FFFFFFFD)
0B02F9 29                  A   998    	ADD	HL,HL
0B02FA 29                  A   999    	ADD	HL,HL
0B02FB DD17F7              A  1000    	LD	DE,(IX+%FFFFFFF7)
0B02FE 19                  A  1001    	ADD	HL,DE
0B02FF E5FDE1              A  1002    	LD	IY,HL
0B0302 C5D1                A  1003    	LD	DE,BC
0B0304 DD27FA              A  1004    	LD	HL,(IX+%FFFFFFFA)
0B0307 19                  A  1005    	ADD	HL,DE
0B0308 FD7E02              A  1006    	LD	A,(IY+%2)
0B030B 77                  A  1007    	LD	(HL),A
                           A  1008    ;   82	            tempRow[col * 4 + 1] = oppo
                           A  1009    .LINE 82
                           A  1010    
0B030C DD27FD              A  1011    	LD	HL,(IX+%FFFFFFFD)
0B030F 29                  A  1012    	ADD	HL,HL
0B0310 29                  A  1013    	ADD	HL,HL
0B0311 E5D1                A  1014    	LD	DE,HL
0B0313 DD27F7              A  1015    	LD	HL,(IX+%FFFFFFF7)
0B0316 09                  A  1016    	ADD	HL,BC
0B0317 E5FDE1              A  1017    	LD	IY,HL
0B031A D5C1                A  1018    	LD	BC,DE
0B031C DD27FA              A  1019    	LD	HL,(IX+%FFFFFFFA)
0B031F 09                  A  1020    	ADD	HL,BC
0B0320 23                  A  1021    	INC	HL
0B0321 FD7E01              A  1022    	LD	A,(IY+%1)
0B0324 77                  A  1023    	LD	(HL),A
                           A  1024    ;   83	            tempRow[col * 4 + 2] = oppo
                           A  1025    .LINE 83
                           A  1026    
0B0325 DD27FD              A  1027    	LD	HL,(IX+%FFFFFFFD)
0B0328 29                  A  1028    	ADD	HL,HL
0B0329 29                  A  1029    	ADD	HL,HL
0B032A E5C1                A  1030    	LD	BC,HL
0B032C DD27F7              A  1031    	LD	HL,(IX+%FFFFFFF7)
0B032F 19                  A  1032    	ADD	HL,DE
0B0330 E5FDE1              A  1033    	LD	IY,HL
0B0333 C5D1                A  1034    	LD	DE,BC
0B0335 DD27FA              A  1035    	LD	HL,(IX+%FFFFFFFA)
0B0338 19                  A  1036    	ADD	HL,DE
0B0339 23                  A  1037    	INC	HL
0B033A 23                  A  1038    	INC	HL
0B033B FD7E00              A  1039    	LD	A,(IY)
0B033E 77                  A  1040    	LD	(HL),A
                           A  1041    ;   84	            tempRow[col * 4 + 3] = oppo
                           A  1042    .LINE 84
                           A  1043    
0B033F DD27FD              A  1044    	LD	HL,(IX+%FFFFFFFD)
0B0342 29                  A  1045    	ADD	HL,HL
0B0343 29                  A  1046    	ADD	HL,HL
0B0344 E5D1                A  1047    	LD	DE,HL
0B0346 DD27F7              A  1048    	LD	HL,(IX+%FFFFFFF7)
0B0349 09                  A  1049    	ADD	HL,BC
0B034A E5FDE1              A  1050    	LD	IY,HL
0B034D DD2FEE              A  1051    	LD	(IX+%FFFFFFEE),HL	; spill
0B0350 ED2303              A  1052    	LEA	HL,IY+%3
0B0353 DD2FEB              A  1053    	LD	(IX+%FFFFFFEB),HL	; spill
0B0356 D5C1                A  1054    	LD	BC,DE
0B0358 DD27FA              A  1055    	LD	HL,(IX+%FFFFFFFA)
0B035B 09                  A  1056    	ADD	HL,BC
0B035C E5FDE1              A  1057    	LD	IY,HL
0B035F DD27EB              A  1058    	LD	HL,(IX+%FFFFFFEB)	; unspill
0B0362 7E                  A  1059    	LD	A,(HL)
0B0363 FD7703              A  1060    	LD	(IY+%3),A
                           A  1061    ;   85	
                           A  1062    ;   86	            oppositeRowPtr[col * 4] = r
                           A  1063    .LINE 86
                           A  1064    
0B0366 DD27FD              A  1065    	LD	HL,(IX+%FFFFFFFD)
0B0369 29                  A  1066    	ADD	HL,HL
0B036A 29                  A  1067    	ADD	HL,HL
0B036B E5C1                A  1068    	LD	BC,HL
0B036D DD27F4              A  1069    	LD	HL,(IX+%FFFFFFF4)
0B0370 19                  A  1070    	ADD	HL,DE
0B0371 E5FDE1              A  1071    	LD	IY,HL
0B0374 C5D1                A  1072    	LD	DE,BC
0B0376 DD27F7              A  1073    	LD	HL,(IX+%FFFFFFF7)
0B0379 19                  A  1074    	ADD	HL,DE
0B037A FD7E02              A  1075    	LD	A,(IY+%2)
0B037D 77                  A  1076    	LD	(HL),A
                           A  1077    ;   87	            oppositeRowPtr[col * 4 + 1]
                           A  1078    .LINE 87
                           A  1079    
0B037E DD27FD              A  1080    	LD	HL,(IX+%FFFFFFFD)
0B0381 29                  A  1081    	ADD	HL,HL
0B0382 29                  A  1082    	ADD	HL,HL
0B0383 E5D1                A  1083    	LD	DE,HL
0B0385 DD27F4              A  1084    	LD	HL,(IX+%FFFFFFF4)
0B0388 09                  A  1085    	ADD	HL,BC
0B0389 E5FDE1              A  1086    	LD	IY,HL
0B038C D5C1                A  1087    	LD	BC,DE
0B038E DD27F7              A  1088    	LD	HL,(IX+%FFFFFFF7)
0B0391 09                  A  1089    	ADD	HL,BC
0B0392 23                  A  1090    	INC	HL
0B0393 FD7E01              A  1091    	LD	A,(IY+%1)
0B0396 77                  A  1092    	LD	(HL),A
                           A  1093    ;   88	            oppositeRowPtr[col * 4 + 2]
                           A  1094    .LINE 88
                           A  1095    
0B0397 DD27FD              A  1096    	LD	HL,(IX+%FFFFFFFD)
0B039A 29                  A  1097    	ADD	HL,HL
0B039B 29                  A  1098    	ADD	HL,HL
0B039C E5C1                A  1099    	LD	BC,HL
0B039E DD27F4              A  1100    	LD	HL,(IX+%FFFFFFF4)
0B03A1 19                  A  1101    	ADD	HL,DE
0B03A2 E5FDE1              A  1102    	LD	IY,HL
0B03A5 C5D1                A  1103    	LD	DE,BC
0B03A7 DD27F7              A  1104    	LD	HL,(IX+%FFFFFFF7)
0B03AA 19                  A  1105    	ADD	HL,DE
0B03AB 23                  A  1106    	INC	HL
0B03AC 23                  A  1107    	INC	HL
0B03AD FD7E00              A  1108    	LD	A,(IY)
0B03B0 77                  A  1109    	LD	(HL),A
                           A  1110    ;   89	            oppositeRowPtr[col * 4 + 3]
                           A  1111    .LINE 89
                           A  1112    
0B03B1 DD27FD              A  1113    	LD	HL,(IX+%FFFFFFFD)
0B03B4 29                  A  1114    	ADD	HL,HL
0B03B5 29                  A  1115    	ADD	HL,HL
0B03B6 E5D1                A  1116    	LD	DE,HL
0B03B8 DD27F4              A  1117    	LD	HL,(IX+%FFFFFFF4)
0B03BB 09                  A  1118    	ADD	HL,BC
0B03BC E5FDE1              A  1119    	LD	IY,HL
0B03BF DD2FEE              A  1120    	LD	(IX+%FFFFFFEE),HL	; spill
0B03C2 ED2303              A  1121    	LEA	HL,IY+%3
0B03C5 DD2FE8              A  1122    	LD	(IX+%FFFFFFE8),HL	; spill
0B03C8 D5C1                A  1123    	LD	BC,DE
0B03CA DD27F7              A  1124    	LD	HL,(IX+%FFFFFFF7)
0B03CD 09                  A  1125    	ADD	HL,BC
0B03CE E5FDE1              A  1126    	LD	IY,HL
0B03D1 DD27E8              A  1127    	LD	HL,(IX+%FFFFFFE8)	; unspill
0B03D4 7E                  A  1128    	LD	A,(HL)
0B03D5 FD7703              A  1129    	LD	(IY+%3),A
                           A  1130    ;   90	
                           A  1131    ;   91	            rowPtr[col * 4] = tempRow[c
                           A  1132    .LINE 91
                           A  1133    
0B03D8 DD27FD              A  1134    	LD	HL,(IX+%FFFFFFFD)
0B03DB 29                  A  1135    	ADD	HL,HL
0B03DC 29                  A  1136    	ADD	HL,HL
0B03DD E5C1                A  1137    	LD	BC,HL
0B03DF DD27FA              A  1138    	LD	HL,(IX+%FFFFFFFA)
0B03E2 19                  A  1139    	ADD	HL,DE
0B03E3 E5FDE1              A  1140    	LD	IY,HL
0B03E6 C5D1                A  1141    	LD	DE,BC
0B03E8 DD27F4              A  1142    	LD	HL,(IX+%FFFFFFF4)
0B03EB 19                  A  1143    	ADD	HL,DE
0B03EC FD7E00              A  1144    	LD	A,(IY)
0B03EF 77                  A  1145    	LD	(HL),A
                           A  1146    ;   92	            rowPtr[col * 4 + 1] = tempR
                           A  1147    .LINE 92
                           A  1148    
0B03F0 DD27FD              A  1149    	LD	HL,(IX+%FFFFFFFD)
0B03F3 29                  A  1150    	ADD	HL,HL
0B03F4 29                  A  1151    	ADD	HL,HL
0B03F5 E5D1                A  1152    	LD	DE,HL
0B03F7 DD27FA              A  1153    	LD	HL,(IX+%FFFFFFFA)
0B03FA 09                  A  1154    	ADD	HL,BC
0B03FB E5FDE1              A  1155    	LD	IY,HL
0B03FE D5C1                A  1156    	LD	BC,DE
0B0400 DD27F4              A  1157    	LD	HL,(IX+%FFFFFFF4)
0B0403 09                  A  1158    	ADD	HL,BC
0B0404 23                  A  1159    	INC	HL
0B0405 FD7E01              A  1160    	LD	A,(IY+%1)
0B0408 77                  A  1161    	LD	(HL),A
                           A  1162    ;   93	            rowPtr[col * 4 + 2] = tempR
                           A  1163    .LINE 93
                           A  1164    
0B0409 DD27FD              A  1165    	LD	HL,(IX+%FFFFFFFD)
0B040C 29                  A  1166    	ADD	HL,HL
0B040D 29                  A  1167    	ADD	HL,HL
0B040E E5C1                A  1168    	LD	BC,HL
0B0410 DD27FA              A  1169    	LD	HL,(IX+%FFFFFFFA)
0B0413 19                  A  1170    	ADD	HL,DE
0B0414 E5FDE1              A  1171    	LD	IY,HL
0B0417 C5D1                A  1172    	LD	DE,BC
0B0419 DD27F4              A  1173    	LD	HL,(IX+%FFFFFFF4)
0B041C 19                  A  1174    	ADD	HL,DE
0B041D 23                  A  1175    	INC	HL
0B041E 23                  A  1176    	INC	HL
0B041F FD7E02              A  1177    	LD	A,(IY+%2)
0B0422 77                  A  1178    	LD	(HL),A
                           A  1179    ;   94	            rowPtr[col * 4 + 3] = tempR
                           A  1180    .LINE 94
                           A  1181    
0B0423 DD27FA              A  1182    	LD	HL,(IX+%FFFFFFFA)
0B0426 09                  A  1183    	ADD	HL,BC
0B0427 E5FDE1              A  1184    	LD	IY,HL
0B042A DD2FEE              A  1185    	LD	(IX+%FFFFFFEE),HL	; spill
0B042D ED2303              A  1186    	LEA	HL,IY+%3
0B0430 DD2FE5              A  1187    	LD	(IX+%FFFFFFE5),HL	; spill
0B0433 DD27FD              A  1188    	LD	HL,(IX+%FFFFFFFD)
0B0436 29                  A  1189    	ADD	HL,HL
0B0437 29                  A  1190    	ADD	HL,HL
0B0438 DD07F4              A  1191    	LD	BC,(IX+%FFFFFFF4)
0B043B 09                  A  1192    	ADD	HL,BC
0B043C E5FDE1              A  1193    	LD	IY,HL
0B043F DD27E5              A  1194    	LD	HL,(IX+%FFFFFFE5)	; unspill
0B0442 7E                  A  1195    	LD	A,(HL)
0B0443 FD7703              A  1196    	LD	(IY+%3),A
0B0446 DD07FD              A  1197    	LD	BC,(IX+%FFFFFFFD)
0B0449 03                  A  1198    	INC	BC
0B044A DD0FFD              A  1199    	LD	(IX+%FFFFFFFD),BC
                           A  1200    ;   95	        }
0B044D                     A  1201    L_21:
                           A  1202    .LINE 95
                           A  1203    
0B044D DD0709              A  1204    	LD	BC,(IX+%9)
0B0450 DD27FD              A  1205    	LD	HL,(IX+%FFFFFFFD)
0B0453 B7                  A  1206    	OR	A,A
0B0454 ED42                A  1207    	SBC	HL,BC
0B0456 FA 60 04 0B         A  1208    	JP	M,L__16
0B045A EA EF 02 0B         A  1209    	JP	PE,L_19
0B045E 18 04               A  1210    	JR	L__17
0B0460                     A  1211    L__16:
0B0460 E2 EF 02 0B         A  1212    	JP	PO,L_19
0B0464                     A  1213    L__17:
0B0464 DD07F1              A  1214    	LD	BC,(IX+%FFFFFFF1)
0B0467 03                  A  1215    	INC	BC
0B0468 DD0FF1              A  1216    	LD	(IX+%FFFFFFF1),BC
                           A  1217    ;   96	    }
0B046B                     A  1218    L_24:
                           A  1219    .LINE 96
                           A  1220    
0B046B 01020000            A  1221    	LD	BC,2
0B046F DD270C              A  1222    	LD	HL,(IX+%C)
0B0472 CD C7 29 0B         A  1223    	CALL	__idivs
0B0476 E5C1                A  1224    	LD	BC,HL
0B0478 DD27F1              A  1225    	LD	HL,(IX+%FFFFFFF1)
0B047B B7                  A  1226    	OR	A,A
0B047C ED42                A  1227    	SBC	HL,BC
0B047E FA 88 04 0B         A  1228    	JP	M,L__18
0B0482 EA B7 02 0B         A  1229    	JP	PE,L_22
0B0486 18 04               A  1230    	JR	L__19
0B0488                     A  1231    L__18:
0B0488 E2 B7 02 0B         A  1232    	JP	PO,L_22
0B048C                     A  1233    L__19:
                           A  1234    ;   97		free(tempRow);
                           A  1235    .LINE 97
                           A  1236    
0B048C DD07FA              A  1237    	LD	BC,(IX+%FFFFFFFA)
0B048F C5                  A  1238    	PUSH	BC
0B0490 CD 72 24 0B         A  1239    	CALL	_free
0B0494 C1                  A  1240    	POP	BC
                           A  1241    ;   98	}
                           A  1242    .LINE 98
                           A  1243    
0B0495 DDF9                A  1244    	LD	SP,IX
0B0497 DDE1                A  1245    	POP	IX
0B0499 C9                  A  1246    	RET	
                           A  1247    
                           A  1248    
                           A  1249    ;**************************** _twiddle_buffer *
                           A  1250    ;Name                         Addr/Register   S
                           A  1251    ;_free                               IMPORT  --
                           A  1252    ;_malloc                             IMPORT  --
                           A  1253    ;row                                  IX-15    
                           A  1254    ;rowPtr                               IX-12    
                           A  1255    ;oppositeRowPtr                        IX-9    
                           A  1256    ;tempRow                               IX-6    
                           A  1257    ;col                                   IX-3    
                           A  1258    ;height                               IX+12    
                           A  1259    ;width                                 IX+9    
                           A  1260    ;buffer                                IX+6    
                           A  1261    
                           A  1262    
                           A  1263    ; Stack Frame Size: 43 (bytes)
                           A  1264    ;       Spill Code: -3 (instruction)
                           A  1265    
                           A  1266    
                           A  1267    .ENDFUNC "twiddle_buffer",98,"_twiddle_buffer"
                           A  1268    ;   99	
                           A  1269    ;  100	void reorder(char *arr, uint16_t length
0B049A                     A  1270    _reorder:
                           A  1271    .DEFINE "_reorder"
                           A  1272    
                           A  1273    .VALUE _reorder
                           A  1274    
                           A  1275    .CLASS 2
                           A  1276    
                           A  1277    .TYPE 65
                           A  1278    
                           A  1279    .ENDEF
                           A  1280    
                           A  1281    .BEGFUNC "reorder",100,"_reorder"
                           A  1282    
                           A  1283    .LINE 100
                           A  1284    
                           A  1285    .DEFINE "arr"
                           A  1286    
                           A  1287    .CLASS 65
                           A  1288    
                           A  1289    .VALUE 6
                           A  1290    
                           A  1291    .TYPE 34
                           A  1292    
                           A  1293    .ENDEF
                           A  1294    
                           A  1295    .DEFINE "length"
                           A  1296    
                           A  1297    .CLASS 65
                           A  1298    
                           A  1299    .VALUE 9
                           A  1300    
                           A  1301    .TYPE 13
                           A  1302    
                           A  1303    .ENDEF
                           A  1304    
                           A  1305    .DEFINE "alpha"
                           A  1306    
                           A  1307    .CLASS 65
                           A  1308    
                           A  1309    .VALUE 12
                           A  1310    
                           A  1311    .TYPE 12
                           A  1312    
                           A  1313    .ENDEF
                           A  1314    
                           A  1315    .DEFINE "i"
                           A  1316    
                           A  1317    .CLASS 65
                           A  1318    
                           A  1319    .VALUE -2
                           A  1320    
                           A  1321    .TYPE 13
                           A  1322    
                           A  1323    .ENDEF
                           A  1324    
                           A  1325    .DEFINE "temp"
                           A  1326    
                           A  1327    .CLASS 65
                           A  1328    
                           A  1329    .VALUE -3
                           A  1330    
                           A  1331    .TYPE 12
                           A  1332    
                           A  1333    .ENDEF
                           A  1334    
0B049A DDE5                A  1335    	PUSH	IX
0B049C DD210000 00         A  1336    	LD	IX,0
0B04A1 DD39                A  1337    	ADD	IX,SP
0B04A3 C5                  A  1338    	PUSH	BC
0B04A4 C5                  A  1339    	PUSH	BC
0B04A5 C5                  A  1340    	PUSH	BC
                           A  1341    ;  101	    uint16_t i;
                           A  1342    ;  102		for (i = 0; i < length; i += 4) {
                           A  1343    .LINE 102
                           A  1344    
0B04A6 DD36FE00            A  1345    	LD	(IX+%FFFFFFFE),%0
0B04AA DD36FF00            A  1346    	LD	(IX+%FFFFFFFF),%0
0B04AE 18 7D               A  1347    	JR	L_31
0B04B0                     A  1348    L_29:
                           A  1349    ;  103	        if (i + 2 < length) {
                           A  1350    .LINE 103
                           A  1351    
0B04B0 DD07FE              A  1352    	LD	BC,(IX+%FFFFFFFE)
0B04B3 CD 0C 28 0B         A  1353    	CALL	__stoiu
0B04B7 E5D1                A  1354    	LD	DE,HL
0B04B9 13                  A  1355    	INC	DE
0B04BA 13                  A  1356    	INC	DE
0B04BB DD0709              A  1357    	LD	BC,(IX+%9)
0B04BE CD 0C 28 0B         A  1358    	CALL	__stoiu
0B04C2 E5C1                A  1359    	LD	BC,HL
0B04C4 D5E1                A  1360    	LD	HL,DE
0B04C6 B7                  A  1361    	OR	A,A
0B04C7 ED42                A  1362    	SBC	HL,BC
0B04C9 F2 D3 04 0B         A  1363    	JP	P,L__24
0B04CD EA 21 05 0B         A  1364    	JP	PE,L_30
0B04D1 18 04               A  1365    	JR	L__25
0B04D3                     A  1366    L__24:
0B04D3 E2 21 05 0B         A  1367    	JP	PO,L_30
0B04D7                     A  1368    L__25:
                           A  1369    ;  104	            uint8_t temp = arr[i];
                           A  1370    .LINE 104
                           A  1371    
0B04D7 DD07FE              A  1372    	LD	BC,(IX+%FFFFFFFE)
0B04DA CD 0C 28 0B         A  1373    	CALL	__stoiu
0B04DE DD0706              A  1374    	LD	BC,(IX+%6)
0B04E1 09                  A  1375    	ADD	HL,BC
0B04E2 DD2FF7              A  1376    	LD	(IX+%FFFFFFF7),HL
0B04E5 7E                  A  1377    	LD	A,(HL)
0B04E6 DD77FD              A  1378    	LD	(IX+%FFFFFFFD),A
                           A  1379    ;  105	            arr[i] = arr[i + 2];
                           A  1380    .LINE 105
                           A  1381    
0B04E9 DD31F7              A  1382    	LD	IY,(IX+%FFFFFFF7)
0B04EC DD07FE              A  1383    	LD	BC,(IX+%FFFFFFFE)
0B04EF CD 0C 28 0B         A  1384    	CALL	__stoiu
0B04F3 DD0706              A  1385    	LD	BC,(IX+%6)
0B04F6 09                  A  1386    	ADD	HL,BC
0B04F7 FD7E02              A  1387    	LD	A,(IY+%2)
0B04FA 77                  A  1388    	LD	(HL),A
                           A  1389    ;  106	            arr[i + 2] = temp;
                           A  1390    .LINE 106
                           A  1391    
0B04FB DD07FE              A  1392    	LD	BC,(IX+%FFFFFFFE)
0B04FE CD 0C 28 0B         A  1393    	CALL	__stoiu
0B0502 DD0706              A  1394    	LD	BC,(IX+%6)
0B0505 09                  A  1395    	ADD	HL,BC
0B0506 DD2FFA              A  1396    	LD	(IX+%FFFFFFFA),HL
0B0509 DD31FA              A  1397    	LD	IY,(IX+%FFFFFFFA)
0B050C ED2302              A  1398    	LEA	HL,IY+%2
0B050F DD7EFD              A  1399    	LD	A,(IX+%FFFFFFFD)
0B0512 77                  A  1400    	LD	(HL),A
                           A  1401    ;  107				if (alpha == false) arr[i +
                           A  1402    .LINE 107
                           A  1403    
0B0513 DD7E0C              A  1404    	LD	A,(IX+%C)
0B0516 B7                  A  1405    	OR	A,A
0B0517 20 08               A  1406    	JR	NZ,L_30
0B0519 DD31FA              A  1407    	LD	IY,(IX+%FFFFFFFA)
0B051C ED2303              A  1408    	LEA	HL,IY+%3
0B051F 36FF                A  1409    	LD	(HL),%FF
                           A  1410    ;  108	        }
                           A  1411    ;  109	    }
0B0521                     A  1412    L_30:
                           A  1413    .LINE 109
                           A  1414    
0B0521 DD31FE              A  1415    	LD	IY,(IX+%FFFFFFFE)
0B0524 ED2304              A  1416    	LEA	HL,IY+%4
0B0527 DD75FE              A  1417    	LD	(IX+%FFFFFFFE),L
0B052A DD74FF              A  1418    	LD	(IX+%FFFFFFFF),H
0B052D                     A  1419    L_31:
0B052D DD0709              A  1420    	LD	BC,(IX+%9)
0B0530 DD27FE              A  1421    	LD	HL,(IX+%FFFFFFFE)
0B0533 B7                  A  1422    	OR	A,A
0B0534 40ED42              A  1423    	SBC.SIS	HL,BC
0B0537 DA B0 04 0B         A  1424    	JR	C,L_29
                           A  1425    ;  110	}
                           A  1426    .LINE 110
                           A  1427    
0B053B DDF9                A  1428    	LD	SP,IX
0B053D DDE1                A  1429    	POP	IX
0B053F C9                  A  1430    	RET	
                           A  1431    
                           A  1432    
                           A  1433    ;**************************** _reorder ********
                           A  1434    ;Name                         Addr/Register   S
                           A  1435    ;G_0                                   IX-6    
                           A  1436    ;temp                                  IX-3    
                           A  1437    ;i                                     IX-2    
                           A  1438    ;alpha                                IX+12    
                           A  1439    ;length                                IX+9    
                           A  1440    ;arr                                   IX+6    
                           A  1441    
                           A  1442    
                           A  1443    ; Stack Frame Size: 24 (bytes)
                           A  1444    ;       Spill Code: -3 (instruction)
                           A  1445    
                           A  1446    
                           A  1447    .ENDFUNC "reorder",110,"_reorder"
                           A  1448    ;  111	
                           A  1449    ;  112	void reorder_and_insert(char *arr, uint
0B0540                     A  1450    _reorder_and_insert:
                           A  1451    .DEFINE "_reorder_and_insert"
                           A  1452    
                           A  1453    .VALUE _reorder_and_insert
                           A  1454    
                           A  1455    .CLASS 2
                           A  1456    
                           A  1457    .TYPE 65
                           A  1458    
                           A  1459    .ENDEF
                           A  1460    
                           A  1461    .BEGFUNC "reorder_and_insert",112,"_reorder_and
                           A  1462    
                           A  1463    .LINE 112
                           A  1464    
                           A  1465    .DEFINE "arr"
                           A  1466    
                           A  1467    .CLASS 65
                           A  1468    
                           A  1469    .VALUE 6
                           A  1470    
                           A  1471    .TYPE 34
                           A  1472    
                           A  1473    .ENDEF
                           A  1474    
                           A  1475    .DEFINE "length"
                           A  1476    
                           A  1477    .CLASS 65
                           A  1478    
                           A  1479    .VALUE 9
                           A  1480    
                           A  1481    .TYPE 13
                           A  1482    
                           A  1483    .ENDEF
                           A  1484    
                           A  1485    .DEFINE "new_arr"
                           A  1486    
                           A  1487    .CLASS 65
                           A  1488    
                           A  1489    .VALUE 12
                           A  1490    
                           A  1491    .TYPE 290
                           A  1492    
                           A  1493    .ENDEF
                           A  1494    
                           A  1495    .DEFINE "new_length"
                           A  1496    
                           A  1497    .CLASS 65
                           A  1498    
                           A  1499    .VALUE 15
                           A  1500    
                           A  1501    .TYPE 45
                           A  1502    
                           A  1503    .ENDEF
                           A  1504    
                           A  1505    .DEFINE "insert_value"
                           A  1506    
                           A  1507    .CLASS 65
                           A  1508    
                           A  1509    .VALUE 18
                           A  1510    
                           A  1511    .TYPE 2
                           A  1512    
                           A  1513    .ENDEF
                           A  1514    
                           A  1515    .DEFINE "i"
                           A  1516    
                           A  1517    .CLASS 65
                           A  1518    
                           A  1519    .VALUE -2
                           A  1520    
                           A  1521    .TYPE 13
                           A  1522    
                           A  1523    .ENDEF
                           A  1524    
                           A  1525    .DEFINE "j"
                           A  1526    
                           A  1527    .CLASS 65
                           A  1528    
                           A  1529    .VALUE -4
                           A  1530    
                           A  1531    .TYPE 13
                           A  1532    
                           A  1533    .ENDEF
                           A  1534    
0B0540 DDE5                A  1535    	PUSH	IX
0B0542 DD210000 00         A  1536    	LD	IX,0
0B0547 DD39                A  1537    	ADD	IX,SP
0B0549 ED22ED              A  1538    	LEA	HL,IX+%FFFFFFED
0B054C F9                  A  1539    	LD	SP,HL
                           A  1540    ;  113	
                           A  1541    ;  114		uint16_t i, j = 0;
                           A  1542    .LINE 114
                           A  1543    
0B054D DD36FC00            A  1544    	LD	(IX+%FFFFFFFC),%0
0B0551 DD36FD00            A  1545    	LD	(IX+%FFFFFFFD),%0
                           A  1546    ;  115	    *new_length = (length / 3) * 4 + (l
                           A  1547    .LINE 115
                           A  1548    
0B0555 DD0709              A  1549    	LD	BC,(IX+%9)
0B0558 CD 0C 28 0B         A  1550    	CALL	__stoiu
0B055C 01030000            A  1551    	LD	BC,3
0B0560 CD C7 29 0B         A  1552    	CALL	__idivs
0B0564 29                  A  1553    	ADD	HL,HL
0B0565 29                  A  1554    	ADD	HL,HL
0B0566 E5D1                A  1555    	LD	DE,HL
0B0568 DD0709              A  1556    	LD	BC,(IX+%9)
0B056B CD 0C 28 0B         A  1557    	CALL	__stoiu
0B056F 01030000            A  1558    	LD	BC,3
0B0573 CD 2A 26 0B         A  1559    	CALL	__irems
0B0577 19                  A  1560    	ADD	HL,DE
0B0578 E5C1                A  1561    	LD	BC,HL
0B057A DD270F              A  1562    	LD	HL,(IX+%F)
0B057D 71                  A  1563    	LD	(HL),C
0B057E 23                  A  1564    	INC	HL
0B057F 70                  A  1565    	LD	(HL),B
                           A  1566    ;  116	    *new_arr = (char *) malloc(*new_len
                           A  1567    .LINE 116
                           A  1568    
0B0580 DD270F              A  1569    	LD	HL,(IX+%F)
0B0583 ED07                A  1570    	LD	BC,(HL)
0B0585 CD 0C 28 0B         A  1571    	CALL	__stoiu
0B0589 E5                  A  1572    	PUSH	HL
0B058A CD 77 25 0B         A  1573    	CALL	_malloc
0B058E C1                  A  1574    	POP	BC
0B058F DD310C              A  1575    	LD	IY,(IX+%C)
0B0592 FD2F00              A  1576    	LD	(IY),HL
                           A  1577    ;  117	
                           A  1578    ;  118	    for (i = 0; i < length; i += 3) {
                           A  1579    .LINE 118
                           A  1580    
0B0595 DD36FE00            A  1581    	LD	(IX+%FFFFFFFE),%0
0B0599 DD36FF00            A  1582    	LD	(IX+%FFFFFFFF),%0
0B059D C3 9C 06 0B         A  1583    	JR	L_43
0B05A1                     A  1584    L_41:
                           A  1585    ;  119	        
                           A  1586    ;  120	        (*new_arr)[j] = (i + 2 < length
                           A  1587    .LINE 120
                           A  1588    
0B05A1 DD07FE              A  1589    	LD	BC,(IX+%FFFFFFFE)
0B05A4 CD 0C 28 0B         A  1590    	CALL	__stoiu
0B05A8 E5D1                A  1591    	LD	DE,HL
0B05AA 13                  A  1592    	INC	DE
0B05AB 13                  A  1593    	INC	DE
0B05AC DD0709              A  1594    	LD	BC,(IX+%9)
0B05AF CD 0C 28 0B         A  1595    	CALL	__stoiu
0B05B3 E5C1                A  1596    	LD	BC,HL
0B05B5 D5E1                A  1597    	LD	HL,DE
0B05B7 B7                  A  1598    	OR	A,A
0B05B8 ED42                A  1599    	SBC	HL,BC
0B05BA F2 D6 05 0B         A  1600    	JP	P,L_35
0B05BE DD07FE              A  1601    	LD	BC,(IX+%FFFFFFFE)
0B05C1 CD 0C 28 0B         A  1602    	CALL	__stoiu
0B05C5 DD0706              A  1603    	LD	BC,(IX+%6)
0B05C8 09                  A  1604    	ADD	HL,BC
0B05C9 23                  A  1605    	INC	HL
0B05CA 23                  A  1606    	INC	HL
0B05CB 7E                  A  1607    	LD	A,(HL)
0B05CC 47                  A  1608    	LD	B,A
0B05CD 17ED62              A  1609    	SEXT	HL
0B05D0 68                  A  1610    	LD	L,B
0B05D1 DD2FF9              A  1611    	LD	(IX+%FFFFFFF9),HL
0B05D4 18 07               A  1612    	JR	L_36
0B05D6                     A  1613    L_35:
0B05D6 01000000            A  1614    	LD	BC,0
0B05DA DD0FF9              A  1615    	LD	(IX+%FFFFFFF9),BC
0B05DD                     A  1616    L_36:
0B05DD DD310C              A  1617    	LD	IY,(IX+%C)
0B05E0 DD07FC              A  1618    	LD	BC,(IX+%FFFFFFFC)
0B05E3 CD 0C 28 0B         A  1619    	CALL	__stoiu
0B05E7 FD0700              A  1620    	LD	BC,(IY)
0B05EA 09                  A  1621    	ADD	HL,BC
0B05EB DD2FF3              A  1622    	LD	(IX+%FFFFFFF3),HL
0B05EE DD7EF9              A  1623    	LD	A,(IX+%FFFFFFF9)
0B05F1 DD27F3              A  1624    	LD	HL,(IX+%FFFFFFF3)
0B05F4 77                  A  1625    	LD	(HL),A
                           A  1626    ;  121	        (*new_arr)[j + 1] = (i + 1 < le
                           A  1627    .LINE 121
                           A  1628    
0B05F5 DD07FE              A  1629    	LD	BC,(IX+%FFFFFFFE)
0B05F8 CD 0C 28 0B         A  1630    	CALL	__stoiu
0B05FC E5D1                A  1631    	LD	DE,HL
0B05FE 13                  A  1632    	INC	DE
0B05FF DD0709              A  1633    	LD	BC,(IX+%9)
0B0602 CD 0C 28 0B         A  1634    	CALL	__stoiu
0B0606 E5C1                A  1635    	LD	BC,HL
0B0608 D5E1                A  1636    	LD	HL,DE
0B060A B7                  A  1637    	OR	A,A
0B060B ED42                A  1638    	SBC	HL,BC
0B060D F2 17 06 0B         A  1639    	JP	P,L__30
0B0611 EA 32 06 0B         A  1640    	JP	PE,L_39
0B0615 18 04               A  1641    	JR	L__31
0B0617                     A  1642    L__30:
0B0617 E2 32 06 0B         A  1643    	JP	PO,L_39
0B061B                     A  1644    L__31:
0B061B DD07FE              A  1645    	LD	BC,(IX+%FFFFFFFE)
0B061E CD 0C 28 0B         A  1646    	CALL	__stoiu
0B0622 DD0706              A  1647    	LD	BC,(IX+%6)
0B0625 09                  A  1648    	ADD	HL,BC
0B0626 23                  A  1649    	INC	HL
0B0627 7E                  A  1650    	LD	A,(HL)
0B0628 47                  A  1651    	LD	B,A
0B0629 17ED62              A  1652    	SEXT	HL
0B062C 68                  A  1653    	LD	L,B
0B062D DD2FF6              A  1654    	LD	(IX+%FFFFFFF6),HL
0B0630 18 07               A  1655    	JR	L_40
0B0632                     A  1656    L_39:
0B0632 01000000            A  1657    	LD	BC,0
0B0636 DD0FF6              A  1658    	LD	(IX+%FFFFFFF6),BC
0B0639                     A  1659    L_40:
0B0639 DD7EF6              A  1660    	LD	A,(IX+%FFFFFFF6)
0B063C DD27F3              A  1661    	LD	HL,(IX+%FFFFFFF3)
0B063F 23                  A  1662    	INC	HL
0B0640 77                  A  1663    	LD	(HL),A
                           A  1664    ;  122	        (*new_arr)[j + 2] = arr[i];
                           A  1665    .LINE 122
                           A  1666    
0B0641 DD07FE              A  1667    	LD	BC,(IX+%FFFFFFFE)
0B0644 CD 0C 28 0B         A  1668    	CALL	__stoiu
0B0648 DD0706              A  1669    	LD	BC,(IX+%6)
0B064B 09                  A  1670    	ADD	HL,BC
0B064C E5FDE1              A  1671    	LD	IY,HL
0B064F DD270C              A  1672    	LD	HL,(IX+%C)
0B0652 DD2FED              A  1673    	LD	(IX+%FFFFFFED),HL	; spill
0B0655 DD07FC              A  1674    	LD	BC,(IX+%FFFFFFFC)
0B0658 CD 0C 28 0B         A  1675    	CALL	__stoiu
0B065C DD2FF0              A  1676    	LD	(IX+%FFFFFFF0),HL	; spill
0B065F DD27ED              A  1677    	LD	HL,(IX+%FFFFFFED)	; unspill
0B0662 ED07                A  1678    	LD	BC,(HL)
0B0664 DD27F0              A  1679    	LD	HL,(IX+%FFFFFFF0)	; unspill
0B0667 09                  A  1680    	ADD	HL,BC
0B0668 23                  A  1681    	INC	HL
0B0669 23                  A  1682    	INC	HL
0B066A FD7E00              A  1683    	LD	A,(IY)
0B066D 77                  A  1684    	LD	(HL),A
                           A  1685    ;  123	        
                           A  1686    ;  124	        (*new_arr)[j + 3] = 0xFF;
                           A  1687    .LINE 124
                           A  1688    
0B066E DD310C              A  1689    	LD	IY,(IX+%C)
0B0671 DD07FC              A  1690    	LD	BC,(IX+%FFFFFFFC)
0B0674 CD 0C 28 0B         A  1691    	CALL	__stoiu
0B0678 FD0700              A  1692    	LD	BC,(IY)
0B067B 09                  A  1693    	ADD	HL,BC
0B067C E5FDE1              A  1694    	LD	IY,HL
0B067F ED2303              A  1695    	LEA	HL,IY+%3
0B0682 36FF                A  1696    	LD	(HL),%FF
                           A  1697    ;  125	
                           A  1698    ;  126	        j += 4;
                           A  1699    .LINE 126
                           A  1700    
0B0684 DD31FC              A  1701    	LD	IY,(IX+%FFFFFFFC)
0B0687 ED2304              A  1702    	LEA	HL,IY+%4
0B068A DD75FC              A  1703    	LD	(IX+%FFFFFFFC),L
0B068D DD74FD              A  1704    	LD	(IX+%FFFFFFFD),H
0B0690 DD31FE              A  1705    	LD	IY,(IX+%FFFFFFFE)
0B0693 ED2303              A  1706    	LEA	HL,IY+%3
0B0696 DD75FE              A  1707    	LD	(IX+%FFFFFFFE),L
0B0699 DD74FF              A  1708    	LD	(IX+%FFFFFFFF),H
                           A  1709    ;  127	    }
0B069C                     A  1710    L_43:
                           A  1711    .LINE 127
                           A  1712    
0B069C DD0709              A  1713    	LD	BC,(IX+%9)
0B069F DD27FE              A  1714    	LD	HL,(IX+%FFFFFFFE)
0B06A2 B7                  A  1715    	OR	A,A
0B06A3 40ED42              A  1716    	SBC.SIS	HL,BC
0B06A6 DA A1 05 0B         A  1717    	JR	C,L_41
                           A  1718    ;  128		free(new_arr);
                           A  1719    .LINE 128
                           A  1720    
0B06AA DD070C              A  1721    	LD	BC,(IX+%C)
0B06AD C5                  A  1722    	PUSH	BC
0B06AE CD 72 24 0B         A  1723    	CALL	_free
0B06B2 C1                  A  1724    	POP	BC
                           A  1725    ;  129	}
                           A  1726    .LINE 129
                           A  1727    
0B06B3 DDF9                A  1728    	LD	SP,IX
0B06B5 DDE1                A  1729    	POP	IX
0B06B7 C9                  A  1730    	RET	
                           A  1731    
                           A  1732    
                           A  1733    ;**************************** _reorder_and_inse
                           A  1734    ;Name                         Addr/Register   S
                           A  1735    ;_free                               IMPORT  --
                           A  1736    ;_malloc                             IMPORT  --
                           A  1737    ;G_1                                  IX-13    
                           A  1738    ;temp37                               IX-10    
                           A  1739    ;temp33                                IX-7    
                           A  1740    ;j                                     IX-4    
                           A  1741    ;i                                     IX-2    
                           A  1742    ;insert_value                         IX+18    
                           A  1743    ;new_length                           IX+15    
                           A  1744    ;new_arr                              IX+12    
                           A  1745    ;length                                IX+9    
                           A  1746    ;arr                                   IX+6    
                           A  1747    
                           A  1748    
                           A  1749    ; Stack Frame Size: 40 (bytes)
                           A  1750    ;       Spill Code: -3 (instruction)
                           A  1751    
                           A  1752    
                           A  1753    .ENDFUNC "reorder_and_insert",129,"_reorder_and
                           A  1754    ;  130	
                           A  1755    ;  131	bmp_info load_bmp_big(const char * file
0B06B8                     A  1756    _load_bmp_big:
                           A  1757    .DEFINE "_load_bmp_big"
                           A  1758    
                           A  1759    .VALUE _load_bmp_big
                           A  1760    
                           A  1761    .CLASS 2
                           A  1762    
                           A  1763    .TAG "NONAME6"
                           A  1764    
                           A  1765    .TYPE 72
                           A  1766    
                           A  1767    .ENDEF
                           A  1768    
                           A  1769    .BEGFUNC "load_bmp_big",131,"_load_bmp_big"
                           A  1770    
                           A  1771    .LINE 131
                           A  1772    
                           A  1773    .DEFINE "filename"
                           A  1774    
                           A  1775    .CLASS 65
                           A  1776    
                           A  1777    .VALUE 9
                           A  1778    
                           A  1779    .TYPE 194
                           A  1780    
                           A  1781    .ENDEF
                           A  1782    
                           A  1783    .DEFINE "slot"
                           A  1784    
                           A  1785    .CLASS 65
                           A  1786    
                           A  1787    .VALUE 12
                           A  1788    
                           A  1789    .TYPE 12
                           A  1790    
                           A  1791    .ENDEF
                           A  1792    
                           A  1793    .DEFINE "file"
                           A  1794    
                           A  1795    .CLASS 65
                           A  1796    
                           A  1797    .VALUE -1
                           A  1798    
                           A  1799    .TYPE 12
                           A  1800    
                           A  1801    .ENDEF
                           A  1802    
                           A  1803    .DEFINE "y"
                           A  1804    
                           A  1805    .CLASS 65
                           A  1806    
                           A  1807    .VALUE -5
                           A  1808    
                           A  1809    .TYPE 5
                           A  1810    
                           A  1811    .ENDEF
                           A  1812    
                           A  1813    .DEFINE "bit_depth"
                           A  1814    
                           A  1815    .CLASS 65
                           A  1816    
                           A  1817    .VALUE -9
                           A  1818    
                           A  1819    .TYPE 5
                           A  1820    
                           A  1821    .ENDEF
                           A  1822    
                           A  1823    .DEFINE "src"
                           A  1824    
                           A  1825    .CLASS 65
                           A  1826    
                           A  1827    .VALUE -12
                           A  1828    
                           A  1829    .TYPE 34
                           A  1830    
                           A  1831    .ENDEF
                           A  1832    
                           A  1833    .DEFINE "width"
                           A  1834    
                           A  1835    .CLASS 65
                           A  1836    
                           A  1837    .VALUE -16
                           A  1838    
                           A  1839    .TYPE 5
                           A  1840    
                           A  1841    .ENDEF
                           A  1842    
                           A  1843    .DEFINE "height"
                           A  1844    
                           A  1845    .CLASS 65
                           A  1846    
                           A  1847    .VALUE -20
                           A  1848    
                           A  1849    .TYPE 5
                           A  1850    
                           A  1851    .ENDEF
                           A  1852    
                           A  1853    .DEFINE "return_info"
                           A  1854    
                           A  1855    .CLASS 65
                           A  1856    
                           A  1857    .VALUE -29
                           A  1858    
                           A  1859    .TAG "NONAME6"
                           A  1860    
                           A  1861    .TYPE 8
                           A  1862    
                           A  1863    .ENDEF
                           A  1864    
                           A  1865    .DEFINE "row_padding"
                           A  1866    
                           A  1867    .CLASS 65
                           A  1868    
                           A  1869    .VALUE -33
                           A  1870    
                           A  1871    .TYPE 5
                           A  1872    
                           A  1873    .ENDEF
                           A  1874    
                           A  1875    .DEFINE "index"
                           A  1876    
                           A  1877    .CLASS 65
                           A  1878    
                           A  1879    .VALUE -38
                           A  1880    
                           A  1881    .TYPE 12
                           A  1882    
                           A  1883    .ENDEF
                           A  1884    
                           A  1885    .DEFINE "color_table_size"
                           A  1886    
                           A  1887    .CLASS 65
                           A  1888    
                           A  1889    .VALUE -42
                           A  1890    
                           A  1891    .TYPE 15
                           A  1892    
                           A  1893    .ENDEF
                           A  1894    
                           A  1895    .DEFINE "fo"
                           A  1896    
                           A  1897    .CLASS 65
                           A  1898    
                           A  1899    .VALUE -45
                           A  1900    
                           A  1901    .TAG "NONAME5"
                           A  1902    
                           A  1903    .TYPE 40
                           A  1904    
                           A  1905    .ENDEF
                           A  1906    
                           A  1907    .DEFINE "x"
                           A  1908    
                           A  1909    .CLASS 65
                           A  1910    
                           A  1911    .VALUE -49
                           A  1912    
                           A  1913    .TYPE 5
                           A  1914    
                           A  1915    .ENDEF
                           A  1916    
                           A  1917    .DEFINE "r"
                           A  1918    
                           A  1919    .CLASS 65
                           A  1920    
                           A  1921    .VALUE -50
                           A  1922    
                           A  1923    .TYPE 12
                           A  1924    
                           A  1925    .ENDEF
                           A  1926    
                           A  1927    .DEFINE "g"
                           A  1928    
                           A  1929    .CLASS 65
                           A  1930    
                           A  1931    .VALUE -51
                           A  1932    
                           A  1933    .TYPE 12
                           A  1934    
                           A  1935    .ENDEF
                           A  1936    
                           A  1937    .DEFINE "b"
                           A  1938    
                           A  1939    .CLASS 65
                           A  1940    
                           A  1941    .VALUE -52
                           A  1942    
                           A  1943    .TYPE 12
                           A  1944    
                           A  1945    .ENDEF
                           A  1946    
                           A  1947    .DEFINE "non_pad_row"
                           A  1948    
                           A  1949    .CLASS 65
                           A  1950    
                           A  1951    .VALUE -55
                           A  1952    
                           A  1953    .TYPE 4
                           A  1954    
                           A  1955    .ENDEF
                           A  1956    
                           A  1957    .DEFINE "new_row_size"
                           A  1958    
                           A  1959    .CLASS 65
                           A  1960    
                           A  1961    .VALUE -57
                           A  1962    
                           A  1963    .TYPE 13
                           A  1964    
                           A  1965    .ENDEF
                           A  1966    
                           A  1967    .DEFINE "image_start"
                           A  1968    
                           A  1969    .CLASS 65
                           A  1970    
                           A  1971    .VALUE -61
                           A  1972    
                           A  1973    .TYPE 5
                           A  1974    
                           A  1975    .ENDEF
                           A  1976    
                           A  1977    .DEFINE "row_24bpp"
                           A  1978    
                           A  1979    .CLASS 65
                           A  1980    
                           A  1981    .VALUE -64
                           A  1982    
                           A  1983    .TYPE 34
                           A  1984    
                           A  1985    .ENDEF
                           A  1986    
                           A  1987    .DEFINE "image_buffer"
                           A  1988    
                           A  1989    .CLASS 65
                           A  1990    
                           A  1991    .VALUE -67
                           A  1992    
                           A  1993    .TYPE 34
                           A  1994    
                           A  1995    .ENDEF
                           A  1996    
                           A  1997    .DEFINE "biSize"
                           A  1998    
                           A  1999    .CLASS 65
                           A  2000    
                           A  2001    .VALUE -71
                           A  2002    
                           A  2003    .TYPE 15
                           A  2004    
                           A  2005    .ENDEF
                           A  2006    
                           A  2007    .DEFINE "alphamask"
                           A  2008    
                           A  2009    .CLASS 65
                           A  2010    
                           A  2011    .VALUE -75
                           A  2012    
                           A  2013    .TYPE 15
                           A  2014    
                           A  2015    .ENDEF
                           A  2016    
                           A  2017    .DEFINE "non_pad_row"
                           A  2018    
                           A  2019    .CLASS 65
                           A  2020    
                           A  2021    .VALUE -78
                           A  2022    
                           A  2023    .TYPE 4
                           A  2024    
                           A  2025    .ENDEF
                           A  2026    
                           A  2027    .DEFINE "non_pad_row"
                           A  2028    
                           A  2029    .CLASS 65
                           A  2030    
                           A  2031    .VALUE -81
                           A  2032    
                           A  2033    .TYPE 4
                           A  2034    
                           A  2035    .ENDEF
                           A  2036    
                           A  2037    .DEFINE "small_header"
                           A  2038    
                           A  2039    .CLASS 65
                           A  2040    
                           A  2041    .VALUE -99
                           A  2042    
                           A  2043    .DIM 18
                           A  2044    
                           A  2045    .TYPE 98
                           A  2046    
                           A  2047    .ENDEF
                           A  2048    
                           A  2049    .DEFINE "header"
                           A  2050    
                           A  2051    .CLASS 65
                           A  2052    
                           A  2053    .VALUE -227
                           A  2054    
                           A  2055    .DIM 128
                           A  2056    
                           A  2057    .TYPE 98
                           A  2058    
                           A  2059    .ENDEF
                           A  2060    
                           A  2061    .DEFINE "color_table"
                           A  2062    
                           A  2063    .CLASS 65
                           A  2064    
                           A  2065    .VALUE -1251
                           A  2066    
                           A  2067    .DIM 1024
                           A  2068    
                           A  2069    .TYPE 98
                           A  2070    
                           A  2071    .ENDEF
                           A  2072    
0B06B8 DDE5                A  2073    	PUSH	IX
0B06BA DD210000 00         A  2074    	LD	IX,0
0B06BF DD39                A  2075    	ADD	IX,SP
0B06C1 210AFBFF            A  2076    	LD	HL,-1270
0B06C5 39                  A  2077    	ADD	HL,SP
0B06C6 F9                  A  2078    	LD	SP,HL
                           A  2079    ;  132	
                           A  2080    ;  133	    int32_t image_start, width, height,
                           A  2081    ;  134		char* row_24bpp;
                           A  2082    ;  135	    uint8_t pixel[4], file, r, g, b, in
                           A  2083    ;  136	    char header[128], color_table[1024]
                           A  2084    ;  137		char small_header[18];
                           A  2085    ;  138	    uint32_t pixel_value, color_table_s
                           A  2086    ;  139	    uint32_t biSize;
                           A  2087    ;  140	    FIL * fo;
                           A  2088    ;  141		bmp_info return_info;
                           A  2089    ;  142	
                           A  2090    ;  143	    char * src;
                           A  2091    ;  144	    char * image_buffer;
                           A  2092    ;  145		
                           A  2093    ;  146		//if (game.vgm_file != NULL) parse_
                           A  2094    ;  147		
                           A  2095    ;  148		return_info.bmp_width = 0;
                           A  2096    .LINE 148
                           A  2097    
0B06C7 DD36E300            A  2098    	LD	(IX+%FFFFFFE3),%0
0B06CB DD36E400            A  2099    	LD	(IX+%FFFFFFE4),%0
                           A  2100    ;  149		return_info.bmp_height = 0;
                           A  2101    .LINE 149
                           A  2102    
0B06CF DD36E500            A  2103    	LD	(IX+%FFFFFFE5),%0
0B06D3 DD36E600            A  2104    	LD	(IX+%FFFFFFE6),%0
                           A  2105    ;  150		return_info.bmp_bitdepth = 0;	
                           A  2106    .LINE 150
                           A  2107    
0B06D7 DD36E700            A  2108    	LD	(IX+%FFFFFFE7),%0
                           A  2109    ;  151	
                           A  2110    ;  152	    file = mos_fopen(filename, fa_read)
                           A  2111    .LINE 152
                           A  2112    
0B06DB 01010000            A  2113    	LD	BC,1
0B06DF C5                  A  2114    	PUSH	BC
0B06E0 DD0709              A  2115    	LD	BC,(IX+%9)
0B06E3 C5                  A  2116    	PUSH	BC
0B06E4 CD C1 22 0B         A  2117    	CALL	_mos_fopen
0B06E8 C1                  A  2118    	POP	BC
0B06E9 C1                  A  2119    	POP	BC
0B06EA DD77FF              A  2120    	LD	(IX+%FFFFFFFF),A
                           A  2121    ;  153	    if (!file) {
                           A  2122    .LINE 153
                           A  2123    
0B06ED B7                  A  2124    	OR	A,A
0B06EE 20 3B               A  2125    	JR	NZ,L_47
                           A  2126    ;  154	        printf("Error: could not open %
                           A  2127    .LINE 154
                           A  2128    
0B06F0 01 12 28 0B         A  2129    	LD	BC,___print_uputch
0B06F4 ED43 42 2B 0B       A  2130    	LD	(___print_xputch),BC
0B06F9 01 48 2B 0B         A  2131    	LD	BC,L__34
0B06FD C5                  A  2132    	PUSH	BC
0B06FE CD 77 26 0B         A  2133    	CALL	___print_sendstring
0B0702 C1                  A  2134    	POP	BC
0B0703 DD0709              A  2135    	LD	BC,(IX+%9)
0B0706 C5                  A  2136    	PUSH	BC
0B0707 CD 77 26 0B         A  2137    	CALL	___print_sendstring
0B070B C1                  A  2138    	POP	BC
0B070C 01 5F 2B 0B         A  2139    	LD	BC,L__35
0B0710 C5                  A  2140    	PUSH	BC
0B0711 CD 77 26 0B         A  2141    	CALL	___print_sendstring
0B0715 C1                  A  2142    	POP	BC
                           A  2143    ;  155	        return return_info;
                           A  2144    .LINE 155
                           A  2145    
0B0716 ED2206              A  2146    	LEA	HL,IX+%6
0B0719 ED17                A  2147    	LD	DE,(HL)
0B071B ED22E3              A  2148    	LEA	HL,IX+%FFFFFFE3
0B071E 01050000            A  2149    	LD	BC,5
0B0722 EDB0                A  2150    	LDIR	
0B0724 DD2706              A  2151    	LD	HL,(IX+%6)
0B0727 C3 87 0F 0B         A  2152    	JR	L_83
                           A  2153    ;  156	    }
0B072B                     A  2154    L_47:
                           A  2155    .LINE 156
                           A  2156    
                           A  2157    ;  157	    fo = (FIL * ) mos_getfil(file);
                           A  2158    .LINE 157
                           A  2159    
0B072B DD4EFF              A  2160    	LD	C,(IX+%FFFFFFFF)
0B072E 0600                A  2161    	LD	B,%0
0B0730 C5                  A  2162    	PUSH	BC
0B0731 CD 47 24 0B         A  2163    	CALL	_mos_getfil
0B0735 C1                  A  2164    	POP	BC
0B0736 DD2FD3              A  2165    	LD	(IX+%FFFFFFD3),HL
                           A  2166    ;  158	
                           A  2167    ;  159	    mos_fread(file, small_header, 18);
                           A  2168    .LINE 159
                           A  2169    
0B0739 01120000            A  2170    	LD	BC,18
0B073D C5                  A  2171    	PUSH	BC
0B073E ED659D              A  2172    	PEA	IX+%FFFFFF9D
0B0741 DD4EFF              A  2173    	LD	C,(IX+%FFFFFFFF)
0B0744 0600                A  2174    	LD	B,%0
0B0746 C5                  A  2175    	PUSH	BC
0B0747 CD EE 23 0B         A  2176    	CALL	_mos_fread
0B074B C1                  A  2177    	POP	BC
0B074C C1                  A  2178    	POP	BC
0B074D C1                  A  2179    	POP	BC
                           A  2180    ;  160		biSize = * (uint32_t * ) & small_he
                           A  2181    .LINE 160
                           A  2182    
0B074E ED22AB              A  2183    	LEA	HL,IX+%FFFFFFAB
0B0751 ED07                A  2184    	LD	BC,(HL)
0B0753 23                  A  2185    	INC	HL
0B0754 23                  A  2186    	INC	HL
0B0755 23                  A  2187    	INC	HL
0B0756 7E                  A  2188    	LD	A,(HL)
0B0757 DD0FB9              A  2189    	LD	(IX+%FFFFFFB9),BC
0B075A DD77BC              A  2190    	LD	(IX+%FFFFFFBC),A
                           A  2191    ;  161		mos_flseek(file,0);
                           A  2192    .LINE 161
                           A  2193    
0B075D 01000000            A  2194    	LD	BC,0
0B0761 C5                  A  2195    	PUSH	BC
0B0762 C5                  A  2196    	PUSH	BC
0B0763 DD4EFF              A  2197    	LD	C,(IX+%FFFFFFFF)
0B0766 0600                A  2198    	LD	B,%0
0B0768 C5                  A  2199    	PUSH	BC
0B0769 CD 28 24 0B         A  2200    	CALL	_mos_flseek
0B076D C1                  A  2201    	POP	BC
0B076E C1                  A  2202    	POP	BC
0B076F C1                  A  2203    	POP	BC
                           A  2204    ;  162		mos_fread(file, header, biSize);
                           A  2205    .LINE 162
                           A  2206    
0B0770 DD07B9              A  2207    	LD	BC,(IX+%FFFFFFB9)
0B0773 C5                  A  2208    	PUSH	BC
0B0774 DDE5E1              A  2209    	LD	HL,IX
0B0777 011DFFFF            A  2210    	LD	BC,-227
0B077B 09                  A  2211    	ADD	HL,BC
0B077C E5C1                A  2212    	LD	BC,HL
0B077E C5                  A  2213    	PUSH	BC
0B077F DD4EFF              A  2214    	LD	C,(IX+%FFFFFFFF)
0B0782 0600                A  2215    	LD	B,%0
0B0784 C5                  A  2216    	PUSH	BC
0B0785 CD EE 23 0B         A  2217    	CALL	_mos_fread
0B0789 C1                  A  2218    	POP	BC
0B078A C1                  A  2219    	POP	BC
0B078B C1                  A  2220    	POP	BC
                           A  2221    ;  163	
                           A  2222    ;  164		image_start = * (uint32_t * ) & hea
                           A  2223    .LINE 164
                           A  2224    
0B078C DDE5FDE1            A  2225    	LD	IY,IX
0B0790 011DFFFF            A  2226    	LD	BC,-227
0B0794 FD09                A  2227    	ADD	IY,BC
0B0796 ED230A              A  2228    	LEA	HL,IY+%A
0B0799 ED07                A  2229    	LD	BC,(HL)
0B079B 23                  A  2230    	INC	HL
0B079C 23                  A  2231    	INC	HL
0B079D 23                  A  2232    	INC	HL
0B079E 7E                  A  2233    	LD	A,(HL)
0B079F DD0FC3              A  2234    	LD	(IX+%FFFFFFC3),BC
0B07A2 DD77C6              A  2235    	LD	(IX+%FFFFFFC6),A
                           A  2236    ;  165	    biSize = * (uint32_t * ) & header[1
                           A  2237    .LINE 165
                           A  2238    
0B07A5 DDE5FDE1            A  2239    	LD	IY,IX
0B07A9 011DFFFF            A  2240    	LD	BC,-227
0B07AD FD09                A  2241    	ADD	IY,BC
0B07AF ED230E              A  2242    	LEA	HL,IY+%E
0B07B2 ED07                A  2243    	LD	BC,(HL)
0B07B4 23                  A  2244    	INC	HL
0B07B5 23                  A  2245    	INC	HL
0B07B6 23                  A  2246    	INC	HL
0B07B7 7E                  A  2247    	LD	A,(HL)
0B07B8 DD0FB9              A  2248    	LD	(IX+%FFFFFFB9),BC
0B07BB DD77BC              A  2249    	LD	(IX+%FFFFFFBC),A
                           A  2250    ;  166	    width = * (INT32 * ) & header[18];
                           A  2251    .LINE 166
                           A  2252    
0B07BE DDE5FDE1            A  2253    	LD	IY,IX
0B07C2 011DFFFF            A  2254    	LD	BC,-227
0B07C6 FD09                A  2255    	ADD	IY,BC
0B07C8 ED2312              A  2256    	LEA	HL,IY+%12
0B07CB ED07                A  2257    	LD	BC,(HL)
0B07CD 23                  A  2258    	INC	HL
0B07CE 23                  A  2259    	INC	HL
0B07CF 23                  A  2260    	INC	HL
0B07D0 7E                  A  2261    	LD	A,(HL)
0B07D1 DD0FF0              A  2262    	LD	(IX+%FFFFFFF0),BC
0B07D4 DD77F3              A  2263    	LD	(IX+%FFFFFFF3),A
                           A  2264    ;  167	    height = * (INT32 * ) & header[22];
                           A  2265    .LINE 167
                           A  2266    
0B07D7 DDE5FDE1            A  2267    	LD	IY,IX
0B07DB 011DFFFF            A  2268    	LD	BC,-227
0B07DF FD09                A  2269    	ADD	IY,BC
0B07E1 ED2316              A  2270    	LEA	HL,IY+%16
0B07E4 ED07                A  2271    	LD	BC,(HL)
0B07E6 23                  A  2272    	INC	HL
0B07E7 23                  A  2273    	INC	HL
0B07E8 23                  A  2274    	INC	HL
0B07E9 7E                  A  2275    	LD	A,(HL)
0B07EA DD0FEC              A  2276    	LD	(IX+%FFFFFFEC),BC
0B07ED DD77EF              A  2277    	LD	(IX+%FFFFFFEF),A
                           A  2278    ;  168	    bit_depth = * (uint16_t * ) & heade
                           A  2279    .LINE 168
                           A  2280    
0B07F0 DDE5FDE1            A  2281    	LD	IY,IX
0B07F4 011DFFFF            A  2282    	LD	BC,-227
0B07F8 FD09                A  2283    	ADD	IY,BC
0B07FA ED231C              A  2284    	LEA	HL,IY+%1C
0B07FD ED07                A  2285    	LD	BC,(HL)
0B07FF CD 0C 28 0B         A  2286    	CALL	__stoiu
0B0803 E5C1                A  2287    	LD	BC,HL
0B0805 AF                  A  2288    	XOR	A,A
0B0806 DD0FF7              A  2289    	LD	(IX+%FFFFFFF7),BC
0B0809 DD77FA              A  2290    	LD	(IX+%FFFFFFFA),A
                           A  2291    ;  169	    color_table_size = * (uint32_t * ) 
                           A  2292    .LINE 169
                           A  2293    
0B080C DDE5FDE1            A  2294    	LD	IY,IX
0B0810 111DFFFF            A  2295    	LD	DE,-227
0B0814 FD19                A  2296    	ADD	IY,DE
0B0816 ED232E              A  2297    	LEA	HL,IY+%2E
0B0819 ED17                A  2298    	LD	DE,(HL)
0B081B 23                  A  2299    	INC	HL
0B081C 23                  A  2300    	INC	HL
0B081D 23                  A  2301    	INC	HL
0B081E 7E                  A  2302    	LD	A,(HL)
0B081F DD1FD6              A  2303    	LD	(IX+%FFFFFFD6),DE
0B0822 DD77D9              A  2304    	LD	(IX+%FFFFFFD9),A
                           A  2305    ;  170		alphamask =  * (uint32_t * ) & head
                           A  2306    .LINE 170
                           A  2307    
0B0825 DDE5FDE1            A  2308    	LD	IY,IX
0B0829 111DFFFF            A  2309    	LD	DE,-227
0B082D FD19                A  2310    	ADD	IY,DE
0B082F ED2334              A  2311    	LEA	HL,IY+%34
0B0832 ED17                A  2312    	LD	DE,(HL)
0B0834 23                  A  2313    	INC	HL
0B0835 23                  A  2314    	INC	HL
0B0836 23                  A  2315    	INC	HL
0B0837 7E                  A  2316    	LD	A,(HL)
0B0838 DD1FB5              A  2317    	LD	(IX+%FFFFFFB5),DE
0B083B DD77B8              A  2318    	LD	(IX+%FFFFFFB8),A
                           A  2319    ;  171		
                           A  2320    ;  172	    image_buffer = (char * ) malloc(wid
                           A  2321    .LINE 172
                           A  2322    
0B083E DD27F0              A  2323    	LD	HL,(IX+%FFFFFFF0)
0B0841 DD5EF3              A  2324    	LD	E,(IX+%FFFFFFF3)
0B0844 DD7EFA              A  2325    	LD	A,(IX+%FFFFFFFA)
0B0847 CD 81 2A 0B         A  2326    	CALL	__lmuls
0B084B 01080000            A  2327    	LD	BC,8
0B084F AF                  A  2328    	XOR	A,A
0B0850 CD 98 28 0B         A  2329    	CALL	__ldivs
0B0854 E5                  A  2330    	PUSH	HL
0B0855 CD 77 25 0B         A  2331    	CALL	_malloc
0B0859 C1                  A  2332    	POP	BC
0B085A DD2FBD              A  2333    	LD	(IX+%FFFFFFBD),HL
                           A  2334    ;  173	
                           A  2335    ;  174	    if (color_table_size == 0 && bit_de
                           A  2336    .LINE 174
                           A  2337    
0B085D DD27D6              A  2338    	LD	HL,(IX+%FFFFFFD6)
0B0860 DD5ED9              A  2339    	LD	E,(IX+%FFFFFFD9)
0B0863 01000000            A  2340    	LD	BC,0
0B0867 AF                  A  2341    	XOR	A,A
0B0868 CD 07 2A 0B         A  2342    	CALL	__lcmpu
0B086C 20 1C               A  2343    	JR	NZ,L_51
0B086E DD27F7              A  2344    	LD	HL,(IX+%FFFFFFF7)
0B0871 DD5EFA              A  2345    	LD	E,(IX+%FFFFFFFA)
0B0874 01080000            A  2346    	LD	BC,8
0B0878 AF                  A  2347    	XOR	A,A
0B0879 CD 07 2A 0B         A  2348    	CALL	__lcmps
0B087D 20 0B               A  2349    	JR	NZ,L_51
                           A  2350    ;  175	        color_table_size = 256;
                           A  2351    .LINE 175
                           A  2352    
0B087F 01000100            A  2353    	LD	BC,256
0B0883 AF                  A  2354    	XOR	A,A
0B0884 DD0FD6              A  2355    	LD	(IX+%FFFFFFD6),BC
0B0887 DD77D9              A  2356    	LD	(IX+%FFFFFFD9),A
                           A  2357    ;  176	    }
0B088A                     A  2358    L_51:
                           A  2359    .LINE 176
                           A  2360    
                           A  2361    ;  177	
                           A  2362    ;  178	    if (color_table_size > 0) mos_fread
                           A  2363    .LINE 178
                           A  2364    
0B088A B7                  A  2365    	OR	A,A
0B088B ED62                A  2366    	SBC	HL,HL
0B088D 1E00                A  2367    	LD	E,%0
0B088F DD07D6              A  2368    	LD	BC,(IX+%FFFFFFD6)
0B0892 DD7ED9              A  2369    	LD	A,(IX+%FFFFFFD9)
0B0895 CD 07 2A 0B         A  2370    	CALL	__lcmpu
0B0899 30 1E               A  2371    	JR	NC,L_55
0B089B DD27D6              A  2372    	LD	HL,(IX+%FFFFFFD6)
0B089E 29                  A  2373    	ADD	HL,HL
0B089F 29                  A  2374    	ADD	HL,HL
0B08A0 E5                  A  2375    	PUSH	HL
0B08A1 DDE5E1              A  2376    	LD	HL,IX
0B08A4 011DFBFF            A  2377    	LD	BC,-1251
0B08A8 09                  A  2378    	ADD	HL,BC
0B08A9 E5C1                A  2379    	LD	BC,HL
0B08AB C5                  A  2380    	PUSH	BC
0B08AC DD4EFF              A  2381    	LD	C,(IX+%FFFFFFFF)
0B08AF 0600                A  2382    	LD	B,%0
0B08B1 C5                  A  2383    	PUSH	BC
0B08B2 CD EE 23 0B         A  2384    	CALL	_mos_fread
0B08B6 C1                  A  2385    	POP	BC
0B08B7 C1                  A  2386    	POP	BC
0B08B8 C1                  A  2387    	POP	BC
0B08B9                     A  2388    L_55:
                           A  2389    ;  179		
                           A  2390    ;  180	    if ((bit_depth != 32) && (bit_depth
                           A  2391    .LINE 180
                           A  2392    
0B08B9 DD27F7              A  2393    	LD	HL,(IX+%FFFFFFF7)
0B08BC DD5EFA              A  2394    	LD	E,(IX+%FFFFFFFA)
0B08BF 01200000            A  2395    	LD	BC,32
0B08C3 AF                  A  2396    	XOR	A,A
0B08C4 CD 07 2A 0B         A  2397    	CALL	__lcmps
0B08C8 28 55               A  2398    	JR	Z,L_56
0B08CA DD27F7              A  2399    	LD	HL,(IX+%FFFFFFF7)
0B08CD DD5EFA              A  2400    	LD	E,(IX+%FFFFFFFA)
0B08D0 01180000            A  2401    	LD	BC,24
0B08D4 AF                  A  2402    	XOR	A,A
0B08D5 CD 07 2A 0B         A  2403    	CALL	__lcmps
0B08D9 28 44               A  2404    	JR	Z,L_56
0B08DB DD27F7              A  2405    	LD	HL,(IX+%FFFFFFF7)
0B08DE DD5EFA              A  2406    	LD	E,(IX+%FFFFFFFA)
0B08E1 01080000            A  2407    	LD	BC,8
0B08E5 AF                  A  2408    	XOR	A,A
0B08E6 CD 07 2A 0B         A  2409    	CALL	__lcmps
0B08EA 28 33               A  2410    	JR	Z,L_56
                           A  2411    ;  181	        printf("Error: unsupported bit 
                           A  2412    .LINE 181
                           A  2413    
0B08EC 01 12 28 0B         A  2414    	LD	BC,___print_uputch
0B08F0 ED43 42 2B 0B       A  2415    	LD	(___print_xputch),BC
0B08F5 01 63 2B 0B         A  2416    	LD	BC,L__42
0B08F9 C5                  A  2417    	PUSH	BC
0B08FA CD 77 26 0B         A  2418    	CALL	___print_sendstring
0B08FE C1                  A  2419    	POP	BC
                           A  2420    ;  182	        mos_fclose(file);
                           A  2421    .LINE 182
                           A  2422    
0B08FF DD4EFF              A  2423    	LD	C,(IX+%FFFFFFFF)
0B0902 0600                A  2424    	LD	B,%0
0B0904 C5                  A  2425    	PUSH	BC
0B0905 CD D9 22 0B         A  2426    	CALL	_mos_fclose
0B0909 C1                  A  2427    	POP	BC
                           A  2428    ;  183	        return return_info;
                           A  2429    .LINE 183
                           A  2430    
0B090A ED2206              A  2431    	LEA	HL,IX+%6
0B090D ED17                A  2432    	LD	DE,(HL)
0B090F ED22E3              A  2433    	LEA	HL,IX+%FFFFFFE3
0B0912 01050000            A  2434    	LD	BC,5
0B0916 EDB0                A  2435    	LDIR	
0B0918 DD2706              A  2436    	LD	HL,(IX+%6)
0B091B C3 87 0F 0B         A  2437    	JR	L_83
                           A  2438    ;  184	    }
0B091F                     A  2439    L_56:
                           A  2440    .LINE 184
                           A  2441    
                           A  2442    ;  185		
                           A  2443    ;  186	    row_padding = (4 - (width * (bit_de
                           A  2444    .LINE 186
                           A  2445    
0B091F DD27F7              A  2446    	LD	HL,(IX+%FFFFFFF7)
0B0922 DD5EFA              A  2447    	LD	E,(IX+%FFFFFFFA)
0B0925 01080000            A  2448    	LD	BC,8
0B0929 AF                  A  2449    	XOR	A,A
0B092A CD 98 28 0B         A  2450    	CALL	__ldivs
0B092E DD07F0              A  2451    	LD	BC,(IX+%FFFFFFF0)
0B0931 DD7EF3              A  2452    	LD	A,(IX+%FFFFFFF3)
0B0934 CD 81 2A 0B         A  2453    	CALL	__lmuls
0B0938 01040000            A  2454    	LD	BC,4
0B093C AF                  A  2455    	XOR	A,A
0B093D CD 26 2A 0B         A  2456    	CALL	__lrems
0B0941 7B                  A  2457    	LD	A,E
0B0942 E5C1                A  2458    	LD	BC,HL
0B0944 21040000            A  2459    	LD	HL,4
0B0948 1E00                A  2460    	LD	E,%0
0B094A CD 47 29 0B         A  2461    	CALL	__lsub
0B094E 01040000            A  2462    	LD	BC,4
0B0952 AF                  A  2463    	XOR	A,A
0B0953 CD 26 2A 0B         A  2464    	CALL	__lrems
0B0957 DD2FDF              A  2465    	LD	(IX+%FFFFFFDF),HL
0B095A DD73E2              A  2466    	LD	(IX+%FFFFFFE2),E
                           A  2467    ;  187	
                           A  2468    ;  188		//clear_buffer(slot);
                           A  2469    ;  189		
                           A  2470    ;  190	    vdp_bitmapSelect(slot);
                           A  2471    .LINE 190
                           A  2472    
0B095D DD4E0C              A  2473    	LD	C,(IX+%C)
0B0960 0600                A  2474    	LD	B,%0
0B0962 C5                  A  2475    	PUSH	BC
0B0963 CD 08 19 0B         A  2476    	CALL	_vdp_bitmapSelect
0B0967 C1                  A  2477    	POP	BC
                           A  2478    ;  191	    putch(23); // vdu_sys
                           A  2479    .LINE 191
                           A  2480    
0B0968 01170000            A  2481    	LD	BC,23
0B096C C5                  A  2482    	PUSH	BC
0B096D CD 69 20 0B         A  2483    	CALL	_putch
0B0971 C1                  A  2484    	POP	BC
                           A  2485    ;  192	    putch(27); // sprite command
                           A  2486    .LINE 192
                           A  2487    
0B0972 011B0000            A  2488    	LD	BC,27
0B0976 C5                  A  2489    	PUSH	BC
0B0977 CD 69 20 0B         A  2490    	CALL	_putch
0B097B C1                  A  2491    	POP	BC
                           A  2492    ;  193	    putch(1); // send data to selected 
                           A  2493    .LINE 193
                           A  2494    
0B097C 01010000            A  2495    	LD	BC,1
0B0980 C5                  A  2496    	PUSH	BC
0B0981 CD 69 20 0B         A  2497    	CALL	_putch
0B0985 C1                  A  2498    	POP	BC
                           A  2499    ;  194	
                           A  2500    ;  195	    write16bit(width);
                           A  2501    .LINE 195
                           A  2502    
0B0986 DD07F0              A  2503    	LD	BC,(IX+%FFFFFFF0)
0B0989 C5                  A  2504    	PUSH	BC
0B098A CD A7 14 0B         A  2505    	CALL	_write16bit
0B098E C1                  A  2506    	POP	BC
                           A  2507    ;  196	    write16bit(height);
                           A  2508    .LINE 196
                           A  2509    
0B098F DD07EC              A  2510    	LD	BC,(IX+%FFFFFFEC)
0B0992 C5                  A  2511    	PUSH	BC
0B0993 CD A7 14 0B         A  2512    	CALL	_write16bit
0B0997 C1                  A  2513    	POP	BC
                           A  2514    ;  197		
                           A  2515    ;  198	    if (bit_depth == 8) {
                           A  2516    .LINE 198
                           A  2517    
0B0998 DD27F7              A  2518    	LD	HL,(IX+%FFFFFFF7)
0B099B DD5EFA              A  2519    	LD	E,(IX+%FFFFFFFA)
0B099E 01080000            A  2520    	LD	BC,8
0B09A2 AF                  A  2521    	XOR	A,A
0B09A3 CD 07 2A 0B         A  2522    	CALL	__lcmps
0B09A7 C2 B0 0B 0B         A  2523    	JR	NZ,L_81
                           A  2524    ;  199			uint8_t a = 0xFF;
                           A  2525    ;  200			int non_pad_row = width * bit_d
                           A  2526    .LINE 200
                           A  2527    
0B09AB DD27F0              A  2528    	LD	HL,(IX+%FFFFFFF0)
0B09AE DD5EF3              A  2529    	LD	E,(IX+%FFFFFFF3)
0B09B1 DD07F7              A  2530    	LD	BC,(IX+%FFFFFFF7)
0B09B4 DD7EFA              A  2531    	LD	A,(IX+%FFFFFFFA)
0B09B7 CD 81 2A 0B         A  2532    	CALL	__lmuls
0B09BB 01080000            A  2533    	LD	BC,8
0B09BF AF                  A  2534    	XOR	A,A
0B09C0 CD 98 28 0B         A  2535    	CALL	__ldivs
0B09C4 DD2FC9              A  2536    	LD	(IX+%FFFFFFC9),HL
                           A  2537    ;  201			mos_flseek(file, image_start + 
                           A  2538    .LINE 201
                           A  2539    
0B09C7 E5C1                A  2540    	LD	BC,HL
0B09C9 CD 00 2A 0B         A  2541    	CALL	__itol
0B09CD DD27DF              A  2542    	LD	HL,(IX+%FFFFFFDF)
0B09D0 DD5EE2              A  2543    	LD	E,(IX+%FFFFFFE2)
0B09D3 CD 6C 24 0B         A  2544    	CALL	__ladd
0B09D7 7B                  A  2545    	LD	A,E
0B09D8 FD210DFB FF         A  2546    	LD	IY,-1267	; spill
0B09DD DDE5C1              A  2547    	LD	BC,IX	; spill
0B09E0 FD09                A  2548    	ADD	IY,BC
0B09E2 FD7700              A  2549    	LD	(IY),A
0B09E5 010AFBFF            A  2550    	LD	BC,-1270	; spill
0B09E9 CD 62 26 0B         A  2551    	CALL	__istix
0B09ED DD27EC              A  2552    	LD	HL,(IX+%FFFFFFEC)
0B09F0 DD5EEF              A  2553    	LD	E,(IX+%FFFFFFEF)
0B09F3 01010000            A  2554    	LD	BC,1
0B09F7 AF                  A  2555    	XOR	A,A
0B09F8 CD 47 29 0B         A  2556    	CALL	__lsub
0B09FC 7B                  A  2557    	LD	A,E
0B09FD E5C1                A  2558    	LD	BC,HL
0B09FF C5                  A  2559    	PUSH	BC
0B0A00 FD2119FB FF         A  2560    	LD	IY,-1255	; spill
0B0A05 DDE5C1              A  2561    	LD	BC,IX	; spill
0B0A08 FD09                A  2562    	ADD	IY,BC
0B0A0A FD7700              A  2563    	LD	(IY),A
0B0A0D FD210DFB FF         A  2564    	LD	IY,-1267	; unspill
0B0A12 DDE5C1              A  2565    	LD	BC,IX	; unspill
0B0A15 FD09                A  2566    	ADD	IY,BC
0B0A17 FD7E00              A  2567    	LD	A,(IY)
0B0A1A C1                  A  2568    	POP	BC
0B0A1B 5F                  A  2569    	LD	E,A
0B0A1C C5                  A  2570    	PUSH	BC
0B0A1D FD2119FB FF         A  2571    	LD	IY,-1255	; unspill
0B0A22 DDE5C1              A  2572    	LD	BC,IX	; unspill
0B0A25 FD09                A  2573    	ADD	IY,BC
0B0A27 FD7E00              A  2574    	LD	A,(IY)
0B0A2A C1                  A  2575    	POP	BC
0B0A2B C5E1                A  2576    	LD	HL,BC
0B0A2D 0115FBFF            A  2577    	LD	BC,-1259	; spill
0B0A31 CD 62 26 0B         A  2578    	CALL	__istix
0B0A35 010AFBFF            A  2579    	LD	BC,-1270	; unspill
0B0A39 CD EE 2A 0B         A  2580    	CALL	__ildix
0B0A3D E5C1                A  2581    	LD	BC,HL
0B0A3F C5E1                A  2582    	LD	HL,BC
0B0A41 0115FBFF            A  2583    	LD	BC,-1259	; unspill
0B0A45 E5                  A  2584    	PUSH	HL
0B0A46 CD EE 2A 0B         A  2585    	CALL	__ildix
0B0A4A E5C1                A  2586    	LD	BC,HL
0B0A4C E1                  A  2587    	POP	HL
0B0A4D CD 81 2A 0B         A  2588    	CALL	__lmulu
0B0A51 DD07C3              A  2589    	LD	BC,(IX+%FFFFFFC3)
0B0A54 DD7EC6              A  2590    	LD	A,(IX+%FFFFFFC6)
0B0A57 CD 6C 24 0B         A  2591    	CALL	__ladd
0B0A5B 4B                  A  2592    	LD	C,E
0B0A5C 0600                A  2593    	LD	B,%0
0B0A5E C5                  A  2594    	PUSH	BC
0B0A5F E5                  A  2595    	PUSH	HL
0B0A60 DD4EFF              A  2596    	LD	C,(IX+%FFFFFFFF)
0B0A63 C5                  A  2597    	PUSH	BC
0B0A64 CD 28 24 0B         A  2598    	CALL	_mos_flseek
0B0A68 C1                  A  2599    	POP	BC
0B0A69 C1                  A  2600    	POP	BC
0B0A6A C1                  A  2601    	POP	BC
                           A  2602    ;  202			
                           A  2603    ;  203	        for (y = height - 1; y >= 0; y-
                           A  2604    .LINE 203
                           A  2605    
0B0A6B DD27EC              A  2606    	LD	HL,(IX+%FFFFFFEC)
0B0A6E DD5EEF              A  2607    	LD	E,(IX+%FFFFFFEF)
0B0A71 01FFFFFF            A  2608    	LD	BC,16777215
0B0A75 3EFF                A  2609    	LD	A,%FF
0B0A77 CD 6C 24 0B         A  2610    	CALL	__ladd
0B0A7B DD2FFB              A  2611    	LD	(IX+%FFFFFFFB),HL
0B0A7E DD73FE              A  2612    	LD	(IX+%FFFFFFFE),E
0B0A81 C3 8F 0B 0B         A  2613    	JR	L_65
0B0A85                     A  2614    L_63:
                           A  2615    ;  204	            for (x = 0; x < width; x++)
                           A  2616    .LINE 204
                           A  2617    
0B0A85 01000000            A  2618    	LD	BC,0
0B0A89 AF                  A  2619    	XOR	A,A
0B0A8A DD0FCF              A  2620    	LD	(IX+%FFFFFFCF),BC
0B0A8D DD77D2              A  2621    	LD	(IX+%FFFFFFD2),A
0B0A90 C3 2E 0B 0B         A  2622    	JR	L_61
0B0A94                     A  2623    L_59:
                           A  2624    ;  205	
                           A  2625    ;  206	                index = (char) mos_fget
                           A  2626    .LINE 206
                           A  2627    
0B0A94 DD4EFF              A  2628    	LD	C,(IX+%FFFFFFFF)
0B0A97 0600                A  2629    	LD	B,%0
0B0A99 C5                  A  2630    	PUSH	BC
0B0A9A CD EE 22 0B         A  2631    	CALL	_mos_fgetc
0B0A9E C1                  A  2632    	POP	BC
0B0A9F DD77DA              A  2633    	LD	(IX+%FFFFFFDA),A
                           A  2634    ;  207	                b = color_table[index *
                           A  2635    .LINE 207
                           A  2636    
0B0AA2 B7ED62              A  2637    	UEXT	HL
0B0AA5 6F                  A  2638    	LD	L,A
0B0AA6 29                  A  2639    	ADD	HL,HL
0B0AA7 29                  A  2640    	ADD	HL,HL
0B0AA8 E5C1                A  2641    	LD	BC,HL
0B0AAA DDE5E1              A  2642    	LD	HL,IX
0B0AAD 111DFBFF            A  2643    	LD	DE,-1251
0B0AB1 19                  A  2644    	ADD	HL,DE
0B0AB2 09                  A  2645    	ADD	HL,BC
0B0AB3 FD211AFB FF         A  2646    	LD	IY,-1254
0B0AB8 DDE5C1              A  2647    	LD	BC,IX
0B0ABB FD09                A  2648    	ADD	IY,BC
0B0ABD FD2F00              A  2649    	LD	(IY),HL
0B0AC0 211AFBFF            A  2650    	LD	HL,-1254
0B0AC4 DDE5C1              A  2651    	LD	BC,IX
0B0AC7 09                  A  2652    	ADD	HL,BC
0B0AC8 ED27                A  2653    	LD	HL,(HL)
0B0ACA 7E                  A  2654    	LD	A,(HL)
0B0ACB DD77CC              A  2655    	LD	(IX+%FFFFFFCC),A
                           A  2656    ;  208	                g = color_table[index *
                           A  2657    .LINE 208
                           A  2658    
0B0ACE 211AFBFF            A  2659    	LD	HL,-1254
0B0AD2 DDE5C1              A  2660    	LD	BC,IX
0B0AD5 09                  A  2661    	ADD	HL,BC
0B0AD6 ED27                A  2662    	LD	HL,(HL)
0B0AD8 23                  A  2663    	INC	HL
0B0AD9 7E                  A  2664    	LD	A,(HL)
0B0ADA DD77CD              A  2665    	LD	(IX+%FFFFFFCD),A
                           A  2666    ;  209	                r = color_table[index *
                           A  2667    .LINE 209
                           A  2668    
0B0ADD 211AFBFF            A  2669    	LD	HL,-1254
0B0AE1 DDE5C1              A  2670    	LD	BC,IX
0B0AE4 09                  A  2671    	ADD	HL,BC
0B0AE5 ED31                A  2672    	LD	IY,(HL)
0B0AE7 ED2302              A  2673    	LEA	HL,IY+%2
0B0AEA 7E                  A  2674    	LD	A,(HL)
0B0AEB DD77CE              A  2675    	LD	(IX+%FFFFFFCE),A
                           A  2676    ;  210					
                           A  2677    ;  211					putch(r);
                           A  2678    .LINE 211
                           A  2679    
0B0AEE B7ED62              A  2680    	UEXT	HL
0B0AF1 6F                  A  2681    	LD	L,A
0B0AF2 E5                  A  2682    	PUSH	HL
0B0AF3 CD 69 20 0B         A  2683    	CALL	_putch
0B0AF7 C1                  A  2684    	POP	BC
                           A  2685    ;  212					putch(g);
                           A  2686    .LINE 212
                           A  2687    
0B0AF8 DD7ECD              A  2688    	LD	A,(IX+%FFFFFFCD)
0B0AFB B7ED62              A  2689    	UEXT	HL
0B0AFE 6F                  A  2690    	LD	L,A
0B0AFF E5                  A  2691    	PUSH	HL
0B0B00 CD 69 20 0B         A  2692    	CALL	_putch
0B0B04 C1                  A  2693    	POP	BC
                           A  2694    ;  213					putch(b);
                           A  2695    .LINE 213
                           A  2696    
0B0B05 DD7ECC              A  2697    	LD	A,(IX+%FFFFFFCC)
0B0B08 B7ED62              A  2698    	UEXT	HL
0B0B0B 6F                  A  2699    	LD	L,A
0B0B0C E5                  A  2700    	PUSH	HL
0B0B0D CD 69 20 0B         A  2701    	CALL	_putch
0B0B11 C1                  A  2702    	POP	BC
                           A  2703    ;  214					putch(0xFF);
                           A  2704    .LINE 214
                           A  2705    
0B0B12 01FF0000            A  2706    	LD	BC,255
0B0B16 C5                  A  2707    	PUSH	BC
0B0B17 CD 69 20 0B         A  2708    	CALL	_putch
0B0B1B C1                  A  2709    	POP	BC
0B0B1C DD27CF              A  2710    	LD	HL,(IX+%FFFFFFCF)
0B0B1F DD5ED2              A  2711    	LD	E,(IX+%FFFFFFD2)
0B0B22 3E01                A  2712    	LD	A,%1
0B0B24 CD 5D 24 0B         A  2713    	CALL	__ladd_b
0B0B28 DD2FCF              A  2714    	LD	(IX+%FFFFFFCF),HL
0B0B2B DD73D2              A  2715    	LD	(IX+%FFFFFFD2),E
                           A  2716    ;  215					
                           A  2717    ;  216	
                           A  2718    ;  217	            }
0B0B2E                     A  2719    L_61:
                           A  2720    .LINE 217
                           A  2721    
0B0B2E DD27CF              A  2722    	LD	HL,(IX+%FFFFFFCF)
0B0B31 DD5ED2              A  2723    	LD	E,(IX+%FFFFFFD2)
0B0B34 DD07F0              A  2724    	LD	BC,(IX+%FFFFFFF0)
0B0B37 DD7EF3              A  2725    	LD	A,(IX+%FFFFFFF3)
0B0B3A CD 07 2A 0B         A  2726    	CALL	__lcmps
0B0B3E FA 94 0A 0B         A  2727    	JP	M,L_59
                           A  2728    ;  218				
                           A  2729    ;  219				//add_stream_to_buffer(slot
                           A  2730    ;  220				mos_flseek(file, fo -> fptr
                           A  2731    .LINE 220
                           A  2732    
0B0B42 DD27C9              A  2733    	LD	HL,(IX+%FFFFFFC9)
0B0B45 29                  A  2734    	ADD	HL,HL
0B0B46 E5C1                A  2735    	LD	BC,HL
0B0B48 CD 00 2A 0B         A  2736    	CALL	__itol
0B0B4C 5F                  A  2737    	LD	E,A
0B0B4D C5E1                A  2738    	LD	HL,BC
0B0B4F DD07DF              A  2739    	LD	BC,(IX+%FFFFFFDF)
0B0B52 DD7EE2              A  2740    	LD	A,(IX+%FFFFFFE2)
0B0B55 CD 6C 24 0B         A  2741    	CALL	__ladd
0B0B59 7B                  A  2742    	LD	A,E
0B0B5A E5C1                A  2743    	LD	BC,HL
0B0B5C DD31D3              A  2744    	LD	IY,(IX+%FFFFFFD3)
0B0B5F FD2711              A  2745    	LD	HL,(IY+%11)
0B0B62 FD5E14              A  2746    	LD	E,(IY+%14)
0B0B65 CD 47 29 0B         A  2747    	CALL	__lsub
0B0B69 4B                  A  2748    	LD	C,E
0B0B6A 0600                A  2749    	LD	B,%0
0B0B6C C5                  A  2750    	PUSH	BC
0B0B6D E5                  A  2751    	PUSH	HL
0B0B6E DD4EFF              A  2752    	LD	C,(IX+%FFFFFFFF)
0B0B71 C5                  A  2753    	PUSH	BC
0B0B72 CD 28 24 0B         A  2754    	CALL	_mos_flseek
0B0B76 C1                  A  2755    	POP	BC
0B0B77 C1                  A  2756    	POP	BC
0B0B78 C1                  A  2757    	POP	BC
0B0B79 DD27FB              A  2758    	LD	HL,(IX+%FFFFFFFB)
0B0B7C DD5EFE              A  2759    	LD	E,(IX+%FFFFFFFE)
0B0B7F 01FFFFFF            A  2760    	LD	BC,16777215
0B0B83 3EFF                A  2761    	LD	A,%FF
0B0B85 CD 6C 24 0B         A  2762    	CALL	__ladd
0B0B89 DD2FFB              A  2763    	LD	(IX+%FFFFFFFB),HL
0B0B8C DD73FE              A  2764    	LD	(IX+%FFFFFFFE),E
                           A  2765    ;  221	            // for (i = 0; i < row_padd
                           A  2766    ;  222	                // mos_fgetc(file);
                           A  2767    ;  223	            // }
                           A  2768    ;  224	
                           A  2769    ;  225	        }
0B0B8F                     A  2770    L_65:
                           A  2771    .LINE 225
                           A  2772    
0B0B8F DD27FB              A  2773    	LD	HL,(IX+%FFFFFFFB)
0B0B92 DD5EFE              A  2774    	LD	E,(IX+%FFFFFFFE)
0B0B95 01000000            A  2775    	LD	BC,0
0B0B99 AF                  A  2776    	XOR	A,A
0B0B9A CD 07 2A 0B         A  2777    	CALL	__lcmps
0B0B9E F2 A8 0B 0B         A  2778    	JP	P,L__51
0B0BA2 EA 85 0A 0B         A  2779    	JP	PE,L_63
0B0BA6 18 04               A  2780    	JR	L__52
0B0BA8                     A  2781    L__51:
0B0BA8 E2 85 0A 0B         A  2782    	JP	PO,L_63
0B0BAC                     A  2783    L__52:
0B0BAC C3 4A 0F 0B         A  2784    	JR	L_82
                           A  2785    ;  226	
                           A  2786    ;  227	    } else if (bit_depth == 32) {
0B0BB0                     A  2787    L_81:
                           A  2788    .LINE 227
                           A  2789    
0B0BB0 DD27F7              A  2790    	LD	HL,(IX+%FFFFFFF7)
0B0BB3 DD5EFA              A  2791    	LD	E,(IX+%FFFFFFFA)
0B0BB6 01200000            A  2792    	LD	BC,32
0B0BBA AF                  A  2793    	XOR	A,A
0B0BBB CD 07 2A 0B         A  2794    	CALL	__lcmps
0B0BBF C2 86 0D 0B         A  2795    	JR	NZ,L_79
                           A  2796    ;  228	        
                           A  2797    ;  229			int non_pad_row = width * bit_d
                           A  2798    .LINE 229
                           A  2799    
0B0BC3 DD27F0              A  2800    	LD	HL,(IX+%FFFFFFF0)
0B0BC6 DD5EF3              A  2801    	LD	E,(IX+%FFFFFFF3)
0B0BC9 DD07F7              A  2802    	LD	BC,(IX+%FFFFFFF7)
0B0BCC DD7EFA              A  2803    	LD	A,(IX+%FFFFFFFA)
0B0BCF CD 81 2A 0B         A  2804    	CALL	__lmuls
0B0BD3 01080000            A  2805    	LD	BC,8
0B0BD7 AF                  A  2806    	XOR	A,A
0B0BD8 CD 98 28 0B         A  2807    	CALL	__ldivs
0B0BDC DD2FE8              A  2808    	LD	(IX+%FFFFFFE8),HL
0B0BDF DD73EB              A  2809    	LD	(IX+%FFFFFFEB),E
0B0BE2 DD2FAF              A  2810    	LD	(IX+%FFFFFFAF),HL
                           A  2811    ;  230	        src = (char * ) malloc(width * 
                           A  2812    .LINE 230
                           A  2813    
0B0BE5 E5C1                A  2814    	LD	BC,HL
0B0BE7 C5                  A  2815    	PUSH	BC
0B0BE8 CD 77 25 0B         A  2816    	CALL	_malloc
0B0BEC C1                  A  2817    	POP	BC
0B0BED DD2FF4              A  2818    	LD	(IX+%FFFFFFF4),HL
                           A  2819    ;  231			mos_flseek(file, image_start + 
                           A  2820    .LINE 231
                           A  2821    
0B0BF0 DD07E8              A  2822    	LD	BC,(IX+%FFFFFFE8)
0B0BF3 CD 00 2A 0B         A  2823    	CALL	__itol
0B0BF7 DD27DF              A  2824    	LD	HL,(IX+%FFFFFFDF)
0B0BFA DD5EE2              A  2825    	LD	E,(IX+%FFFFFFE2)
0B0BFD CD 6C 24 0B         A  2826    	CALL	__ladd
0B0C01 7B                  A  2827    	LD	A,E
0B0C02 FD2111FB FF         A  2828    	LD	IY,-1263	; spill
0B0C07 DDE5C1              A  2829    	LD	BC,IX	; spill
0B0C0A FD09                A  2830    	ADD	IY,BC
0B0C0C FD7700              A  2831    	LD	(IY),A
0B0C0F 010EFBFF            A  2832    	LD	BC,-1266	; spill
0B0C13 CD 62 26 0B         A  2833    	CALL	__istix
0B0C17 DD27EC              A  2834    	LD	HL,(IX+%FFFFFFEC)
0B0C1A DD5EEF              A  2835    	LD	E,(IX+%FFFFFFEF)
0B0C1D 01010000            A  2836    	LD	BC,1
0B0C21 AF                  A  2837    	XOR	A,A
0B0C22 CD 47 29 0B         A  2838    	CALL	__lsub
0B0C26 7B                  A  2839    	LD	A,E
0B0C27 E5C1                A  2840    	LD	BC,HL
0B0C29 C5                  A  2841    	PUSH	BC
0B0C2A FD2119FB FF         A  2842    	LD	IY,-1255	; spill
0B0C2F DDE5C1              A  2843    	LD	BC,IX	; spill
0B0C32 FD09                A  2844    	ADD	IY,BC
0B0C34 FD7700              A  2845    	LD	(IY),A
0B0C37 FD2111FB FF         A  2846    	LD	IY,-1263	; unspill
0B0C3C DDE5C1              A  2847    	LD	BC,IX	; unspill
0B0C3F FD09                A  2848    	ADD	IY,BC
0B0C41 FD7E00              A  2849    	LD	A,(IY)
0B0C44 C1                  A  2850    	POP	BC
0B0C45 5F                  A  2851    	LD	E,A
0B0C46 C5                  A  2852    	PUSH	BC
0B0C47 FD2119FB FF         A  2853    	LD	IY,-1255	; unspill
0B0C4C DDE5C1              A  2854    	LD	BC,IX	; unspill
0B0C4F FD09                A  2855    	ADD	IY,BC
0B0C51 FD7E00              A  2856    	LD	A,(IY)
0B0C54 C1                  A  2857    	POP	BC
0B0C55 C5E1                A  2858    	LD	HL,BC
0B0C57 0115FBFF            A  2859    	LD	BC,-1259	; spill
0B0C5B CD 62 26 0B         A  2860    	CALL	__istix
0B0C5F 010EFBFF            A  2861    	LD	BC,-1266	; unspill
0B0C63 CD EE 2A 0B         A  2862    	CALL	__ildix
0B0C67 E5C1                A  2863    	LD	BC,HL
0B0C69 C5E1                A  2864    	LD	HL,BC
0B0C6B 0115FBFF            A  2865    	LD	BC,-1259	; unspill
0B0C6F E5                  A  2866    	PUSH	HL
0B0C70 CD EE 2A 0B         A  2867    	CALL	__ildix
0B0C74 E5C1                A  2868    	LD	BC,HL
0B0C76 E1                  A  2869    	POP	HL
0B0C77 CD 81 2A 0B         A  2870    	CALL	__lmulu
0B0C7B DD07C3              A  2871    	LD	BC,(IX+%FFFFFFC3)
0B0C7E DD7EC6              A  2872    	LD	A,(IX+%FFFFFFC6)
0B0C81 CD 6C 24 0B         A  2873    	CALL	__ladd
0B0C85 4B                  A  2874    	LD	C,E
0B0C86 0600                A  2875    	LD	B,%0
0B0C88 C5                  A  2876    	PUSH	BC
0B0C89 E5                  A  2877    	PUSH	HL
0B0C8A DD4EFF              A  2878    	LD	C,(IX+%FFFFFFFF)
0B0C8D C5                  A  2879    	PUSH	BC
0B0C8E CD 28 24 0B         A  2880    	CALL	_mos_flseek
0B0C92 C1                  A  2881    	POP	BC
0B0C93 C1                  A  2882    	POP	BC
0B0C94 C1                  A  2883    	POP	BC
                           A  2884    ;  232	
                           A  2885    ;  233	        for (y = height - 1; y >= 0; y-
                           A  2886    .LINE 233
                           A  2887    
0B0C95 DD27EC              A  2888    	LD	HL,(IX+%FFFFFFEC)
0B0C98 DD5EEF              A  2889    	LD	E,(IX+%FFFFFFEF)
0B0C9B 01FFFFFF            A  2890    	LD	BC,16777215
0B0C9F 3EFF                A  2891    	LD	A,%FF
0B0CA1 CD 6C 24 0B         A  2892    	CALL	__ladd
0B0CA5 DD2FFB              A  2893    	LD	(IX+%FFFFFFFB),HL
0B0CA8 DD73FE              A  2894    	LD	(IX+%FFFFFFFE),E
0B0CAB C3 65 0D 0B         A  2895    	JR	L_72
0B0CAF                     A  2896    L_70:
                           A  2897    ;  234	
                           A  2898    ;  235	            mos_fread(file, src, non_pa
                           A  2899    .LINE 235
                           A  2900    
0B0CAF DD07E8              A  2901    	LD	BC,(IX+%FFFFFFE8)
0B0CB2 C5                  A  2902    	PUSH	BC
0B0CB3 DD07F4              A  2903    	LD	BC,(IX+%FFFFFFF4)
0B0CB6 C5                  A  2904    	PUSH	BC
0B0CB7 DD4EFF              A  2905    	LD	C,(IX+%FFFFFFFF)
0B0CBA 0600                A  2906    	LD	B,%0
0B0CBC C5                  A  2907    	PUSH	BC
0B0CBD CD EE 23 0B         A  2908    	CALL	_mos_fread
0B0CC1 C1                  A  2909    	POP	BC
0B0CC2 C1                  A  2910    	POP	BC
0B0CC3 C1                  A  2911    	POP	BC
                           A  2912    ;  236				if (alphamask == 0) reorder
                           A  2913    .LINE 236
                           A  2914    
0B0CC4 DD27B5              A  2915    	LD	HL,(IX+%FFFFFFB5)
0B0CC7 DD5EB8              A  2916    	LD	E,(IX+%FFFFFFB8)
0B0CCA 01000000            A  2917    	LD	BC,0
0B0CCE AF                  A  2918    	XOR	A,A
0B0CCF CD 07 2A 0B         A  2919    	CALL	__lcmpu
0B0CD3 20 12               A  2920    	JR	NZ,L_68
0B0CD5 C5                  A  2921    	PUSH	BC
0B0CD6 DD07E8              A  2922    	LD	BC,(IX+%FFFFFFE8)
0B0CD9 C5                  A  2923    	PUSH	BC
0B0CDA DD07F4              A  2924    	LD	BC,(IX+%FFFFFFF4)
0B0CDD C5                  A  2925    	PUSH	BC
0B0CDE CD 9A 04 0B         A  2926    	CALL	_reorder
0B0CE2 C1                  A  2927    	POP	BC
0B0CE3 C1                  A  2928    	POP	BC
0B0CE4 C1                  A  2929    	POP	BC
                           A  2930    ;  237				else reorder(src, non_pad_r
                           A  2931    .LINE 237
                           A  2932    
0B0CE5 18 14               A  2933    	JR	L_69
0B0CE7                     A  2934    L_68:
0B0CE7 01010000            A  2935    	LD	BC,1
0B0CEB C5                  A  2936    	PUSH	BC
0B0CEC DD07E8              A  2937    	LD	BC,(IX+%FFFFFFE8)
0B0CEF C5                  A  2938    	PUSH	BC
0B0CF0 DD07F4              A  2939    	LD	BC,(IX+%FFFFFFF4)
0B0CF3 C5                  A  2940    	PUSH	BC
0B0CF4 CD 9A 04 0B         A  2941    	CALL	_reorder
0B0CF8 C1                  A  2942    	POP	BC
0B0CF9 C1                  A  2943    	POP	BC
0B0CFA C1                  A  2944    	POP	BC
0B0CFB                     A  2945    L_69:
                           A  2946    ;  238	            mos_puts(src, non_pad_row, 
                           A  2947    .LINE 238
                           A  2948    
0B0CFB 01000000            A  2949    	LD	BC,0
0B0CFF C5                  A  2950    	PUSH	BC
0B0D00 DD07E8              A  2951    	LD	BC,(IX+%FFFFFFE8)
0B0D03 C5                  A  2952    	PUSH	BC
0B0D04 DD07F4              A  2953    	LD	BC,(IX+%FFFFFFF4)
0B0D07 C5                  A  2954    	PUSH	BC
0B0D08 CD 81 20 0B         A  2955    	CALL	_mos_puts
0B0D0C C1                  A  2956    	POP	BC
0B0D0D C1                  A  2957    	POP	BC
0B0D0E C1                  A  2958    	POP	BC
                           A  2959    ;  239				//add_stream_to_buffer(slot
                           A  2960    ;  240	            mos_flseek(file, fo -> fptr
                           A  2961    .LINE 240
                           A  2962    
0B0D0F DD27E8              A  2963    	LD	HL,(IX+%FFFFFFE8)
0B0D12 29                  A  2964    	ADD	HL,HL
0B0D13 E5C1                A  2965    	LD	BC,HL
0B0D15 CD 00 2A 0B         A  2966    	CALL	__itol
0B0D19 5F                  A  2967    	LD	E,A
0B0D1A C5E1                A  2968    	LD	HL,BC
0B0D1C DD07DF              A  2969    	LD	BC,(IX+%FFFFFFDF)
0B0D1F DD7EE2              A  2970    	LD	A,(IX+%FFFFFFE2)
0B0D22 CD 6C 24 0B         A  2971    	CALL	__ladd
0B0D26 7B                  A  2972    	LD	A,E
0B0D27 E5C1                A  2973    	LD	BC,HL
0B0D29 DD31D3              A  2974    	LD	IY,(IX+%FFFFFFD3)
0B0D2C FD2711              A  2975    	LD	HL,(IY+%11)
0B0D2F FD5E14              A  2976    	LD	E,(IY+%14)
0B0D32 CD 47 29 0B         A  2977    	CALL	__lsub
0B0D36 4B                  A  2978    	LD	C,E
0B0D37 0600                A  2979    	LD	B,%0
0B0D39 C5                  A  2980    	PUSH	BC
0B0D3A E5                  A  2981    	PUSH	HL
0B0D3B DD4EFF              A  2982    	LD	C,(IX+%FFFFFFFF)
0B0D3E C5                  A  2983    	PUSH	BC
0B0D3F CD 28 24 0B         A  2984    	CALL	_mos_flseek
0B0D43 C1                  A  2985    	POP	BC
0B0D44 C1                  A  2986    	POP	BC
0B0D45 C1                  A  2987    	POP	BC
                           A  2988    ;  241				free(src);			
                           A  2989    .LINE 241
                           A  2990    
0B0D46 DD07F4              A  2991    	LD	BC,(IX+%FFFFFFF4)
0B0D49 C5                  A  2992    	PUSH	BC
0B0D4A CD 72 24 0B         A  2993    	CALL	_free
0B0D4E C1                  A  2994    	POP	BC
0B0D4F DD27FB              A  2995    	LD	HL,(IX+%FFFFFFFB)
0B0D52 DD5EFE              A  2996    	LD	E,(IX+%FFFFFFFE)
0B0D55 01FFFFFF            A  2997    	LD	BC,16777215
0B0D59 3EFF                A  2998    	LD	A,%FF
0B0D5B CD 6C 24 0B         A  2999    	CALL	__ladd
0B0D5F DD2FFB              A  3000    	LD	(IX+%FFFFFFFB),HL
0B0D62 DD73FE              A  3001    	LD	(IX+%FFFFFFFE),E
                           A  3002    ;  242	
                           A  3003    ;  243	        }
0B0D65                     A  3004    L_72:
                           A  3005    .LINE 243
                           A  3006    
0B0D65 DD27FB              A  3007    	LD	HL,(IX+%FFFFFFFB)
0B0D68 DD5EFE              A  3008    	LD	E,(IX+%FFFFFFFE)
0B0D6B 01000000            A  3009    	LD	BC,0
0B0D6F AF                  A  3010    	XOR	A,A
0B0D70 CD 07 2A 0B         A  3011    	CALL	__lcmps
0B0D74 F2 7E 0D 0B         A  3012    	JP	P,L__53
0B0D78 EA AF 0C 0B         A  3013    	JP	PE,L_70
0B0D7C 18 04               A  3014    	JR	L__54
0B0D7E                     A  3015    L__53:
0B0D7E E2 AF 0C 0B         A  3016    	JP	PO,L_70
0B0D82                     A  3017    L__54:
0B0D82 C3 4A 0F 0B         A  3018    	JR	L_82
                           A  3019    ;  244	
                           A  3020    ;  245	    } else if (bit_depth == 24) {
0B0D86                     A  3021    L_79:
                           A  3022    .LINE 245
                           A  3023    
0B0D86 DD27F7              A  3024    	LD	HL,(IX+%FFFFFFF7)
0B0D89 DD5EFA              A  3025    	LD	E,(IX+%FFFFFFFA)
0B0D8C 01180000            A  3026    	LD	BC,24
0B0D90 AF                  A  3027    	XOR	A,A
0B0D91 CD 07 2A 0B         A  3028    	CALL	__lcmps
0B0D95 C2 4A 0F 0B         A  3029    	JR	NZ,L_82
                           A  3030    ;  246			
                           A  3031    ;  247			uint16_t new_row_size;
                           A  3032    ;  248			int non_pad_row = width * bit_d
                           A  3033    .LINE 248
                           A  3034    
0B0D99 DD27F0              A  3035    	LD	HL,(IX+%FFFFFFF0)
0B0D9C DD5EF3              A  3036    	LD	E,(IX+%FFFFFFF3)
0B0D9F DD07F7              A  3037    	LD	BC,(IX+%FFFFFFF7)
0B0DA2 DD7EFA              A  3038    	LD	A,(IX+%FFFFFFFA)
0B0DA5 CD 81 2A 0B         A  3039    	CALL	__lmuls
0B0DA9 01080000            A  3040    	LD	BC,8
0B0DAD AF                  A  3041    	XOR	A,A
0B0DAE CD 98 28 0B         A  3042    	CALL	__ldivs
0B0DB2 DD2FDB              A  3043    	LD	(IX+%FFFFFFDB),HL
0B0DB5 DD73DE              A  3044    	LD	(IX+%FFFFFFDE),E
0B0DB8 DD2FB2              A  3045    	LD	(IX+%FFFFFFB2),HL
                           A  3046    ;  249			
                           A  3047    ;  250	        src = (char * ) malloc(width * 
                           A  3048    .LINE 250
                           A  3049    
0B0DBB E5C1                A  3050    	LD	BC,HL
0B0DBD C5                  A  3051    	PUSH	BC
0B0DBE CD 77 25 0B         A  3052    	CALL	_malloc
0B0DC2 C1                  A  3053    	POP	BC
0B0DC3 DD2FF4              A  3054    	LD	(IX+%FFFFFFF4),HL
                           A  3055    ;  251			mos_flseek(file, image_start + 
                           A  3056    .LINE 251
                           A  3057    
0B0DC6 DD07DB              A  3058    	LD	BC,(IX+%FFFFFFDB)
0B0DC9 CD 00 2A 0B         A  3059    	CALL	__itol
0B0DCD DD27DF              A  3060    	LD	HL,(IX+%FFFFFFDF)
0B0DD0 DD5EE2              A  3061    	LD	E,(IX+%FFFFFFE2)
0B0DD3 CD 6C 24 0B         A  3062    	CALL	__ladd
0B0DD7 7B                  A  3063    	LD	A,E
0B0DD8 FD2118FB FF         A  3064    	LD	IY,-1256	; spill
0B0DDD DDE5C1              A  3065    	LD	BC,IX	; spill
0B0DE0 FD09                A  3066    	ADD	IY,BC
0B0DE2 FD7700              A  3067    	LD	(IY),A
0B0DE5 0112FBFF            A  3068    	LD	BC,-1262	; spill
0B0DE9 CD 62 26 0B         A  3069    	CALL	__istix
0B0DED DD27EC              A  3070    	LD	HL,(IX+%FFFFFFEC)
0B0DF0 DD5EEF              A  3071    	LD	E,(IX+%FFFFFFEF)
0B0DF3 01010000            A  3072    	LD	BC,1
0B0DF7 AF                  A  3073    	XOR	A,A
0B0DF8 CD 47 29 0B         A  3074    	CALL	__lsub
0B0DFC 7B                  A  3075    	LD	A,E
0B0DFD E5C1                A  3076    	LD	BC,HL
0B0DFF C5                  A  3077    	PUSH	BC
0B0E00 FD2119FB FF         A  3078    	LD	IY,-1255	; spill
0B0E05 DDE5C1              A  3079    	LD	BC,IX	; spill
0B0E08 FD09                A  3080    	ADD	IY,BC
0B0E0A FD7700              A  3081    	LD	(IY),A
0B0E0D FD2118FB FF         A  3082    	LD	IY,-1256	; unspill
0B0E12 DDE5C1              A  3083    	LD	BC,IX	; unspill
0B0E15 FD09                A  3084    	ADD	IY,BC
0B0E17 FD7E00              A  3085    	LD	A,(IY)
0B0E1A C1                  A  3086    	POP	BC
0B0E1B 5F                  A  3087    	LD	E,A
0B0E1C C5                  A  3088    	PUSH	BC
0B0E1D FD2119FB FF         A  3089    	LD	IY,-1255	; unspill
0B0E22 DDE5C1              A  3090    	LD	BC,IX	; unspill
0B0E25 FD09                A  3091    	ADD	IY,BC
0B0E27 FD7E00              A  3092    	LD	A,(IY)
0B0E2A C1                  A  3093    	POP	BC
0B0E2B C5E1                A  3094    	LD	HL,BC
0B0E2D 0115FBFF            A  3095    	LD	BC,-1259	; spill
0B0E31 CD 62 26 0B         A  3096    	CALL	__istix
0B0E35 0112FBFF            A  3097    	LD	BC,-1262	; unspill
0B0E39 CD EE 2A 0B         A  3098    	CALL	__ildix
0B0E3D E5C1                A  3099    	LD	BC,HL
0B0E3F C5E1                A  3100    	LD	HL,BC
0B0E41 0115FBFF            A  3101    	LD	BC,-1259	; unspill
0B0E45 E5                  A  3102    	PUSH	HL
0B0E46 CD EE 2A 0B         A  3103    	CALL	__ildix
0B0E4A E5C1                A  3104    	LD	BC,HL
0B0E4C E1                  A  3105    	POP	HL
0B0E4D CD 81 2A 0B         A  3106    	CALL	__lmulu
0B0E51 DD07C3              A  3107    	LD	BC,(IX+%FFFFFFC3)
0B0E54 DD7EC6              A  3108    	LD	A,(IX+%FFFFFFC6)
0B0E57 CD 6C 24 0B         A  3109    	CALL	__ladd
0B0E5B 4B                  A  3110    	LD	C,E
0B0E5C 0600                A  3111    	LD	B,%0
0B0E5E C5                  A  3112    	PUSH	BC
0B0E5F E5                  A  3113    	PUSH	HL
0B0E60 DD4EFF              A  3114    	LD	C,(IX+%FFFFFFFF)
0B0E63 C5                  A  3115    	PUSH	BC
0B0E64 CD 28 24 0B         A  3116    	CALL	_mos_flseek
0B0E68 C1                  A  3117    	POP	BC
0B0E69 C1                  A  3118    	POP	BC
0B0E6A C1                  A  3119    	POP	BC
                           A  3120    ;  252			
                           A  3121    ;  253	        for (y = height - 1; y >= 0; y-
                           A  3122    .LINE 253
                           A  3123    
0B0E6B DD27EC              A  3124    	LD	HL,(IX+%FFFFFFEC)
0B0E6E DD5EEF              A  3125    	LD	E,(IX+%FFFFFFEF)
0B0E71 01FFFFFF            A  3126    	LD	BC,16777215
0B0E75 3EFF                A  3127    	LD	A,%FF
0B0E77 CD 6C 24 0B         A  3128    	CALL	__ladd
0B0E7B DD2FFB              A  3129    	LD	(IX+%FFFFFFFB),HL
0B0E7E DD73FE              A  3130    	LD	(IX+%FFFFFFFE),E
0B0E81 C3 2D 0F 0B         A  3131    	JR	L_76
0B0E85                     A  3132    L_74:
                           A  3133    ;  254	
                           A  3134    ;  255	            mos_fread(file, src, non_pa
                           A  3135    .LINE 255
                           A  3136    
0B0E85 DD07DB              A  3137    	LD	BC,(IX+%FFFFFFDB)
0B0E88 C5                  A  3138    	PUSH	BC
0B0E89 DD07F4              A  3139    	LD	BC,(IX+%FFFFFFF4)
0B0E8C C5                  A  3140    	PUSH	BC
0B0E8D DD4EFF              A  3141    	LD	C,(IX+%FFFFFFFF)
0B0E90 0600                A  3142    	LD	B,%0
0B0E92 C5                  A  3143    	PUSH	BC
0B0E93 CD EE 23 0B         A  3144    	CALL	_mos_fread
0B0E97 C1                  A  3145    	POP	BC
0B0E98 C1                  A  3146    	POP	BC
0B0E99 C1                  A  3147    	POP	BC
                           A  3148    ;  256				reorder_and_insert(src, non
                           A  3149    .LINE 256
                           A  3150    
0B0E9A 01FFFFFF            A  3151    	LD	BC,16777215
0B0E9E C5                  A  3152    	PUSH	BC
0B0E9F ED65C7              A  3153    	PEA	IX+%FFFFFFC7
0B0EA2 ED65C0              A  3154    	PEA	IX+%FFFFFFC0
0B0EA5 DD07DB              A  3155    	LD	BC,(IX+%FFFFFFDB)
0B0EA8 C5                  A  3156    	PUSH	BC
0B0EA9 DD07F4              A  3157    	LD	BC,(IX+%FFFFFFF4)
0B0EAC C5                  A  3158    	PUSH	BC
0B0EAD CD 40 05 0B         A  3159    	CALL	_reorder_and_insert
0B0EB1 C1                  A  3160    	POP	BC
0B0EB2 C1                  A  3161    	POP	BC
0B0EB3 C1                  A  3162    	POP	BC
0B0EB4 C1                  A  3163    	POP	BC
0B0EB5 C1                  A  3164    	POP	BC
                           A  3165    ;  257	            mos_puts(row_24bpp, new_row
                           A  3166    .LINE 257
                           A  3167    
0B0EB6 01000000            A  3168    	LD	BC,0
0B0EBA C5                  A  3169    	PUSH	BC
0B0EBB DD07C7              A  3170    	LD	BC,(IX+%FFFFFFC7)
0B0EBE CD 0C 28 0B         A  3171    	CALL	__stoiu
0B0EC2 E5                  A  3172    	PUSH	HL
0B0EC3 DD07C0              A  3173    	LD	BC,(IX+%FFFFFFC0)
0B0EC6 C5                  A  3174    	PUSH	BC
0B0EC7 CD 81 20 0B         A  3175    	CALL	_mos_puts
0B0ECB C1                  A  3176    	POP	BC
0B0ECC C1                  A  3177    	POP	BC
0B0ECD C1                  A  3178    	POP	BC
                           A  3179    ;  258				//add_stream_to_buffer(slot
                           A  3180    ;  259	            mos_flseek(file, fo -> fptr
                           A  3181    .LINE 259
                           A  3182    
0B0ECE DD27DB              A  3183    	LD	HL,(IX+%FFFFFFDB)
0B0ED1 29                  A  3184    	ADD	HL,HL
0B0ED2 E5C1                A  3185    	LD	BC,HL
0B0ED4 CD 00 2A 0B         A  3186    	CALL	__itol
0B0ED8 5F                  A  3187    	LD	E,A
0B0ED9 C5E1                A  3188    	LD	HL,BC
0B0EDB DD07DF              A  3189    	LD	BC,(IX+%FFFFFFDF)
0B0EDE DD7EE2              A  3190    	LD	A,(IX+%FFFFFFE2)
0B0EE1 CD 6C 24 0B         A  3191    	CALL	__ladd
0B0EE5 7B                  A  3192    	LD	A,E
0B0EE6 E5C1                A  3193    	LD	BC,HL
0B0EE8 DD31D3              A  3194    	LD	IY,(IX+%FFFFFFD3)
0B0EEB FD2711              A  3195    	LD	HL,(IY+%11)
0B0EEE FD5E14              A  3196    	LD	E,(IY+%14)
0B0EF1 CD 47 29 0B         A  3197    	CALL	__lsub
0B0EF5 4B                  A  3198    	LD	C,E
0B0EF6 0600                A  3199    	LD	B,%0
0B0EF8 C5                  A  3200    	PUSH	BC
0B0EF9 E5                  A  3201    	PUSH	HL
0B0EFA DD4EFF              A  3202    	LD	C,(IX+%FFFFFFFF)
0B0EFD C5                  A  3203    	PUSH	BC
0B0EFE CD 28 24 0B         A  3204    	CALL	_mos_flseek
0B0F02 C1                  A  3205    	POP	BC
0B0F03 C1                  A  3206    	POP	BC
0B0F04 C1                  A  3207    	POP	BC
                           A  3208    ;  260				free(row_24bpp);
                           A  3209    .LINE 260
                           A  3210    
0B0F05 DD07C0              A  3211    	LD	BC,(IX+%FFFFFFC0)
0B0F08 C5                  A  3212    	PUSH	BC
0B0F09 CD 72 24 0B         A  3213    	CALL	_free
0B0F0D C1                  A  3214    	POP	BC
                           A  3215    ;  261				free(src);
                           A  3216    .LINE 261
                           A  3217    
0B0F0E DD07F4              A  3218    	LD	BC,(IX+%FFFFFFF4)
0B0F11 C5                  A  3219    	PUSH	BC
0B0F12 CD 72 24 0B         A  3220    	CALL	_free
0B0F16 C1                  A  3221    	POP	BC
0B0F17 DD27FB              A  3222    	LD	HL,(IX+%FFFFFFFB)
0B0F1A DD5EFE              A  3223    	LD	E,(IX+%FFFFFFFE)
0B0F1D 01FFFFFF            A  3224    	LD	BC,16777215
0B0F21 3EFF                A  3225    	LD	A,%FF
0B0F23 CD 6C 24 0B         A  3226    	CALL	__ladd
0B0F27 DD2FFB              A  3227    	LD	(IX+%FFFFFFFB),HL
0B0F2A DD73FE              A  3228    	LD	(IX+%FFFFFFFE),E
                           A  3229    ;  262	
                           A  3230    ;  263	        }		
0B0F2D                     A  3231    L_76:
                           A  3232    .LINE 263
                           A  3233    
0B0F2D DD27FB              A  3234    	LD	HL,(IX+%FFFFFFFB)
0B0F30 DD5EFE              A  3235    	LD	E,(IX+%FFFFFFFE)
0B0F33 01000000            A  3236    	LD	BC,0
0B0F37 AF                  A  3237    	XOR	A,A
0B0F38 CD 07 2A 0B         A  3238    	CALL	__lcmps
0B0F3C F2 46 0F 0B         A  3239    	JP	P,L__55
0B0F40 EA 85 0E 0B         A  3240    	JP	PE,L_74
0B0F44 18 04               A  3241    	JR	L__56
0B0F46                     A  3242    L__55:
0B0F46 E2 85 0E 0B         A  3243    	JP	PO,L_74
0B0F4A                     A  3244    L__56:
                           A  3245    ;  264			
                           A  3246    ;  265		}
0B0F4A                     A  3247    L_82:
                           A  3248    .LINE 265
                           A  3249    
                           A  3250    ;  266	
                           A  3251    ;  267		//assign_buffer_to_bitmap(slot,0,wi
                           A  3252    ;  268		
                           A  3253    ;  269	    mos_fclose(file);
                           A  3254    .LINE 269
                           A  3255    
0B0F4A DD4EFF              A  3256    	LD	C,(IX+%FFFFFFFF)
0B0F4D 0600                A  3257    	LD	B,%0
0B0F4F C5                  A  3258    	PUSH	BC
0B0F50 CD D9 22 0B         A  3259    	CALL	_mos_fclose
0B0F54 C1                  A  3260    	POP	BC
                           A  3261    ;  270	    free(image_buffer);
                           A  3262    .LINE 270
                           A  3263    
0B0F55 DD07BD              A  3264    	LD	BC,(IX+%FFFFFFBD)
0B0F58 C5                  A  3265    	PUSH	BC
0B0F59 CD 72 24 0B         A  3266    	CALL	_free
0B0F5D C1                  A  3267    	POP	BC
                           A  3268    ;  271	    //return width * height;
                           A  3269    ;  272		return_info.bmp_width = width;
                           A  3270    .LINE 272
                           A  3271    
0B0F5E DD27F0              A  3272    	LD	HL,(IX+%FFFFFFF0)
0B0F61 DD75E3              A  3273    	LD	(IX+%FFFFFFE3),L
0B0F64 DD74E4              A  3274    	LD	(IX+%FFFFFFE4),H
                           A  3275    ;  273		return_info.bmp_height = height;
                           A  3276    .LINE 273
                           A  3277    
0B0F67 DD27EC              A  3278    	LD	HL,(IX+%FFFFFFEC)
0B0F6A DD75E5              A  3279    	LD	(IX+%FFFFFFE5),L
0B0F6D DD74E6              A  3280    	LD	(IX+%FFFFFFE6),H
                           A  3281    ;  274		return_info.bmp_bitdepth = bit_dept
                           A  3282    .LINE 274
                           A  3283    
0B0F70 DD7EF7              A  3284    	LD	A,(IX+%FFFFFFF7)
0B0F73 DD77E7              A  3285    	LD	(IX+%FFFFFFE7),A
                           A  3286    ;  275		return return_info;
                           A  3287    .LINE 275
                           A  3288    
0B0F76 ED2206              A  3289    	LEA	HL,IX+%6
0B0F79 ED17                A  3290    	LD	DE,(HL)
0B0F7B ED22E3              A  3291    	LEA	HL,IX+%FFFFFFE3
0B0F7E 01050000            A  3292    	LD	BC,5
0B0F82 EDB0                A  3293    	LDIR	
0B0F84 DD2706              A  3294    	LD	HL,(IX+%6)
                           A  3295    ;  276	
                           A  3296    ;  277	}
0B0F87                     A  3297    L_83:
                           A  3298    .LINE 277
                           A  3299    
0B0F87 DDF9                A  3300    	LD	SP,IX
0B0F89 DDE1                A  3301    	POP	IX
0B0F8B C9                  A  3302    	RET	
                           A  3303    
                           A  3304    
                           A  3305    ;**************************** _load_bmp_big ***
                           A  3306    ;Name                         Addr/Register   S
                           A  3307    ;_free                               IMPORT  --
                           A  3308    ;_mos_puts                           IMPORT  --
                           A  3309    ;_mos_fgetc                          IMPORT  --
                           A  3310    ;_write16bit                         IMPORT  --
                           A  3311    ;_putch                              IMPORT  --
                           A  3312    ;_vdp_bitmapSelect                   IMPORT  --
                           A  3313    ;_mos_fclose                         IMPORT  --
                           A  3314    ;_malloc                             IMPORT  --
                           A  3315    ;_mos_flseek                         IMPORT  --
                           A  3316    ;_mos_fread                          IMPORT  --
                           A  3317    ;_mos_getfil                         IMPORT  --
                           A  3318    ;___print_sendstring                 IMPORT  --
                           A  3319    ;___print_xputch                     IMPORT    
                           A  3320    ;___print_uputch                     IMPORT  --
                           A  3321    ;_mos_fopen                          IMPORT  --
                           A  3322    ;color_table                        IX-1251   1
                           A  3323    ;header                              IX-227    
                           A  3324    ;small_header                         IX-99    
                           A  3325    ;non_pad_row                          IX-81    
                           A  3326    ;non_pad_row                          IX-78    
                           A  3327    ;alphamask                            IX-75    
                           A  3328    ;biSize                               IX-71    
                           A  3329    ;image_buffer                         IX-67    
                           A  3330    ;row_24bpp                            IX-64    
                           A  3331    ;image_start                          IX-61    
                           A  3332    ;new_row_size                         IX-57    
                           A  3333    ;non_pad_row                          IX-55    
                           A  3334    ;b                                    IX-52    
                           A  3335    ;g                                    IX-51    
                           A  3336    ;r                                    IX-50    
                           A  3337    ;x                                    IX-49    
                           A  3338    ;fo                                   IX-45    
                           A  3339    ;color_table_size                     IX-42    
                           A  3340    ;index                                IX-38    
                           A  3341    ;O_17                                 IX-37    
                           A  3342    ;row_padding                          IX-33    
                           A  3343    ;return_info                          IX-29    
                           A  3344    ;O_15                                 IX-24    
                           A  3345    ;height                               IX-20    
                           A  3346    ;width                                IX-16    
                           A  3347    ;src                                  IX-12    
                           A  3348    ;bit_depth                             IX-9    
                           A  3349    ;y                                     IX-5    
                           A  3350    ;file                                  IX-1    
                           A  3351    ;slot                                 IX+12    
                           A  3352    ;filename                              IX+9    
                           A  3353    
                           A  3354    
                           A  3355    ; Stack Frame Size: 1285 (bytes)
                           A  3356    ;       Spill Code: -3 (instruction)
                           A  3357    
                           A  3358    
                           A  3359    .ENDFUNC "load_bmp_big",277,"_load_bmp_big"
                           A  3360    	SEGMENT STRSECT
0B2B48                     A  3361    L__34:
0B2B48 4572726F 723A2063   A  3362    	DB	"Error: could not open "
0B2B50 6F756C64 206E6F74 
0B2B58 206F7065 6E20 
0B2B5E 00                  A  3363    	DB	0
0B2B5F                     A  3364    L__35:
0B2B5F 2E                  A  3365    	DB	"."
0B2B60 0D0A00              A  3366    	DB	13,10,0
0B2B63                     A  3367    L__42:
0B2B63 4572726F 723A2075   A  3368    	DB	"Error: unsupported bit depth (not 8, 2
0B2B6B 6E737570 706F7274 
0B2B73 65642062 69742064 
0B2B7B 65707468 20286E6F 
0B2B83 7420382C 20323420 
0B2B8B 6F722033 322D6269 
0B2B93 74292E 
0B2B96 0A00                A  3369    	DB	10,0
                           A  3370    	SEGMENT CODE
                           A  3371    ;  278	
                           A  3372    ;  279	uint16_t strtou16(const char *str) {
0B0F8C                     A  3373    _strtou16:
                           A  3374    .DEFINE "_strtou16"
                           A  3375    
                           A  3376    .VALUE _strtou16
                           A  3377    
                           A  3378    .CLASS 2
                           A  3379    
                           A  3380    .TYPE 77
                           A  3381    
                           A  3382    .ENDEF
                           A  3383    
                           A  3384    .BEGFUNC "strtou16",279,"_strtou16"
                           A  3385    
                           A  3386    .LINE 279
                           A  3387    
                           A  3388    .DEFINE "str"
                           A  3389    
                           A  3390    .CLASS 65
                           A  3391    
                           A  3392    .VALUE 6
                           A  3393    
                           A  3394    .TYPE 194
                           A  3395    
                           A  3396    .ENDEF
                           A  3397    
                           A  3398    .DEFINE "result"
                           A  3399    
                           A  3400    .CLASS 65
                           A  3401    
                           A  3402    .VALUE -2
                           A  3403    
                           A  3404    .TYPE 13
                           A  3405    
                           A  3406    .ENDEF
                           A  3407    
                           A  3408    .DEFINE "digit"
                           A  3409    
                           A  3410    .CLASS 65
                           A  3411    
                           A  3412    .VALUE -4
                           A  3413    
                           A  3414    .TYPE 13
                           A  3415    
                           A  3416    .ENDEF
                           A  3417    
0B0F8C DDE5                A  3418    	PUSH	IX
0B0F8E DD210000 00         A  3419    	LD	IX,0
0B0F93 DD39                A  3420    	ADD	IX,SP
0B0F95 C5                  A  3421    	PUSH	BC
0B0F96 3B                  A  3422    	DEC	SP
                           A  3423    ;  280	    uint16_t result = 0;
                           A  3424    .LINE 280
                           A  3425    
0B0F97 DD36FE00            A  3426    	LD	(IX+%FFFFFFFE),%0
0B0F9B DD36FF00            A  3427    	LD	(IX+%FFFFFFFF),%0
                           A  3428    ;  281	    const uint16_t maxDiv10 = 6553;  //
                           A  3429    ;  282	    const uint16_t maxMod10 = 5;     //
                           A  3430    ;  283	
                           A  3431    ;  284	    while (*str == ' ' || *str == '\t' 
                           A  3432    .LINE 284
                           A  3433    
0B0F9F 18 07               A  3434    	JR	L_87
0B0FA1                     A  3435    L_88:
                           A  3436    ;  285	        str++;
                           A  3437    .LINE 285
                           A  3438    
0B0FA1 DD0706              A  3439    	LD	BC,(IX+%6)
0B0FA4 03                  A  3440    	INC	BC
0B0FA5 DD0F06              A  3441    	LD	(IX+%6),BC
                           A  3442    ;  286	    }
0B0FA8                     A  3443    L_87:
                           A  3444    .LINE 286
                           A  3445    
0B0FA8 DD2706              A  3446    	LD	HL,(IX+%6)
0B0FAB 7E                  A  3447    	LD	A,(HL)
0B0FAC 47                  A  3448    	LD	B,A
0B0FAD 17ED62              A  3449    	SEXT	HL
0B0FB0 68                  A  3450    	LD	L,B
0B0FB1 01200000            A  3451    	LD	BC,32
0B0FB5 B7                  A  3452    	OR	A,A
0B0FB6 ED42                A  3453    	SBC	HL,BC
0B0FB8 28 E7               A  3454    	JR	Z,L_88
0B0FBA DD2706              A  3455    	LD	HL,(IX+%6)
0B0FBD 7E                  A  3456    	LD	A,(HL)
0B0FBE 47                  A  3457    	LD	B,A
0B0FBF 17ED62              A  3458    	SEXT	HL
0B0FC2 68                  A  3459    	LD	L,B
0B0FC3 01090000            A  3460    	LD	BC,9
0B0FC7 B7                  A  3461    	OR	A,A
0B0FC8 ED42                A  3462    	SBC	HL,BC
0B0FCA 28 D5               A  3463    	JR	Z,L_88
0B0FCC DD2706              A  3464    	LD	HL,(IX+%6)
0B0FCF 7E                  A  3465    	LD	A,(HL)
0B0FD0 47                  A  3466    	LD	B,A
0B0FD1 17ED62              A  3467    	SEXT	HL
0B0FD4 68                  A  3468    	LD	L,B
0B0FD5 010A0000            A  3469    	LD	BC,10
0B0FD9 B7                  A  3470    	OR	A,A
0B0FDA ED42                A  3471    	SBC	HL,BC
0B0FDC 28 C3               A  3472    	JR	Z,L_88
                           A  3473    ;  287	
                           A  3474    ;  288	    while (*str >= '0' && *str <= '9') 
                           A  3475    .LINE 288
                           A  3476    
0B0FDE 18 5F               A  3477    	JR	L_95
0B0FE0                     A  3478    L_96:
                           A  3479    ;  289	        uint16_t digit = *str - '0';
                           A  3480    .LINE 289
                           A  3481    
0B0FE0 DD2706              A  3482    	LD	HL,(IX+%6)
0B0FE3 7E                  A  3483    	LD	A,(HL)
0B0FE4 47                  A  3484    	LD	B,A
0B0FE5 17ED62              A  3485    	SEXT	HL
0B0FE8 68                  A  3486    	LD	L,B
0B0FE9 E5FDE1              A  3487    	LD	IY,HL
0B0FEC ED23D0              A  3488    	LEA	HL,IY+%FFFFFFD0
0B0FEF DD75FC              A  3489    	LD	(IX+%FFFFFFFC),L
0B0FF2 DD74FD              A  3490    	LD	(IX+%FFFFFFFD),H
                           A  3491    ;  290	        if (result > maxDiv10 || (resul
                           A  3492    .LINE 290
                           A  3493    
0B0FF5 DD07FE              A  3494    	LD	BC,(IX+%FFFFFFFE)
0B0FF8 49219919            A  3495    	LD.LIS	HL,6553
0B0FFC B7                  A  3496    	OR	A,A
0B0FFD 40ED42              A  3497    	SBC.SIS	HL,BC
0B1000 38 1A               A  3498    	JR	C,L_92
0B1002 49019919            A  3499    	LD.LIS	BC,6553
0B1006 DD27FE              A  3500    	LD	HL,(IX+%FFFFFFFE)
0B1009 B7                  A  3501    	OR	A,A
0B100A 40ED42              A  3502    	SBC.SIS	HL,BC
0B100D 20 13               A  3503    	JR	NZ,L_93
0B100F DD07FC              A  3504    	LD	BC,(IX+%FFFFFFFC)
0B1012 49210500            A  3505    	LD.LIS	HL,5
0B1016 B7                  A  3506    	OR	A,A
0B1017 40ED42              A  3507    	SBC.SIS	HL,BC
0B101A 30 06               A  3508    	JR	NC,L_93
0B101C                     A  3509    L_92:
                           A  3510    ;  291	            return 65535;
                           A  3511    .LINE 291
                           A  3512    
0B101C 4921FFFF            A  3513    	LD.LIS	HL,65535
0B1020 18 5E               A  3514    	JR	L_99
                           A  3515    ;  292	        }
0B1022                     A  3516    L_93:
                           A  3517    .LINE 292
                           A  3518    
                           A  3519    ;  293	        result = result * 10 + digit;
                           A  3520    .LINE 293
                           A  3521    
0B1022 49210A00            A  3522    	LD.LIS	HL,10
0B1026 DD07FE              A  3523    	LD	BC,(IX+%FFFFFFFE)
0B1029 CD FA 2A 0B         A  3524    	CALL	__smulu
0B102D DD07FC              A  3525    	LD	BC,(IX+%FFFFFFFC)
0B1030 4009                A  3526    	ADD.SIS	HL,BC
0B1032 DD75FE              A  3527    	LD	(IX+%FFFFFFFE),L
0B1035 DD74FF              A  3528    	LD	(IX+%FFFFFFFF),H
                           A  3529    ;  294	        str++;
                           A  3530    .LINE 294
                           A  3531    
0B1038 DD0706              A  3532    	LD	BC,(IX+%6)
0B103B 03                  A  3533    	INC	BC
0B103C DD0F06              A  3534    	LD	(IX+%6),BC
                           A  3535    ;  295	    }
0B103F                     A  3536    L_95:
                           A  3537    .LINE 295
                           A  3538    
0B103F DD2706              A  3539    	LD	HL,(IX+%6)
0B1042 7E                  A  3540    	LD	A,(HL)
0B1043 47                  A  3541    	LD	B,A
0B1044 17ED62              A  3542    	SEXT	HL
0B1047 68                  A  3543    	LD	L,B
0B1048 01300000            A  3544    	LD	BC,48
0B104C B7                  A  3545    	OR	A,A
0B104D ED42                A  3546    	SBC	HL,BC
0B104F FA 59 10 0B         A  3547    	JP	M,L__66
0B1053 EA 7D 10 0B         A  3548    	JP	PE,L_98
0B1057 18 04               A  3549    	JR	L__67
0B1059                     A  3550    L__66:
0B1059 E2 7D 10 0B         A  3551    	JP	PO,L_98
0B105D                     A  3552    L__67:
0B105D DD2706              A  3553    	LD	HL,(IX+%6)
0B1060 7E                  A  3554    	LD	A,(HL)
0B1061 47                  A  3555    	LD	B,A
0B1062 17ED62              A  3556    	SEXT	HL
0B1065 68                  A  3557    	LD	L,B
0B1066 E5C1                A  3558    	LD	BC,HL
0B1068 21390000            A  3559    	LD	HL,57
0B106C B7                  A  3560    	OR	A,A
0B106D ED42                A  3561    	SBC	HL,BC
0B106F F2 79 10 0B         A  3562    	JP	P,L__68
0B1073 EA E0 0F 0B         A  3563    	JP	PE,L_96
0B1077 18 04               A  3564    	JR	L__69
0B1079                     A  3565    L__68:
0B1079 E2 E0 0F 0B         A  3566    	JP	PO,L_96
0B107D                     A  3567    L__69:
0B107D                     A  3568    L_98:
                           A  3569    ;  296	
                           A  3570    ;  297	    return result;
                           A  3571    .LINE 297
                           A  3572    
0B107D DD27FE              A  3573    	LD	HL,(IX+%FFFFFFFE)
                           A  3574    ;  298	}
0B1080                     A  3575    L_99:
                           A  3576    .LINE 298
                           A  3577    
0B1080 DDF9                A  3578    	LD	SP,IX
0B1082 DDE1                A  3579    	POP	IX
0B1084 C9                  A  3580    	RET	
                           A  3581    
                           A  3582    
                           A  3583    ;**************************** _strtou16 *******
                           A  3584    ;Name                         Addr/Register   S
                           A  3585    ;digit                                 IX-4    
                           A  3586    ;result                                IX-2    
                           A  3587    ;str                                   IX+6    
                           A  3588    
                           A  3589    
                           A  3590    ; Stack Frame Size: 13 (bytes)
                           A  3591    ;       Spill Code: -3 (instruction)
                           A  3592    
                           A  3593    
                           A  3594    .ENDFUNC "strtou16",298,"_strtou16"
                           A  3595    ;  299	
                           A  3596    ;  300	uint8_t strtou8(const char *str) {
0B1085                     A  3597    _strtou8:
                           A  3598    .DEFINE "_strtou8"
                           A  3599    
                           A  3600    .VALUE _strtou8
                           A  3601    
                           A  3602    .CLASS 2
                           A  3603    
                           A  3604    .TYPE 76
                           A  3605    
                           A  3606    .ENDEF
                           A  3607    
                           A  3608    .BEGFUNC "strtou8",300,"_strtou8"
                           A  3609    
                           A  3610    .LINE 300
                           A  3611    
                           A  3612    .DEFINE "str"
                           A  3613    
                           A  3614    .CLASS 65
                           A  3615    
                           A  3616    .VALUE 6
                           A  3617    
                           A  3618    .TYPE 194
                           A  3619    
                           A  3620    .ENDEF
                           A  3621    
                           A  3622    .DEFINE "result"
                           A  3623    
                           A  3624    .CLASS 65
                           A  3625    
                           A  3626    .VALUE -1
                           A  3627    
                           A  3628    .TYPE 12
                           A  3629    
                           A  3630    .ENDEF
                           A  3631    
                           A  3632    .DEFINE "digit"
                           A  3633    
                           A  3634    .CLASS 65
                           A  3635    
                           A  3636    .VALUE -2
                           A  3637    
                           A  3638    .TYPE 12
                           A  3639    
                           A  3640    .ENDEF
                           A  3641    
0B1085 DDE5                A  3642    	PUSH	IX
0B1087 DD210000 00         A  3643    	LD	IX,0
0B108C DD39                A  3644    	ADD	IX,SP
0B108E 3B                  A  3645    	DEC	SP
0B108F 3B                  A  3646    	DEC	SP
                           A  3647    ;  301	    uint8_t result = 0;
                           A  3648    .LINE 301
                           A  3649    
0B1090 DD36FF00            A  3650    	LD	(IX+%FFFFFFFF),%0
                           A  3651    ;  302	    const uint8_t maxDiv10 = 255 / 10;
                           A  3652    ;  303	    const uint8_t maxMod10 = 255 % 10;
                           A  3653    ;  304	
                           A  3654    ;  305	    while (*str == ' ' || *str == '\t' 
                           A  3655    .LINE 305
                           A  3656    
0B1094 18 07               A  3657    	JR	L_103
0B1096                     A  3658    L_104:
                           A  3659    ;  306	        str++;
                           A  3660    .LINE 306
                           A  3661    
0B1096 DD0706              A  3662    	LD	BC,(IX+%6)
0B1099 03                  A  3663    	INC	BC
0B109A DD0F06              A  3664    	LD	(IX+%6),BC
                           A  3665    ;  307	    }
0B109D                     A  3666    L_103:
                           A  3667    .LINE 307
                           A  3668    
0B109D DD2706              A  3669    	LD	HL,(IX+%6)
0B10A0 7E                  A  3670    	LD	A,(HL)
0B10A1 47                  A  3671    	LD	B,A
0B10A2 17ED62              A  3672    	SEXT	HL
0B10A5 68                  A  3673    	LD	L,B
0B10A6 01200000            A  3674    	LD	BC,32
0B10AA B7                  A  3675    	OR	A,A
0B10AB ED42                A  3676    	SBC	HL,BC
0B10AD 28 E7               A  3677    	JR	Z,L_104
0B10AF DD2706              A  3678    	LD	HL,(IX+%6)
0B10B2 7E                  A  3679    	LD	A,(HL)
0B10B3 47                  A  3680    	LD	B,A
0B10B4 17ED62              A  3681    	SEXT	HL
0B10B7 68                  A  3682    	LD	L,B
0B10B8 01090000            A  3683    	LD	BC,9
0B10BC B7                  A  3684    	OR	A,A
0B10BD ED42                A  3685    	SBC	HL,BC
0B10BF 28 D5               A  3686    	JR	Z,L_104
0B10C1 DD2706              A  3687    	LD	HL,(IX+%6)
0B10C4 7E                  A  3688    	LD	A,(HL)
0B10C5 47                  A  3689    	LD	B,A
0B10C6 17ED62              A  3690    	SEXT	HL
0B10C9 68                  A  3691    	LD	L,B
0B10CA 010A0000            A  3692    	LD	BC,10
0B10CE B7                  A  3693    	OR	A,A
0B10CF ED42                A  3694    	SBC	HL,BC
0B10D1 28 C3               A  3695    	JR	Z,L_104
                           A  3696    ;  308	
                           A  3697    ;  309	    while (*str >= '0' && *str <= '9') 
                           A  3698    .LINE 309
                           A  3699    
0B10D3 18 37               A  3700    	JR	L_111
0B10D5                     A  3701    L_112:
                           A  3702    ;  310	        uint8_t digit = *str - '0';
                           A  3703    .LINE 310
                           A  3704    
0B10D5 DD2706              A  3705    	LD	HL,(IX+%6)
0B10D8 7E                  A  3706    	LD	A,(HL)
0B10D9 D630                A  3707    	SUB	A,%30
0B10DB DD77FE              A  3708    	LD	(IX+%FFFFFFFE),A
                           A  3709    ;  311	        if (result > maxDiv10 || (resul
                           A  3710    .LINE 311
                           A  3711    
0B10DE 3E19                A  3712    	LD	A,%19
0B10E0 DDBEFF              A  3713    	CP	A,(IX+%FFFFFFFF)
0B10E3 38 0E               A  3714    	JR	C,L_108
0B10E5 DD7EFF              A  3715    	LD	A,(IX+%FFFFFFFF)
0B10E8 FE19                A  3716    	CP	A,%19
0B10EA 20 0B               A  3717    	JR	NZ,L_109
0B10EC 3E05                A  3718    	LD	A,%5
0B10EE DDBEFE              A  3719    	CP	A,(IX+%FFFFFFFE)
0B10F1 30 04               A  3720    	JR	NC,L_109
0B10F3                     A  3721    L_108:
                           A  3722    ;  312	            return 255;
                           A  3723    .LINE 312
                           A  3724    
0B10F3 3EFF                A  3725    	LD	A,%FF
0B10F5 18 56               A  3726    	JR	L_115
                           A  3727    ;  313	        }
0B10F7                     A  3728    L_109:
                           A  3729    .LINE 313
                           A  3730    
                           A  3731    ;  314	        result = result * 10 + digit;
                           A  3732    .LINE 314
                           A  3733    
0B10F7 060A                A  3734    	LD	B,%A
0B10F9 DD4EFF              A  3735    	LD	C,(IX+%FFFFFFFF)
0B10FC ED4C                A  3736    	MLT	BC
0B10FE 79                  A  3737    	LD	A,C
0B10FF DD86FE              A  3738    	ADD	A,(IX+%FFFFFFFE)
0B1102 DD77FF              A  3739    	LD	(IX+%FFFFFFFF),A
                           A  3740    ;  315	        str++;
                           A  3741    .LINE 315
                           A  3742    
0B1105 DD0706              A  3743    	LD	BC,(IX+%6)
0B1108 03                  A  3744    	INC	BC
0B1109 DD0F06              A  3745    	LD	(IX+%6),BC
                           A  3746    ;  316	    }
0B110C                     A  3747    L_111:
                           A  3748    .LINE 316
                           A  3749    
0B110C DD2706              A  3750    	LD	HL,(IX+%6)
0B110F 7E                  A  3751    	LD	A,(HL)
0B1110 47                  A  3752    	LD	B,A
0B1111 17ED62              A  3753    	SEXT	HL
0B1114 68                  A  3754    	LD	L,B
0B1115 01300000            A  3755    	LD	BC,48
0B1119 B7                  A  3756    	OR	A,A
0B111A ED42                A  3757    	SBC	HL,BC
0B111C FA 26 11 0B         A  3758    	JP	M,L__79
0B1120 EA 4A 11 0B         A  3759    	JP	PE,L_114
0B1124 18 04               A  3760    	JR	L__80
0B1126                     A  3761    L__79:
0B1126 E2 4A 11 0B         A  3762    	JP	PO,L_114
0B112A                     A  3763    L__80:
0B112A DD2706              A  3764    	LD	HL,(IX+%6)
0B112D 7E                  A  3765    	LD	A,(HL)
0B112E 47                  A  3766    	LD	B,A
0B112F 17ED62              A  3767    	SEXT	HL
0B1132 68                  A  3768    	LD	L,B
0B1133 E5C1                A  3769    	LD	BC,HL
0B1135 21390000            A  3770    	LD	HL,57
0B1139 B7                  A  3771    	OR	A,A
0B113A ED42                A  3772    	SBC	HL,BC
0B113C F2 46 11 0B         A  3773    	JP	P,L__81
0B1140 EA D5 10 0B         A  3774    	JP	PE,L_112
0B1144 18 04               A  3775    	JR	L__82
0B1146                     A  3776    L__81:
0B1146 E2 D5 10 0B         A  3777    	JP	PO,L_112
0B114A                     A  3778    L__82:
0B114A                     A  3779    L_114:
                           A  3780    ;  317	
                           A  3781    ;  318	    return result;
                           A  3782    .LINE 318
                           A  3783    
0B114A DD7EFF              A  3784    	LD	A,(IX+%FFFFFFFF)
                           A  3785    ;  319	}
0B114D                     A  3786    L_115:
                           A  3787    .LINE 319
                           A  3788    
0B114D DDF9                A  3789    	LD	SP,IX
0B114F DDE1                A  3790    	POP	IX
0B1151 C9                  A  3791    	RET	
                           A  3792    
                           A  3793    
                           A  3794    ;**************************** _strtou8 ********
                           A  3795    ;Name                         Addr/Register   S
                           A  3796    ;digit                                 IX-2    
                           A  3797    ;result                                IX-1    
                           A  3798    ;str                                   IX+6    
                           A  3799    
                           A  3800    
                           A  3801    ; Stack Frame Size: 11 (bytes)
                           A  3802    ;       Spill Code: -3 (instruction)
                           A  3803    
                           A  3804    
                           A  3805    .ENDFUNC "strtou8",319,"_strtou8"
                           A  3806    ;  320	
                           A  3807    ;  321	uint24_t strtou24(const char *str) {
0B1152                     A  3808    _strtou24:
                           A  3809    .DEFINE "_strtou24"
                           A  3810    
                           A  3811    .VALUE _strtou24
                           A  3812    
                           A  3813    .CLASS 2
                           A  3814    
                           A  3815    .TYPE 78
                           A  3816    
                           A  3817    .ENDEF
                           A  3818    
                           A  3819    .BEGFUNC "strtou24",321,"_strtou24"
                           A  3820    
                           A  3821    .LINE 321
                           A  3822    
                           A  3823    .DEFINE "str"
                           A  3824    
                           A  3825    .CLASS 65
                           A  3826    
                           A  3827    .VALUE 6
                           A  3828    
                           A  3829    .TYPE 194
                           A  3830    
                           A  3831    .ENDEF
                           A  3832    
                           A  3833    .DEFINE "result"
                           A  3834    
                           A  3835    .CLASS 65
                           A  3836    
                           A  3837    .VALUE -4
                           A  3838    
                           A  3839    .TYPE 15
                           A  3840    
                           A  3841    .ENDEF
                           A  3842    
                           A  3843    .DEFINE "digit"
                           A  3844    
                           A  3845    .CLASS 65
                           A  3846    
                           A  3847    .VALUE -8
                           A  3848    
                           A  3849    .TYPE 15
                           A  3850    
                           A  3851    .ENDEF
                           A  3852    
0B1152 DDE5                A  3853    	PUSH	IX
0B1154 DD210000 00         A  3854    	LD	IX,0
0B1159 DD39                A  3855    	ADD	IX,SP
0B115B C5                  A  3856    	PUSH	BC
0B115C C5                  A  3857    	PUSH	BC
0B115D 3B                  A  3858    	DEC	SP
0B115E 3B                  A  3859    	DEC	SP
                           A  3860    ;  322	    uint32_t result = 0;
                           A  3861    .LINE 322
                           A  3862    
0B115F 01000000            A  3863    	LD	BC,0
0B1163 AF                  A  3864    	XOR	A,A
0B1164 DD0FFC              A  3865    	LD	(IX+%FFFFFFFC),BC
0B1167 DD77FF              A  3866    	LD	(IX+%FFFFFFFF),A
                           A  3867    ;  323	    const uint32_t maxDiv10 = 1677721;
                           A  3868    ;  324	    const uint32_t maxMod10 = 5;
                           A  3869    ;  325	
                           A  3870    ;  326	    while (*str == ' ' || *str == '\t' 
                           A  3871    .LINE 326
                           A  3872    
0B116A 18 07               A  3873    	JR	L_119
0B116C                     A  3874    L_120:
                           A  3875    ;  327	        str++;
                           A  3876    .LINE 327
                           A  3877    
0B116C DD0706              A  3878    	LD	BC,(IX+%6)
0B116F 03                  A  3879    	INC	BC
0B1170 DD0F06              A  3880    	LD	(IX+%6),BC
                           A  3881    ;  328	    }
0B1173                     A  3882    L_119:
                           A  3883    .LINE 328
                           A  3884    
0B1173 DD2706              A  3885    	LD	HL,(IX+%6)
0B1176 7E                  A  3886    	LD	A,(HL)
0B1177 47                  A  3887    	LD	B,A
0B1178 17ED62              A  3888    	SEXT	HL
0B117B 68                  A  3889    	LD	L,B
0B117C 01200000            A  3890    	LD	BC,32
0B1180 B7                  A  3891    	OR	A,A
0B1181 ED42                A  3892    	SBC	HL,BC
0B1183 28 E7               A  3893    	JR	Z,L_120
0B1185 DD2706              A  3894    	LD	HL,(IX+%6)
0B1188 7E                  A  3895    	LD	A,(HL)
0B1189 47                  A  3896    	LD	B,A
0B118A 17ED62              A  3897    	SEXT	HL
0B118D 68                  A  3898    	LD	L,B
0B118E 01090000            A  3899    	LD	BC,9
0B1192 B7                  A  3900    	OR	A,A
0B1193 ED42                A  3901    	SBC	HL,BC
0B1195 28 D5               A  3902    	JR	Z,L_120
0B1197 DD2706              A  3903    	LD	HL,(IX+%6)
0B119A 7E                  A  3904    	LD	A,(HL)
0B119B 47                  A  3905    	LD	B,A
0B119C 17ED62              A  3906    	SEXT	HL
0B119F 68                  A  3907    	LD	L,B
0B11A0 010A0000            A  3908    	LD	BC,10
0B11A4 B7                  A  3909    	OR	A,A
0B11A5 ED42                A  3910    	SBC	HL,BC
0B11A7 28 C3               A  3911    	JR	Z,L_120
                           A  3912    ;  329		
                           A  3913    ;  330	    while (*str >= '0' && *str <= '9') 
                           A  3914    .LINE 330
                           A  3915    
0B11A9 18 7A               A  3916    	JR	L_127
0B11AB                     A  3917    L_128:
                           A  3918    ;  331	        uint32_t digit = *str - '0';
                           A  3919    .LINE 331
                           A  3920    
0B11AB DD2706              A  3921    	LD	HL,(IX+%6)
0B11AE 7E                  A  3922    	LD	A,(HL)
0B11AF 47                  A  3923    	LD	B,A
0B11B0 17ED62              A  3924    	SEXT	HL
0B11B3 68                  A  3925    	LD	L,B
0B11B4 5C                  A  3926    	LD	E,H
0B11B5 01300000            A  3927    	LD	BC,48
0B11B9 AF                  A  3928    	XOR	A,A
0B11BA CD 47 29 0B         A  3929    	CALL	__lsub
0B11BE DD2FF8              A  3930    	LD	(IX+%FFFFFFF8),HL
0B11C1 DD73FB              A  3931    	LD	(IX+%FFFFFFFB),E
                           A  3932    ;  332	        if (result > maxDiv10 || (resul
                           A  3933    .LINE 332
                           A  3934    
0B11C4 21999919            A  3935    	LD	HL,1677721
0B11C8 1E00                A  3936    	LD	E,%0
0B11CA DD07FC              A  3937    	LD	BC,(IX+%FFFFFFFC)
0B11CD DD7EFF              A  3938    	LD	A,(IX+%FFFFFFFF)
0B11D0 CD 07 2A 0B         A  3939    	CALL	__lcmpu
0B11D4 38 23               A  3940    	JR	C,L_124
0B11D6 DD27FC              A  3941    	LD	HL,(IX+%FFFFFFFC)
0B11D9 DD5EFF              A  3942    	LD	E,(IX+%FFFFFFFF)
0B11DC 01999919            A  3943    	LD	BC,1677721
0B11E0 AF                  A  3944    	XOR	A,A
0B11E1 CD 07 2A 0B         A  3945    	CALL	__lcmpu
0B11E5 20 18               A  3946    	JR	NZ,L_125
0B11E7 21050000            A  3947    	LD	HL,5
0B11EB 1E00                A  3948    	LD	E,%0
0B11ED DD07F8              A  3949    	LD	BC,(IX+%FFFFFFF8)
0B11F0 DD7EFB              A  3950    	LD	A,(IX+%FFFFFFFB)
0B11F3 CD 07 2A 0B         A  3951    	CALL	__lcmpu
0B11F7 30 06               A  3952    	JR	NC,L_125
0B11F9                     A  3953    L_124:
                           A  3954    ;  333	            return 16777215;
                           A  3955    .LINE 333
                           A  3956    
0B11F9 21FFFFFF            A  3957    	LD	HL,16777215
0B11FD 18 67               A  3958    	JR	L_131
                           A  3959    ;  334	        }
0B11FF                     A  3960    L_125:
                           A  3961    .LINE 334
                           A  3962    
                           A  3963    ;  335	        result = result * 10 + digit;
                           A  3964    .LINE 335
                           A  3965    
0B11FF DD27FC              A  3966    	LD	HL,(IX+%FFFFFFFC)
0B1202 DD5EFF              A  3967    	LD	E,(IX+%FFFFFFFF)
0B1205 010A0000            A  3968    	LD	BC,10
0B1209 AF                  A  3969    	XOR	A,A
0B120A CD 81 2A 0B         A  3970    	CALL	__lmulu
0B120E DD07F8              A  3971    	LD	BC,(IX+%FFFFFFF8)
0B1211 DD7EFB              A  3972    	LD	A,(IX+%FFFFFFFB)
0B1214 CD 6C 24 0B         A  3973    	CALL	__ladd
0B1218 DD2FFC              A  3974    	LD	(IX+%FFFFFFFC),HL
0B121B DD73FF              A  3975    	LD	(IX+%FFFFFFFF),E
                           A  3976    ;  336	        str++;
                           A  3977    .LINE 336
                           A  3978    
0B121E DD0706              A  3979    	LD	BC,(IX+%6)
0B1221 03                  A  3980    	INC	BC
0B1222 DD0F06              A  3981    	LD	(IX+%6),BC
                           A  3982    ;  337	    }
0B1225                     A  3983    L_127:
                           A  3984    .LINE 337
                           A  3985    
0B1225 DD2706              A  3986    	LD	HL,(IX+%6)
0B1228 7E                  A  3987    	LD	A,(HL)
0B1229 47                  A  3988    	LD	B,A
0B122A 17ED62              A  3989    	SEXT	HL
0B122D 68                  A  3990    	LD	L,B
0B122E 01300000            A  3991    	LD	BC,48
0B1232 B7                  A  3992    	OR	A,A
0B1233 ED42                A  3993    	SBC	HL,BC
0B1235 FA 3F 12 0B         A  3994    	JP	M,L__92
0B1239 EA 63 12 0B         A  3995    	JP	PE,L_130
0B123D 18 04               A  3996    	JR	L__93
0B123F                     A  3997    L__92:
0B123F E2 63 12 0B         A  3998    	JP	PO,L_130
0B1243                     A  3999    L__93:
0B1243 DD2706              A  4000    	LD	HL,(IX+%6)
0B1246 7E                  A  4001    	LD	A,(HL)
0B1247 47                  A  4002    	LD	B,A
0B1248 17ED62              A  4003    	SEXT	HL
0B124B 68                  A  4004    	LD	L,B
0B124C E5C1                A  4005    	LD	BC,HL
0B124E 21390000            A  4006    	LD	HL,57
0B1252 B7                  A  4007    	OR	A,A
0B1253 ED42                A  4008    	SBC	HL,BC
0B1255 F2 5F 12 0B         A  4009    	JP	P,L__94
0B1259 EA AB 11 0B         A  4010    	JP	PE,L_128
0B125D 18 04               A  4011    	JR	L__95
0B125F                     A  4012    L__94:
0B125F E2 AB 11 0B         A  4013    	JP	PO,L_128
0B1263                     A  4014    L__95:
0B1263                     A  4015    L_130:
                           A  4016    ;  338	
                           A  4017    ;  339	    return result;
                           A  4018    .LINE 339
                           A  4019    
0B1263 DD27FC              A  4020    	LD	HL,(IX+%FFFFFFFC)
                           A  4021    ;  340	}
0B1266                     A  4022    L_131:
                           A  4023    .LINE 340
                           A  4024    
0B1266 DDF9                A  4025    	LD	SP,IX
0B1268 DDE1                A  4026    	POP	IX
0B126A C9                  A  4027    	RET	
                           A  4028    
                           A  4029    
                           A  4030    ;**************************** _strtou24 *******
                           A  4031    ;Name                         Addr/Register   S
                           A  4032    ;digit                                 IX-8    
                           A  4033    ;result                                IX-4    
                           A  4034    ;str                                   IX+6    
                           A  4035    
                           A  4036    
                           A  4037    ; Stack Frame Size: 17 (bytes)
                           A  4038    ;       Spill Code: -3 (instruction)
                           A  4039    
                           A  4040    
                           A  4041    .ENDFUNC "strtou24",340,"_strtou24"
                           A  4042    ;  341	
                           A  4043    ;  342	int main(int argc, char * argv[]) {
0B126B                     A  4044    _main:
                           A  4045    .DEFINE "_main"
                           A  4046    
                           A  4047    .VALUE _main
                           A  4048    
                           A  4049    .CLASS 2
                           A  4050    
                           A  4051    .TYPE 68
                           A  4052    
                           A  4053    .ENDEF
                           A  4054    
                           A  4055    .BEGFUNC "main",342,"_main"
                           A  4056    
                           A  4057    .LINE 342
                           A  4058    
                           A  4059    .DEFINE "argc"
                           A  4060    
                           A  4061    .CLASS 65
                           A  4062    
                           A  4063    .VALUE 6
                           A  4064    
                           A  4065    .TYPE 4
                           A  4066    
                           A  4067    .ENDEF
                           A  4068    
                           A  4069    .DEFINE "argv"
                           A  4070    
                           A  4071    .CLASS 65
                           A  4072    
                           A  4073    .VALUE 9
                           A  4074    
                           A  4075    .TYPE 290
                           A  4076    
                           A  4077    .ENDEF
                           A  4078    
                           A  4079    .DEFINE "bitmap_slot"
                           A  4080    
                           A  4081    .CLASS 65
                           A  4082    
                           A  4083    .VALUE -1
                           A  4084    
                           A  4085    .TYPE 12
                           A  4086    
                           A  4087    .ENDEF
                           A  4088    
                           A  4089    .DEFINE "x"
                           A  4090    
                           A  4091    .CLASS 65
                           A  4092    
                           A  4093    .VALUE -7
                           A  4094    
                           A  4095    .TYPE 14
                           A  4096    
                           A  4097    .ENDEF
                           A  4098    
                           A  4099    .DEFINE "bmp"
                           A  4100    
                           A  4101    .CLASS 65
                           A  4102    
                           A  4103    .VALUE -12
                           A  4104    
                           A  4105    .TAG "NONAME6"
                           A  4106    
                           A  4107    .TYPE 8
                           A  4108    
                           A  4109    .ENDEF
                           A  4110    
                           A  4111    .DEFINE "y"
                           A  4112    
                           A  4113    .CLASS 65
                           A  4114    
                           A  4115    .VALUE -18
                           A  4116    
                           A  4117    .TYPE 14
                           A  4118    
                           A  4119    .ENDEF
                           A  4120    
0B126B DDE5                A  4121    	PUSH	IX
0B126D DD210000 00         A  4122    	LD	IX,0
0B1272 DD39                A  4123    	ADD	IX,SP
0B1274 ED22DE              A  4124    	LEA	HL,IX+%FFFFFFDE
0B1277 F9                  A  4125    	LD	SP,HL
                           A  4126    ;  343	
                           A  4127    ;  344	    uint24_t x, y;
                           A  4128    ;  345		uint8_t bitmap_slot = 0;
                           A  4129    .LINE 345
                           A  4130    
0B1278 DD36FF00            A  4131    	LD	(IX+%FFFFFFFF),%0
                           A  4132    ;  346		bmp_info bmp;
                           A  4133    ;  347		
                           A  4134    ;  348		//Args = 0:binary name, 1:filname, 
                           A  4135    ;  349		
                           A  4136    ;  350		if ((argc < 2) || (argc == 4) || (a
                           A  4137    .LINE 350
                           A  4138    
0B127C 01020000            A  4139    	LD	BC,2
0B1280 DD2706              A  4140    	LD	HL,(IX+%6)
0B1283 B7                  A  4141    	OR	A,A
0B1284 ED42                A  4142    	SBC	HL,BC
0B1286 FA 90 12 0B         A  4143    	JP	M,L__110
0B128A EA B8 12 0B         A  4144    	JP	PE,L_134
0B128E 18 04               A  4145    	JR	L__111
0B1290                     A  4146    L__110:
0B1290 E2 B8 12 0B         A  4147    	JP	PO,L_134
0B1294                     A  4148    L__111:
0B1294 01040000            A  4149    	LD	BC,4
0B1298 DD2706              A  4150    	LD	HL,(IX+%6)
0B129B B7                  A  4151    	OR	A,A
0B129C ED42                A  4152    	SBC	HL,BC
0B129E 28 18               A  4153    	JR	Z,L_134
0B12A0 DD0706              A  4154    	LD	BC,(IX+%6)
0B12A3 21050000            A  4155    	LD	HL,5
0B12A7 B7                  A  4156    	OR	A,A
0B12A8 ED42                A  4157    	SBC	HL,BC
0B12AA F2 B4 12 0B         A  4158    	JP	P,L__112
0B12AE EA E7 12 0B         A  4159    	JP	PE,L_136
0B12B2 18 04               A  4160    	JR	L__113
0B12B4                     A  4161    L__112:
0B12B4 E2 E7 12 0B         A  4162    	JP	PO,L_136
0B12B8                     A  4163    L__113:
0B12B8                     A  4164    L_134:
                           A  4165    ;  351	        printf("Usage is %s <filename> 
                           A  4166    .LINE 351
                           A  4167    
0B12B8 01 12 28 0B         A  4168    	LD	BC,___print_uputch
0B12BC ED43 42 2B 0B       A  4169    	LD	(___print_xputch),BC
0B12C1 01 98 2B 0B         A  4170    	LD	BC,L__100
0B12C5 C5                  A  4171    	PUSH	BC
0B12C6 CD 77 26 0B         A  4172    	CALL	___print_sendstring
0B12CA C1                  A  4173    	POP	BC
0B12CB DD2709              A  4174    	LD	HL,(IX+%9)
0B12CE ED07                A  4175    	LD	BC,(HL)
0B12D0 C5                  A  4176    	PUSH	BC
0B12D1 CD 77 26 0B         A  4177    	CALL	___print_sendstring
0B12D5 C1                  A  4178    	POP	BC
0B12D6 01 A2 2B 0B         A  4179    	LD	BC,L__101
0B12DA C5                  A  4180    	PUSH	BC
0B12DB CD 77 26 0B         A  4181    	CALL	___print_sendstring
0B12DF C1                  A  4182    	POP	BC
                           A  4183    ;  352	        return 0;
                           A  4184    .LINE 352
                           A  4185    
0B12E0 B7                  A  4186    	OR	A,A
0B12E1 ED62                A  4187    	SBC	HL,HL
0B12E3 C3 A2 14 0B         A  4188    	JR	L_152
                           A  4189    ;  353	    }
0B12E7                     A  4190    L_136:
                           A  4191    .LINE 353
                           A  4192    
                           A  4193    ;  354		
                           A  4194    ;  355		if (argc > 2) bitmap_slot = strtou8
                           A  4195    .LINE 355
                           A  4196    
0B12E7 DD0706              A  4197    	LD	BC,(IX+%6)
0B12EA 21020000            A  4198    	LD	HL,2
0B12EE B7                  A  4199    	OR	A,A
0B12EF ED42                A  4200    	SBC	HL,BC
0B12F1 F2 FB 12 0B         A  4201    	JP	P,L__114
0B12F5 EA 10 13 0B         A  4202    	JP	PE,L_150
0B12F9 18 04               A  4203    	JR	L__115
0B12FB                     A  4204    L__114:
0B12FB E2 10 13 0B         A  4205    	JP	PO,L_150
0B12FF                     A  4206    L__115:
0B12FF DD3109              A  4207    	LD	IY,(IX+%9)
0B1302 ED2306              A  4208    	LEA	HL,IY+%6
0B1305 ED07                A  4209    	LD	BC,(HL)
0B1307 C5                  A  4210    	PUSH	BC
0B1308 CD 85 10 0B         A  4211    	CALL	_strtou8
0B130C C1                  A  4212    	POP	BC
0B130D DD77FF              A  4213    	LD	(IX+%FFFFFFFF),A
0B1310                     A  4214    L_150:
                           A  4215    ;  356		
                           A  4216    ;  357	    //vdp_mode(8);
                           A  4217    ;  358		
                           A  4218    ;  359		if (argc == 2) {
                           A  4219    .LINE 359
                           A  4220    
0B1310 01020000            A  4221    	LD	BC,2
0B1314 DD2706              A  4222    	LD	HL,(IX+%6)
0B1317 B7                  A  4223    	OR	A,A
0B1318 ED42                A  4224    	SBC	HL,BC
0B131A 20 25               A  4225    	JR	NZ,L_149
                           A  4226    ;  360	
                           A  4227    ;  361			bmp = load_bmp_big(argv[1], 0);
                           A  4228    .LINE 361
                           A  4229    
0B131C 01000000            A  4230    	LD	BC,0
0B1320 C5                  A  4231    	PUSH	BC
0B1321 DD3109              A  4232    	LD	IY,(IX+%9)
0B1324 ED2303              A  4233    	LEA	HL,IY+%3
0B1327 ED07                A  4234    	LD	BC,(HL)
0B1329 C5                  A  4235    	PUSH	BC
0B132A ED65E9              A  4236    	PEA	IX+%FFFFFFE9
0B132D CD B8 06 0B         A  4237    	CALL	_load_bmp_big
0B1331 C1                  A  4238    	POP	BC
0B1332 C1                  A  4239    	POP	BC
0B1333 C1                  A  4240    	POP	BC
0B1334 ED12F4              A  4241    	LEA	DE,IX+%FFFFFFF4
0B1337 01050000            A  4242    	LD	BC,5
0B133B EDB0                A  4243    	LDIR	
                           A  4244    ;  362			
                           A  4245    ;  363		} else if (argc == 3) {
                           A  4246    .LINE 363
                           A  4247    
0B133D C3 9F 14 0B         A  4248    	JR	L_151
0B1341                     A  4249    L_149:
0B1341 01030000            A  4250    	LD	BC,3
0B1345 DD2706              A  4251    	LD	HL,(IX+%6)
0B1348 B7                  A  4252    	OR	A,A
0B1349 ED42                A  4253    	SBC	HL,BC
0B134B 20 26               A  4254    	JR	NZ,L_147
                           A  4255    ;  364			
                           A  4256    ;  365			bmp = load_bmp_big(argv[1], bit
                           A  4257    .LINE 365
                           A  4258    
0B134D DD4EFF              A  4259    	LD	C,(IX+%FFFFFFFF)
0B1350 0600                A  4260    	LD	B,%0
0B1352 C5                  A  4261    	PUSH	BC
0B1353 DD3109              A  4262    	LD	IY,(IX+%9)
0B1356 ED2303              A  4263    	LEA	HL,IY+%3
0B1359 ED07                A  4264    	LD	BC,(HL)
0B135B C5                  A  4265    	PUSH	BC
0B135C ED65E4              A  4266    	PEA	IX+%FFFFFFE4
0B135F CD B8 06 0B         A  4267    	CALL	_load_bmp_big
0B1363 C1                  A  4268    	POP	BC
0B1364 C1                  A  4269    	POP	BC
0B1365 C1                  A  4270    	POP	BC
0B1366 ED12F4              A  4271    	LEA	DE,IX+%FFFFFFF4
0B1369 01050000            A  4272    	LD	BC,5
0B136D EDB0                A  4273    	LDIR	
                           A  4274    ;  366			
                           A  4275    ;  367		} else if (argc == 5) {
                           A  4276    .LINE 367
                           A  4277    
0B136F C3 9F 14 0B         A  4278    	JR	L_151
0B1373                     A  4279    L_147:
0B1373 01050000            A  4280    	LD	BC,5
0B1377 DD2706              A  4281    	LD	HL,(IX+%6)
0B137A B7                  A  4282    	OR	A,A
0B137B ED42                A  4283    	SBC	HL,BC
0B137D C2 9F 14 0B         A  4284    	JR	NZ,L_151
                           A  4285    ;  368		
                           A  4286    ;  369			bmp = load_bmp_big(argv[1], bit
                           A  4287    .LINE 369
                           A  4288    
0B1381 DD4EFF              A  4289    	LD	C,(IX+%FFFFFFFF)
0B1384 0600                A  4290    	LD	B,%0
0B1386 C5                  A  4291    	PUSH	BC
0B1387 DD3109              A  4292    	LD	IY,(IX+%9)
0B138A ED2303              A  4293    	LEA	HL,IY+%3
0B138D ED07                A  4294    	LD	BC,(HL)
0B138F C5                  A  4295    	PUSH	BC
0B1390 ED65DF              A  4296    	PEA	IX+%FFFFFFDF
0B1393 CD B8 06 0B         A  4297    	CALL	_load_bmp_big
0B1397 C1                  A  4298    	POP	BC
0B1398 C1                  A  4299    	POP	BC
0B1399 C1                  A  4300    	POP	BC
0B139A ED12F4              A  4301    	LEA	DE,IX+%FFFFFFF4
0B139D 01050000            A  4302    	LD	BC,5
0B13A1 EDB0                A  4303    	LDIR	
                           A  4304    ;  370			
                           A  4305    ;  371			if (argv[3][0] == 'C' || argv[3
                           A  4306    .LINE 371
                           A  4307    
0B13A3 DD3109              A  4308    	LD	IY,(IX+%9)
0B13A6 ED3309              A  4309    	LEA	IY,IY+%9
0B13A9 DD3EF1              A  4310    	LD	(IX+%FFFFFFF1),IY
0B13AC DD27F1              A  4311    	LD	HL,(IX+%FFFFFFF1)
0B13AF ED27                A  4312    	LD	HL,(HL)
0B13B1 7E                  A  4313    	LD	A,(HL)
0B13B2 47                  A  4314    	LD	B,A
0B13B3 17ED62              A  4315    	SEXT	HL
0B13B6 68                  A  4316    	LD	L,B
0B13B7 01430000            A  4317    	LD	BC,67
0B13BB B7                  A  4318    	OR	A,A
0B13BC ED42                A  4319    	SBC	HL,BC
0B13BE 28 14               A  4320    	JR	Z,L_138
0B13C0 DD27F1              A  4321    	LD	HL,(IX+%FFFFFFF1)
0B13C3 ED27                A  4322    	LD	HL,(HL)
0B13C5 7E                  A  4323    	LD	A,(HL)
0B13C6 47                  A  4324    	LD	B,A
0B13C7 17ED62              A  4325    	SEXT	HL
0B13CA 68                  A  4326    	LD	L,B
0B13CB 01630000            A  4327    	LD	BC,99
0B13CF B7                  A  4328    	OR	A,A
0B13D0 ED42                A  4329    	SBC	HL,BC
0B13D2 20 2D               A  4330    	JR	NZ,L_139
0B13D4                     A  4331    L_138:
0B13D4 DD77DE              A  4332    	LD	(IX+%FFFFFFDE),A
0B13D7 CD 22 21 0B         A  4333    	CALL	_getsysvar_scrwidth
0B13DB DD7EDE              A  4334    	LD	A,(IX+%FFFFFFDE)
0B13DE E5C1                A  4335    	LD	BC,HL
0B13E0 CD 0C 28 0B         A  4336    	CALL	__stoiu
0B13E4 E5D1                A  4337    	LD	DE,HL
0B13E6 DD07F4              A  4338    	LD	BC,(IX+%FFFFFFF4)
0B13E9 CD 0C 28 0B         A  4339    	CALL	__stoiu
0B13ED E5C1                A  4340    	LD	BC,HL
0B13EF D5E1                A  4341    	LD	HL,DE
0B13F1 B7                  A  4342    	OR	A,A
0B13F2 ED42                A  4343    	SBC	HL,BC
0B13F4 01020000            A  4344    	LD	BC,2
0B13F8 CD C7 29 0B         A  4345    	CALL	__idivs
0B13FC DD2FF9              A  4346    	LD	(IX+%FFFFFFF9),HL
                           A  4347    ;  372			else x = strtou16(argv[4]);
                           A  4348    .LINE 372
                           A  4349    
0B13FF 18 17               A  4350    	JR	L_143
0B1401                     A  4351    L_139:
0B1401 DD3109              A  4352    	LD	IY,(IX+%9)
0B1404 ED230C              A  4353    	LEA	HL,IY+%C
0B1407 ED07                A  4354    	LD	BC,(HL)
0B1409 C5                  A  4355    	PUSH	BC
0B140A CD 8C 0F 0B         A  4356    	CALL	_strtou16
0B140E C1                  A  4357    	POP	BC
0B140F E5C1                A  4358    	LD	BC,HL
0B1411 CD 0C 28 0B         A  4359    	CALL	__stoiu
0B1415 DD2FF9              A  4360    	LD	(IX+%FFFFFFF9),HL
0B1418                     A  4361    L_143:
                           A  4362    ;  373			
                           A  4363    ;  374			if (argv[4][0] == 'C' || argv[4
                           A  4364    .LINE 374
                           A  4365    
0B1418 DD3109              A  4366    	LD	IY,(IX+%9)
0B141B ED330C              A  4367    	LEA	IY,IY+%C
0B141E DD3EFC              A  4368    	LD	(IX+%FFFFFFFC),IY
0B1421 DD27FC              A  4369    	LD	HL,(IX+%FFFFFFFC)
0B1424 ED27                A  4370    	LD	HL,(HL)
0B1426 7E                  A  4371    	LD	A,(HL)
0B1427 47                  A  4372    	LD	B,A
0B1428 17ED62              A  4373    	SEXT	HL
0B142B 68                  A  4374    	LD	L,B
0B142C 01430000            A  4375    	LD	BC,67
0B1430 B7                  A  4376    	OR	A,A
0B1431 ED42                A  4377    	SBC	HL,BC
0B1433 28 14               A  4378    	JR	Z,L_141
0B1435 DD27FC              A  4379    	LD	HL,(IX+%FFFFFFFC)
0B1438 ED27                A  4380    	LD	HL,(HL)
0B143A 7E                  A  4381    	LD	A,(HL)
0B143B 47                  A  4382    	LD	B,A
0B143C 17ED62              A  4383    	SEXT	HL
0B143F 68                  A  4384    	LD	L,B
0B1440 01630000            A  4385    	LD	BC,99
0B1444 B7                  A  4386    	OR	A,A
0B1445 ED42                A  4387    	SBC	HL,BC
0B1447 20 2D               A  4388    	JR	NZ,L_142
0B1449                     A  4389    L_141:
0B1449 DD77DE              A  4390    	LD	(IX+%FFFFFFDE),A
0B144C CD 35 21 0B         A  4391    	CALL	_getsysvar_scrheight
0B1450 DD7EDE              A  4392    	LD	A,(IX+%FFFFFFDE)
0B1453 E5C1                A  4393    	LD	BC,HL
0B1455 CD 0C 28 0B         A  4394    	CALL	__stoiu
0B1459 E5D1                A  4395    	LD	DE,HL
0B145B DD07F6              A  4396    	LD	BC,(IX+%FFFFFFF6)
0B145E CD 0C 28 0B         A  4397    	CALL	__stoiu
0B1462 E5C1                A  4398    	LD	BC,HL
0B1464 D5E1                A  4399    	LD	HL,DE
0B1466 B7                  A  4400    	OR	A,A
0B1467 ED42                A  4401    	SBC	HL,BC
0B1469 01020000            A  4402    	LD	BC,2
0B146D CD C7 29 0B         A  4403    	CALL	__idivs
0B1471 DD2FEE              A  4404    	LD	(IX+%FFFFFFEE),HL
                           A  4405    ;  375			else y = strtou16(argv[4]);
                           A  4406    .LINE 375
                           A  4407    
0B1474 18 14               A  4408    	JR	L_144
0B1476                     A  4409    L_142:
0B1476 DD27FC              A  4410    	LD	HL,(IX+%FFFFFFFC)
0B1479 ED07                A  4411    	LD	BC,(HL)
0B147B C5                  A  4412    	PUSH	BC
0B147C CD 8C 0F 0B         A  4413    	CALL	_strtou16
0B1480 C1                  A  4414    	POP	BC
0B1481 E5C1                A  4415    	LD	BC,HL
0B1483 CD 0C 28 0B         A  4416    	CALL	__stoiu
0B1487 DD2FEE              A  4417    	LD	(IX+%FFFFFFEE),HL
0B148A                     A  4418    L_144:
                           A  4419    ;  376			
                           A  4420    ;  377			vdp_bitmapDraw(bitmap_slot,x,y)
                           A  4421    .LINE 377
                           A  4422    
0B148A DD07EE              A  4423    	LD	BC,(IX+%FFFFFFEE)
0B148D C5                  A  4424    	PUSH	BC
0B148E DD07F9              A  4425    	LD	BC,(IX+%FFFFFFF9)
0B1491 C5                  A  4426    	PUSH	BC
0B1492 DD4EFF              A  4427    	LD	C,(IX+%FFFFFFFF)
0B1495 0600                A  4428    	LD	B,%0
0B1497 C5                  A  4429    	PUSH	BC
0B1498 CD 52 1A 0B         A  4430    	CALL	_vdp_bitmapDraw
0B149C C1                  A  4431    	POP	BC
0B149D C1                  A  4432    	POP	BC
0B149E C1                  A  4433    	POP	BC
                           A  4434    ;  378			
                           A  4435    ;  379		}
0B149F                     A  4436    L_151:
                           A  4437    .LINE 379
                           A  4438    
                           A  4439    ;  380	
                           A  4440    ;  381	    return 0;
                           A  4441    .LINE 381
                           A  4442    
0B149F B7                  A  4443    	OR	A,A
0B14A0 ED62                A  4444    	SBC	HL,HL
0B14A2                     A  4445    L_152:
                           A  4446    .LINE 382
                           A  4447    
0B14A2 DDF9                A  4448    	LD	SP,IX
0B14A4 DDE1                A  4449    	POP	IX
0B14A6 C9                  A  4450    	RET	
                           A  4451    
                           A  4452    
                           A  4453    ;**************************** _main ***********
                           A  4454    ;Name                         Addr/Register   S
                           A  4455    ;_vdp_bitmapDraw                     IMPORT  --
                           A  4456    ;_getsysvar_scrheight                IMPORT  --
                           A  4457    ;_getsysvar_scrwidth                 IMPORT  --
                           A  4458    ;___print_sendstring                 IMPORT  --
                           A  4459    ;___print_xputch                     IMPORT    
                           A  4460    ;___print_uputch                     IMPORT  --
                           A  4461    ;y                                    IX-18    
                           A  4462    ;G_2                                  IX-15    
                           A  4463    ;bmp                                  IX-12    
                           A  4464    ;x                                     IX-7    
                           A  4465    ;G_3                                   IX-4    
                           A  4466    ;bitmap_slot                           IX-1    
                           A  4467    ;argv                                  IX+9    
                           A  4468    ;argc                                  IX+6    
                           A  4469    
                           A  4470    
                           A  4471    ; Stack Frame Size: 46 (bytes)
                           A  4472    ;       Spill Code: -3 (instruction)
                           A  4473    
                           A  4474    
                           A  4475    .ENDFUNC "main",382,"_main"
                           A  4476    	SEGMENT STRSECT
0B2B98                     A  4477    L__100:
0B2B98 55736167 65206973   A  4478    	DB	"Usage is "
0B2BA0 20 
0B2BA1 00                  A  4479    	DB	0
0B2BA2                     A  4480    L__101:
0B2BA2 203C6669 6C656E61   A  4481    	DB	" <filename> [bitmap slot] [top-left x]
0B2BAA 6D653E20 5B626974 
0B2BB2 6D617020 736C6F74 
0B2BBA 5D205B74 6F702D6C 
0B2BC2 65667420 785D205B 
0B2BCA 746F702D 6C656674 
0B2BD2 20795D 
0B2BD5 0D0A00              A  4482    	DB	13,10,0
                           A  4483    	XREF _write16bit:ROM
                           A  4484    	XREF _vdp_bitmapDraw:ROM
                           A  4485    	XREF _vdp_bitmapSelect:ROM
                           A  4486    	XREF _mos_getfil:ROM
                           A  4487    	XREF _mos_flseek:ROM
                           A  4488    	XREF _mos_fread:ROM
                           A  4489    	XREF _mos_fgetc:ROM
                           A  4490    	XREF _mos_fclose:ROM
                           A  4491    	XREF _mos_fopen:ROM
                           A  4492    	XREF _getsysvar_scrheight:ROM
                           A  4493    	XREF _getsysvar_scrwidth:ROM
                           A  4494    	XREF _mos_puts:ROM
                           A  4495    	XREF _waitvblank:ROM
                           A  4496    	XREF _putch:ROM
                           A  4497    	XREF _memcpy:ROM
                           A  4498    	XREF _malloc:ROM
                           A  4499    	XREF _free:ROM
                           A  4500    	XREF ___print_sendstring:ROM
                           A  4501    	XREF ___print_xputch:ROM
                           A  4502    	XREF ___print_uputch:ROM
                           A  4503    	XREF __lcmps:ROM
                           A  4504    	XREF __lcmpu:ROM
                           A  4505    	XREF __ladd:ROM
                           A  4506    	XREF __lsub:ROM
                           A  4507    	XREF __idivs:ROM
                           A  4508    	XREF __ldivs:ROM
                           A  4509    	XREF __imuls:ROM
                           A  4510    	XREF __lmuls:ROM
                           A  4511    	XREF __lmulu:ROM
                           A  4512    	XREF __smulu:ROM
                           A  4513    	XREF __irems:ROM
                           A  4514    	XREF __lrems:ROM
                           A  4515    	XREF __stoiu:ROM
                           A  4516    	XREF __itol:ROM
                           A  4517    	XREF __ildix:ROM
                           A  4518    	XREF __istix:ROM
                           A  4519    	XREF __ladd_b:ROM
                           A  4520    	XDEF _main
                           A  4521    	XDEF _strtou24
                           A  4522    	XDEF _strtou8
                           A  4523    	XDEF _strtou16
                           A  4524    	XDEF _load_bmp_big
                           A  4525    	XDEF _reorder_and_insert
                           A  4526    	XDEF _reorder
                           A  4527    	XDEF _twiddle_buffer
                           A  4528    	XDEF _flip
                           A  4529    	XDEF _max
                           A  4530    	XDEF _min
                           A  4531    	XDEF _delay_secs
                           A  4532    	END


Errors: 0
Warnings: 0
Lines Assembled: 4533
