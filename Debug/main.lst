Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED14-Oct-23     16:38:00     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optspeed -noreduceopt -nopadbranc
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",8
                           A   144    .DEFINE "baudRate"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 4
                           A   148    .ENDEF
                           A   149    .DEFINE "dataBits"
                           A   150    .VALUE 3
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "stopBits"
                           A   155    .VALUE 4
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "parity"
                           A   160    .VALUE 5
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "flowcontrol"
                           A   165    .VALUE 6
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "eir"
                           A   170    .VALUE 7
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .ENDREC "NONAME3"
                           A   175    .BEGREC "NONAME4",15
                           A   176    .DEFINE "fs"
                           A   177    .VALUE 0
                           A   178    .CLASS 8
                           A   179    .TYPE 46
                           A   180    .ENDEF
                           A   181    .DEFINE "id"
                           A   182    .VALUE 3
                           A   183    .CLASS 8
                           A   184    .TYPE 13
                           A   185    .ENDEF
                           A   186    .DEFINE "attr"
                           A   187    .VALUE 5
                           A   188    .CLASS 8
                           A   189    .TYPE 12
                           A   190    .ENDEF
                           A   191    .DEFINE "stat"
                           A   192    .VALUE 6
                           A   193    .CLASS 8
                           A   194    .TYPE 12
                           A   195    .ENDEF
                           A   196    .DEFINE "sclust"
                           A   197    .VALUE 7
                           A   198    .CLASS 8
                           A   199    .TYPE 15
                           A   200    .ENDEF
                           A   201    .DEFINE "objsize"
                           A   202    .VALUE 11
                           A   203    .CLASS 8
                           A   204    .TYPE 15
                           A   205    .ENDEF
                           A   206    .ENDREC "NONAME4"
                           A   207    .BEGREC "NONAME5",36
                           A   208    .DEFINE "obj"
                           A   209    .VALUE 0
                           A   210    .CLASS 8
                           A   211    .TAG "NONAME4"
                           A   212    .TYPE 8
                           A   213    .ENDEF
                           A   214    .DEFINE "flag"
                           A   215    .VALUE 15
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "err"
                           A   220    .VALUE 16
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "fptr"
                           A   225    .VALUE 17
                           A   226    .CLASS 8
                           A   227    .TYPE 15
                           A   228    .ENDEF
                           A   229    .DEFINE "clust"
                           A   230    .VALUE 21
                           A   231    .CLASS 8
                           A   232    .TYPE 15
                           A   233    .ENDEF
                           A   234    .DEFINE "sect"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 15
                           A   238    .ENDEF
                           A   239    .DEFINE "dir_sect"
                           A   240    .VALUE 29
                           A   241    .CLASS 8
                           A   242    .TYPE 15
                           A   243    .ENDEF
                           A   244    .DEFINE "dir_ptr"
                           A   245    .VALUE 33
                           A   246    .CLASS 8
                           A   247    .TYPE 46
                           A   248    .ENDEF
                           A   249    .ENDREC "NONAME5"
                           A   250    ;    1	//Copyright HeathenUK 2023, others' cop
                           A   251    ;    2	
                           A   252    ;    3	#include <stdio.h>
                           A   253    ;    4	#include <stdlib.h>
                           A   254    ;    5	#include <ctype.h>
                           A   255    ;    6	#include <stdint.h>
                           A   256    ;    7	#include <string.h>
                           A   257    ;    8	#include <eZ80.h>
                           A   258    ;    9	#include <defines.h>
                           A   259    ;   10	#include "mos-interface.h"
                           A   260    ;   11	#include "vdp.h"
                           A   261    ;   12	
                           A   262    ;   13	typedef struct {
                           A   263    ;   14		
                           A   264    ;   15		uint16_t bmp_width;
                           A   265    ;   16		uint16_t bmp_height;
                           A   266    ;   17		uint8_t  bmp_bitdepth;
                           A   267    ;   18		
                           A   268    ;   19		uint32_t pixels_offset;
                           A   269    ;   20		uint32_t bmp_size;
                           A   270    ;   21		uint32_t main_header_size;
                           A   271    ;   22		
                           A   272    ;   23		uint32_t compression;
                           A   273    ;   24		
                           A   274    ;   25		uint32_t redBitField;
                           A   275    ;   26		uint32_t greenBitField;
                           A   276    ;   27		uint32_t blueBitField;
                           A   277    ;   28		uint32_t alphaBitField;
                           A   278    ;   29		
                           A   279    ;   30		uint32_t color_table_size;
                           A   280    ;   31		char color_table[1024];
                           A   281    ;   32		
                           A   282    ;   33		int8_t red_pos;
                           A   283    ;   34		int8_t green_pos;
                           A   284    ;   35		int8_t blue_pos;
                           A   285    ;   36		int8_t alpha_pos;
                           A   286    ;   37		
                           A   287    ;   38		uint16_t row_padding;
                           A   288    ;   39		uint16_t non_pad_row;
                           A   289    ;   40		
                           A   290    ;   41	} bmp_info;
                           A   291    .BEGREC "NONAME6",1073
                           A   292    .DEFINE "bmp_width"
                           A   293    .VALUE 0
                           A   294    .CLASS 8
                           A   295    .TYPE 13
                           A   296    .ENDEF
                           A   297    .DEFINE "bmp_height"
                           A   298    .VALUE 2
                           A   299    .CLASS 8
                           A   300    .TYPE 13
                           A   301    .ENDEF
                           A   302    .DEFINE "bmp_bitdepth"
                           A   303    .VALUE 4
                           A   304    .CLASS 8
                           A   305    .TYPE 12
                           A   306    .ENDEF
                           A   307    .DEFINE "pixels_offset"
                           A   308    .VALUE 5
                           A   309    .CLASS 8
                           A   310    .TYPE 15
                           A   311    .ENDEF
                           A   312    .DEFINE "bmp_size"
                           A   313    .VALUE 9
                           A   314    .CLASS 8
                           A   315    .TYPE 15
                           A   316    .ENDEF
                           A   317    .DEFINE "main_header_size"
                           A   318    .VALUE 13
                           A   319    .CLASS 8
                           A   320    .TYPE 15
                           A   321    .ENDEF
                           A   322    .DEFINE "compression"
                           A   323    .VALUE 17
                           A   324    .CLASS 8
                           A   325    .TYPE 15
                           A   326    .ENDEF
                           A   327    .DEFINE "redBitField"
                           A   328    .VALUE 21
                           A   329    .CLASS 8
                           A   330    .TYPE 15
                           A   331    .ENDEF
                           A   332    .DEFINE "greenBitField"
                           A   333    .VALUE 25
                           A   334    .CLASS 8
                           A   335    .TYPE 15
                           A   336    .ENDEF
                           A   337    .DEFINE "blueBitField"
                           A   338    .VALUE 29
                           A   339    .CLASS 8
                           A   340    .TYPE 15
                           A   341    .ENDEF
                           A   342    .DEFINE "alphaBitField"
                           A   343    .VALUE 33
                           A   344    .CLASS 8
                           A   345    .TYPE 15
                           A   346    .ENDEF
                           A   347    .DEFINE "color_table_size"
                           A   348    .VALUE 37
                           A   349    .CLASS 8
                           A   350    .TYPE 15
                           A   351    .ENDEF
                           A   352    .DEFINE "color_table"
                           A   353    .VALUE 41
                           A   354    .CLASS 8
                           A   355    .DIM 1024
                           A   356    .TYPE 98
                           A   357    .ENDEF
                           A   358    .DEFINE "red_pos"
                           A   359    .VALUE 1065
                           A   360    .CLASS 8
                           A   361    .TYPE 2
                           A   362    .ENDEF
                           A   363    .DEFINE "green_pos"
                           A   364    .VALUE 1066
                           A   365    .CLASS 8
                           A   366    .TYPE 2
                           A   367    .ENDEF
                           A   368    .DEFINE "blue_pos"
                           A   369    .VALUE 1067
                           A   370    .CLASS 8
                           A   371    .TYPE 2
                           A   372    .ENDEF
                           A   373    .DEFINE "alpha_pos"
                           A   374    .VALUE 1068
                           A   375    .CLASS 8
                           A   376    .TYPE 2
                           A   377    .ENDEF
                           A   378    .DEFINE "row_padding"
                           A   379    .VALUE 1069
                           A   380    .CLASS 8
                           A   381    .TYPE 13
                           A   382    .ENDEF
                           A   383    .DEFINE "non_pad_row"
                           A   384    .VALUE 1071
                           A   385    .CLASS 8
                           A   386    .TYPE 13
                           A   387    .ENDEF
                           A   388    .ENDREC "NONAME6"
                           A   389    ;   42	
                           A   390    ;   43	extern void write16bit(uint16_t w);
                           A   391    ;   44	extern void write24bit(uint24_t w);
                           A   392    ;   45	extern void write32bit(uint32_t w);
                           A   393    ;   46	
                           A   394    ;   47	void delay_secs(UINT16 ticks_end) { //1
0B00E5                     A   395    _delay_secs:
                           A   396    .DEFINE "_delay_secs"
                           A   397    
                           A   398    .VALUE _delay_secs
                           A   399    
                           A   400    .CLASS 2
                           A   401    
                           A   402    .TYPE 65
                           A   403    
                           A   404    .ENDEF
                           A   405    
                           A   406    .BEGFUNC "delay_secs",47,"_delay_secs"
                           A   407    
                           A   408    .LINE 47
                           A   409    
                           A   410    .DEFINE "ticks_end"
                           A   411    
                           A   412    .CLASS 65
                           A   413    
                           A   414    .VALUE 6
                           A   415    
                           A   416    .TYPE 13
                           A   417    
                           A   418    .ENDEF
                           A   419    
                           A   420    .DEFINE "ticks"
                           A   421    
                           A   422    .CLASS 65
                           A   423    
                           A   424    .VALUE -4
                           A   425    
                           A   426    .TYPE 15
                           A   427    
                           A   428    .ENDEF
                           A   429    
0B00E5 DDE5                A   430    	PUSH	IX
0B00E7 DD210000 00         A   431    	LD	IX,0
0B00EC DD39                A   432    	ADD	IX,SP
0B00EE C5                  A   433    	PUSH	BC
0B00EF 3B                  A   434    	DEC	SP
                           A   435    ;   48		
                           A   436    ;   49		UINT32 ticks = 0;
                           A   437    .LINE 49
                           A   438    
0B00F0 01000000            A   439    	LD	BC,0
0B00F4 AF                  A   440    	XOR	A,A
0B00F5 DD0FFC              A   441    	LD	(IX+%FFFFFFFC),BC
0B00F8 DD77FF              A   442    	LD	(IX+%FFFFFFFF),A
                           A   443    ;   50		ticks_end *= 60;
                           A   444    .LINE 50
                           A   445    
0B00FB 49213C00            A   446    	LD.LIS	HL,60
0B00FF DD0706              A   447    	LD	BC,(IX+%6)
0B0102 CD CA 4A 0B         A   448    	CALL	__smulu
0B0106 DD7506              A   449    	LD	(IX+%6),L
0B0109 DD7407              A   450    	LD	(IX+%7),H
                           A   451    ;   51		while(true) {
0B010C                     A   452    L_3:
                           A   453    .LINE 51
                           A   454    
                           A   455    ;   52			
                           A   456    ;   53			waitvblank();
                           A   457    .LINE 53
                           A   458    
0B010C CD F3 38 0B         A   459    	CALL	_waitvblank
                           A   460    ;   54			ticks++;
                           A   461    .LINE 54
                           A   462    
0B0110 DD27FC              A   463    	LD	HL,(IX+%FFFFFFFC)
0B0113 DD5EFF              A   464    	LD	E,(IX+%FFFFFFFF)
0B0116 3E01                A   465    	LD	A,%1
0B0118 CD AD 3C 0B         A   466    	CALL	__ladd_b
0B011C DD2FFC              A   467    	LD	(IX+%FFFFFFFC),HL
0B011F DD73FF              A   468    	LD	(IX+%FFFFFFFF),E
                           A   469    ;   55			if(ticks >= ticks_end) break;
                           A   470    .LINE 55
                           A   471    
0B0122 DD0706              A   472    	LD	BC,(IX+%6)
0B0125 CD 9E 40 0B         A   473    	CALL	__stoiu
0B0129 E5C1                A   474    	LD	BC,HL
0B012B AF                  A   475    	XOR	A,A
0B012C DD27FC              A   476    	LD	HL,(IX+%FFFFFFFC)
0B012F DD5EFF              A   477    	LD	E,(IX+%FFFFFFFF)
0B0132 CD DB 47 0B         A   478    	CALL	__lcmpu
0B0136 38 D4               A   479    	JR	C,L_3
                           A   480    ;   56			
                           A   481    ;   57		}
                           A   482    ;   58		
                           A   483    ;   59	}
                           A   484    .LINE 59
                           A   485    
0B0138 DDF9                A   486    	LD	SP,IX
0B013A DDE1                A   487    	POP	IX
0B013C C9                  A   488    	RET	
                           A   489    
                           A   490    
                           A   491    ;**************************** _delay_secs *****
                           A   492    ;Name                         Addr/Register   S
                           A   493    ;_waitvblank                         IMPORT  --
                           A   494    ;ticks                                 IX-4    
                           A   495    ;ticks_end                             IX+6    
                           A   496    
                           A   497    
                           A   498    ; Stack Frame Size: 13 (bytes)
                           A   499    ;       Spill Code: 0 (instruction)
                           A   500    
                           A   501    
                           A   502    .ENDFUNC "delay_secs",59,"_delay_secs"
                           A   503    ;   60	
                           A   504    ;   61	int min(int a, int b) {
0B013D                     A   505    _min:
                           A   506    .DEFINE "_min"
                           A   507    
                           A   508    .VALUE _min
                           A   509    
                           A   510    .CLASS 2
                           A   511    
                           A   512    .TYPE 68
                           A   513    
                           A   514    .ENDEF
                           A   515    
                           A   516    .BEGFUNC "min",61,"_min"
                           A   517    
                           A   518    .LINE 61
                           A   519    
                           A   520    .DEFINE "a"
                           A   521    
                           A   522    .CLASS 65
                           A   523    
                           A   524    .VALUE 6
                           A   525    
                           A   526    .TYPE 4
                           A   527    
                           A   528    .ENDEF
                           A   529    
                           A   530    .DEFINE "b"
                           A   531    
                           A   532    .CLASS 65
                           A   533    
                           A   534    .VALUE 9
                           A   535    
                           A   536    .TYPE 4
                           A   537    
                           A   538    .ENDEF
                           A   539    
0B013D DDE5                A   540    	PUSH	IX
0B013F DD210000 00         A   541    	LD	IX,0
0B0144 DD39                A   542    	ADD	IX,SP
                           A   543    ;   62	    if (a > b)
                           A   544    .LINE 62
                           A   545    
0B0146 DD0706              A   546    	LD	BC,(IX+%6)
0B0149 DD2709              A   547    	LD	HL,(IX+%9)
0B014C B7                  A   548    	OR	A,A
0B014D ED42                A   549    	SBC	HL,BC
0B014F F2 59 01 0B         A   550    	JP	P,L__3
0B0153 EA 62 01 0B         A   551    	JP	PE,L_6
0B0157 18 04               A   552    	JR	L__4
0B0159                     A   553    L__3:
0B0159 E2 62 01 0B         A   554    	JP	PO,L_6
0B015D                     A   555    L__4:
                           A   556    ;   63	        return b;
                           A   557    .LINE 63
                           A   558    
0B015D DD2709              A   559    	LD	HL,(IX+%9)
0B0160 18 03               A   560    	JR	L_7
0B0162                     A   561    L_6:
                           A   562    ;   64	    return a;
                           A   563    .LINE 64
                           A   564    
0B0162 DD2706              A   565    	LD	HL,(IX+%6)
                           A   566    ;   65	}
0B0165                     A   567    L_7:
                           A   568    .LINE 65
                           A   569    
0B0165 DDF9                A   570    	LD	SP,IX
0B0167 DDE1                A   571    	POP	IX
0B0169 C9                  A   572    	RET	
                           A   573    
                           A   574    
                           A   575    ;**************************** _min ************
                           A   576    ;Name                         Addr/Register   S
                           A   577    ;b                                     IX+9    
                           A   578    ;a                                     IX+6    
                           A   579    
                           A   580    
                           A   581    ; Stack Frame Size: 12 (bytes)
                           A   582    ;       Spill Code: 0 (instruction)
                           A   583    
                           A   584    
                           A   585    .ENDFUNC "min",65,"_min"
                           A   586    ;   66	
                           A   587    ;   67	int max(int a, int b) {
0B016A                     A   588    _max:
                           A   589    .DEFINE "_max"
                           A   590    
                           A   591    .VALUE _max
                           A   592    
                           A   593    .CLASS 2
                           A   594    
                           A   595    .TYPE 68
                           A   596    
                           A   597    .ENDEF
                           A   598    
                           A   599    .BEGFUNC "max",67,"_max"
                           A   600    
                           A   601    .LINE 67
                           A   602    
                           A   603    .DEFINE "a"
                           A   604    
                           A   605    .CLASS 65
                           A   606    
                           A   607    .VALUE 6
                           A   608    
                           A   609    .TYPE 4
                           A   610    
                           A   611    .ENDEF
                           A   612    
                           A   613    .DEFINE "b"
                           A   614    
                           A   615    .CLASS 65
                           A   616    
                           A   617    .VALUE 9
                           A   618    
                           A   619    .TYPE 4
                           A   620    
                           A   621    .ENDEF
                           A   622    
0B016A DDE5                A   623    	PUSH	IX
0B016C DD210000 00         A   624    	LD	IX,0
0B0171 DD39                A   625    	ADD	IX,SP
                           A   626    ;   68	    if (a > b)
                           A   627    .LINE 68
                           A   628    
0B0173 DD0706              A   629    	LD	BC,(IX+%6)
0B0176 DD2709              A   630    	LD	HL,(IX+%9)
0B0179 B7                  A   631    	OR	A,A
0B017A ED42                A   632    	SBC	HL,BC
0B017C F2 86 01 0B         A   633    	JP	P,L__7
0B0180 EA 8F 01 0B         A   634    	JP	PE,L_9
0B0184 18 04               A   635    	JR	L__8
0B0186                     A   636    L__7:
0B0186 E2 8F 01 0B         A   637    	JP	PO,L_9
0B018A                     A   638    L__8:
                           A   639    ;   69	        return a;
                           A   640    .LINE 69
                           A   641    
0B018A DD2706              A   642    	LD	HL,(IX+%6)
0B018D 18 03               A   643    	JR	L_10
0B018F                     A   644    L_9:
                           A   645    ;   70	    return b;
                           A   646    .LINE 70
                           A   647    
0B018F DD2709              A   648    	LD	HL,(IX+%9)
                           A   649    ;   71	}
0B0192                     A   650    L_10:
                           A   651    .LINE 71
                           A   652    
0B0192 DDF9                A   653    	LD	SP,IX
0B0194 DDE1                A   654    	POP	IX
0B0196 C9                  A   655    	RET	
                           A   656    
                           A   657    
                           A   658    ;**************************** _max ************
                           A   659    ;Name                         Addr/Register   S
                           A   660    ;b                                     IX+9    
                           A   661    ;a                                     IX+6    
                           A   662    
                           A   663    
                           A   664    ; Stack Frame Size: 12 (bytes)
                           A   665    ;       Spill Code: 0 (instruction)
                           A   666    
                           A   667    
                           A   668    .ENDFUNC "max",71,"_max"
                           A   669    ;   72	
                           A   670    ;   73	void flip(uint32_t * framebuffer, int w
0B0197                     A   671    _flip:
                           A   672    .DEFINE "_flip"
                           A   673    
                           A   674    .VALUE _flip
                           A   675    
                           A   676    .CLASS 2
                           A   677    
                           A   678    .TYPE 65
                           A   679    
                           A   680    .ENDEF
                           A   681    
                           A   682    .BEGFUNC "flip",73,"_flip"
                           A   683    
                           A   684    .LINE 73
                           A   685    
                           A   686    .DEFINE "framebuffer"
                           A   687    
                           A   688    .CLASS 65
                           A   689    
                           A   690    .VALUE 6
                           A   691    
                           A   692    .TYPE 47
                           A   693    
                           A   694    .ENDEF
                           A   695    
                           A   696    .DEFINE "width"
                           A   697    
                           A   698    .CLASS 65
                           A   699    
                           A   700    .VALUE 9
                           A   701    
                           A   702    .TYPE 4
                           A   703    
                           A   704    .ENDEF
                           A   705    
                           A   706    .DEFINE "height"
                           A   707    
                           A   708    .CLASS 65
                           A   709    
                           A   710    .VALUE 12
                           A   711    
                           A   712    .TYPE 4
                           A   713    
                           A   714    .ENDEF
                           A   715    
                           A   716    .DEFINE "y"
                           A   717    
                           A   718    .CLASS 65
                           A   719    
                           A   720    .VALUE -2
                           A   721    
                           A   722    .TYPE 13
                           A   723    
                           A   724    .ENDEF
                           A   725    
                           A   726    .DEFINE "row_buffer"
                           A   727    
                           A   728    .CLASS 65
                           A   729    
                           A   730    .VALUE -5
                           A   731    
                           A   732    .TYPE 47
                           A   733    
                           A   734    .ENDEF
                           A   735    
                           A   736    .DEFINE "row_size"
                           A   737    
                           A   738    .CLASS 65
                           A   739    
                           A   740    .VALUE -8
                           A   741    
                           A   742    .TYPE 4
                           A   743    
                           A   744    .ENDEF
                           A   745    
                           A   746    .DEFINE "top_row"
                           A   747    
                           A   748    .CLASS 65
                           A   749    
                           A   750    .VALUE -11
                           A   751    
                           A   752    .TYPE 47
                           A   753    
                           A   754    .ENDEF
                           A   755    
                           A   756    .DEFINE "bottom_row"
                           A   757    
                           A   758    .CLASS 65
                           A   759    
                           A   760    .VALUE -14
                           A   761    
                           A   762    .TYPE 47
                           A   763    
                           A   764    .ENDEF
                           A   765    
0B0197 DDE5                A   766    	PUSH	IX
0B0199 DD210000 00         A   767    	LD	IX,0
0B019E DD39                A   768    	ADD	IX,SP
0B01A0 ED22F1              A   769    	LEA	HL,IX+%FFFFFFF1
0B01A3 F9                  A   770    	LD	SP,HL
                           A   771    ;   74	    uint16_t y;
                           A   772    ;   75	    uint32_t * row_buffer = (uint32_t *
                           A   773    .LINE 75
                           A   774    
0B01A4 DD2709              A   775    	LD	HL,(IX+%9)
0B01A7 29                  A   776    	ADD	HL,HL
0B01A8 29                  A   777    	ADD	HL,HL
0B01A9 E5                  A   778    	PUSH	HL
0B01AA DD77F1              A   779    	LD	(IX+%FFFFFFF1),A
0B01AD CD C7 3D 0B         A   780    	CALL	_malloc
0B01B1 DD7EF1              A   781    	LD	A,(IX+%FFFFFFF1)
0B01B4 C1                  A   782    	POP	BC
0B01B5 DD2FFB              A   783    	LD	(IX+%FFFFFFFB),HL
                           A   784    ;   76	    int row_size = width * sizeof(uint3
                           A   785    .LINE 76
                           A   786    
0B01B8 DD2709              A   787    	LD	HL,(IX+%9)
0B01BB 29                  A   788    	ADD	HL,HL
0B01BC 29                  A   789    	ADD	HL,HL
0B01BD DD2FF8              A   790    	LD	(IX+%FFFFFFF8),HL
                           A   791    ;   77	
                           A   792    ;   78	    for (y = 0; y < height / 2; y++) {
                           A   793    .LINE 78
                           A   794    
0B01C0 DD36FE00            A   795    	LD	(IX+%FFFFFFFE),%0
0B01C4 DD36FF00            A   796    	LD	(IX+%FFFFFFFF),%0
0B01C8 C3 58 02 0B         A   797    	JR	L_14
0B01CC                     A   798    L_12:
                           A   799    ;   79	        uint32_t * top_row = framebuffe
                           A   800    .LINE 79
                           A   801    
0B01CC DD07FE              A   802    	LD	BC,(IX+%FFFFFFFE)
0B01CF CD 9E 40 0B         A   803    	CALL	__stoiu
0B01D3 DD0709              A   804    	LD	BC,(IX+%9)
0B01D6 CD 5F 47 0B         A   805    	CALL	__imuls
0B01DA 29                  A   806    	ADD	HL,HL
0B01DB 29                  A   807    	ADD	HL,HL
0B01DC DD0706              A   808    	LD	BC,(IX+%6)
0B01DF 09                  A   809    	ADD	HL,BC
0B01E0 DD2FF5              A   810    	LD	(IX+%FFFFFFF5),HL
                           A   811    ;   80	        uint32_t * bottom_row = framebu
                           A   812    .LINE 80
                           A   813    
0B01E3 DD07FE              A   814    	LD	BC,(IX+%FFFFFFFE)
0B01E6 CD 9E 40 0B         A   815    	CALL	__stoiu
0B01EA E5C1                A   816    	LD	BC,HL
0B01EC DD270C              A   817    	LD	HL,(IX+%C)
0B01EF B7                  A   818    	OR	A,A
0B01F0 ED42                A   819    	SBC	HL,BC
0B01F2 2B                  A   820    	DEC	HL
0B01F3 DD0709              A   821    	LD	BC,(IX+%9)
0B01F6 CD 5F 47 0B         A   822    	CALL	__imuls
0B01FA 29                  A   823    	ADD	HL,HL
0B01FB 29                  A   824    	ADD	HL,HL
0B01FC DD0706              A   825    	LD	BC,(IX+%6)
0B01FF 09                  A   826    	ADD	HL,BC
0B0200 DD2FF2              A   827    	LD	(IX+%FFFFFFF2),HL
                           A   828    ;   81	
                           A   829    ;   82	        memcpy(row_buffer, top_row, row
                           A   830    .LINE 82
                           A   831    
0B0203 DD07F8              A   832    	LD	BC,(IX+%FFFFFFF8)
0B0206 C5                  A   833    	PUSH	BC
0B0207 DD07F5              A   834    	LD	BC,(IX+%FFFFFFF5)
0B020A C5                  A   835    	PUSH	BC
0B020B DD07FB              A   836    	LD	BC,(IX+%FFFFFFFB)
0B020E C5                  A   837    	PUSH	BC
0B020F DD77F1              A   838    	LD	(IX+%FFFFFFF1),A
0B0212 CD A6 44 0B         A   839    	CALL	_memcpy
0B0216 DD7EF1              A   840    	LD	A,(IX+%FFFFFFF1)
0B0219 C1                  A   841    	POP	BC
0B021A C1                  A   842    	POP	BC
0B021B C1                  A   843    	POP	BC
                           A   844    ;   83	        memcpy(top_row, bottom_row, row
                           A   845    .LINE 83
                           A   846    
0B021C DD07F8              A   847    	LD	BC,(IX+%FFFFFFF8)
0B021F C5                  A   848    	PUSH	BC
0B0220 DD07F2              A   849    	LD	BC,(IX+%FFFFFFF2)
0B0223 C5                  A   850    	PUSH	BC
0B0224 DD07F5              A   851    	LD	BC,(IX+%FFFFFFF5)
0B0227 C5                  A   852    	PUSH	BC
0B0228 DD77F1              A   853    	LD	(IX+%FFFFFFF1),A
0B022B CD A6 44 0B         A   854    	CALL	_memcpy
0B022F DD7EF1              A   855    	LD	A,(IX+%FFFFFFF1)
0B0232 C1                  A   856    	POP	BC
0B0233 C1                  A   857    	POP	BC
0B0234 C1                  A   858    	POP	BC
                           A   859    ;   84	        memcpy(bottom_row, row_buffer, 
                           A   860    .LINE 84
                           A   861    
0B0235 DD07F8              A   862    	LD	BC,(IX+%FFFFFFF8)
0B0238 C5                  A   863    	PUSH	BC
0B0239 DD07FB              A   864    	LD	BC,(IX+%FFFFFFFB)
0B023C C5                  A   865    	PUSH	BC
0B023D DD07F2              A   866    	LD	BC,(IX+%FFFFFFF2)
0B0240 C5                  A   867    	PUSH	BC
0B0241 DD77F1              A   868    	LD	(IX+%FFFFFFF1),A
0B0244 CD A6 44 0B         A   869    	CALL	_memcpy
0B0248 DD7EF1              A   870    	LD	A,(IX+%FFFFFFF1)
0B024B C1                  A   871    	POP	BC
0B024C C1                  A   872    	POP	BC
0B024D C1                  A   873    	POP	BC
0B024E DD27FE              A   874    	LD	HL,(IX+%FFFFFFFE)
0B0251 23                  A   875    	INC	HL
0B0252 DD75FE              A   876    	LD	(IX+%FFFFFFFE),L
0B0255 DD74FF              A   877    	LD	(IX+%FFFFFFFF),H
                           A   878    ;   85	    }
0B0258                     A   879    L_14:
                           A   880    .LINE 85
                           A   881    
0B0258 01020000            A   882    	LD	BC,2
0B025C DD270C              A   883    	LD	HL,(IX+%C)
0B025F CD 9B 47 0B         A   884    	CALL	__idivs
0B0263 E5D1                A   885    	LD	DE,HL
0B0265 DD07FE              A   886    	LD	BC,(IX+%FFFFFFFE)
0B0268 CD 9E 40 0B         A   887    	CALL	__stoiu
0B026C B7                  A   888    	OR	A,A
0B026D ED52                A   889    	SBC	HL,DE
0B026F FA 79 02 0B         A   890    	JP	M,L__11
0B0273 EA CC 01 0B         A   891    	JP	PE,L_12
0B0277 18 04               A   892    	JR	L__12
0B0279                     A   893    L__11:
0B0279 E2 CC 01 0B         A   894    	JP	PO,L_12
0B027D                     A   895    L__12:
                           A   896    ;   86	
                           A   897    ;   87	    free(row_buffer);
                           A   898    .LINE 87
                           A   899    
0B027D DD07FB              A   900    	LD	BC,(IX+%FFFFFFFB)
0B0280 C5                  A   901    	PUSH	BC
0B0281 CD C2 3C 0B         A   902    	CALL	_free
0B0285 C1                  A   903    	POP	BC
                           A   904    ;   88	}
                           A   905    .LINE 88
                           A   906    
0B0286 DDF9                A   907    	LD	SP,IX
0B0288 DDE1                A   908    	POP	IX
0B028A C9                  A   909    	RET	
                           A   910    
                           A   911    
                           A   912    ;**************************** _flip ***********
                           A   913    ;Name                         Addr/Register   S
                           A   914    ;_free                               IMPORT  --
                           A   915    ;_memcpy                             IMPORT  --
                           A   916    ;_malloc                             IMPORT  --
                           A   917    ;bottom_row                           IX-14    
                           A   918    ;top_row                              IX-11    
                           A   919    ;row_size                              IX-8    
                           A   920    ;row_buffer                            IX-5    
                           A   921    ;y                                     IX-2    
                           A   922    ;height                               IX+12    
                           A   923    ;width                                 IX+9    
                           A   924    ;framebuffer                           IX+6    
                           A   925    
                           A   926    
                           A   927    ; Stack Frame Size: 30 (bytes)
                           A   928    ;       Spill Code: 0 (instruction)
                           A   929    
                           A   930    
                           A   931    .ENDFUNC "flip",88,"_flip"
                           A   932    ;   89	
                           A   933    ;   90	void twiddle_buffer(char* buffer, int w
0B028B                     A   934    _twiddle_buffer:
                           A   935    .DEFINE "_twiddle_buffer"
                           A   936    
                           A   937    .VALUE _twiddle_buffer
                           A   938    
                           A   939    .CLASS 2
                           A   940    
                           A   941    .TYPE 65
                           A   942    
                           A   943    .ENDEF
                           A   944    
                           A   945    .BEGFUNC "twiddle_buffer",90,"_twiddle_buffer"
                           A   946    
                           A   947    .LINE 90
                           A   948    
                           A   949    .DEFINE "buffer"
                           A   950    
                           A   951    .CLASS 65
                           A   952    
                           A   953    .VALUE 6
                           A   954    
                           A   955    .TYPE 34
                           A   956    
                           A   957    .ENDEF
                           A   958    
                           A   959    .DEFINE "width"
                           A   960    
                           A   961    .CLASS 65
                           A   962    
                           A   963    .VALUE 9
                           A   964    
                           A   965    .TYPE 4
                           A   966    
                           A   967    .ENDEF
                           A   968    
                           A   969    .DEFINE "height"
                           A   970    
                           A   971    .CLASS 65
                           A   972    
                           A   973    .VALUE 12
                           A   974    
                           A   975    .TYPE 4
                           A   976    
                           A   977    .ENDEF
                           A   978    
                           A   979    .DEFINE "col"
                           A   980    
                           A   981    .CLASS 65
                           A   982    
                           A   983    .VALUE -3
                           A   984    
                           A   985    .TYPE 4
                           A   986    
                           A   987    .ENDEF
                           A   988    
                           A   989    .DEFINE "tempRow"
                           A   990    
                           A   991    .CLASS 65
                           A   992    
                           A   993    .VALUE -6
                           A   994    
                           A   995    .TYPE 34
                           A   996    
                           A   997    .ENDEF
                           A   998    
                           A   999    .DEFINE "oppositeRowPtr"
                           A  1000    
                           A  1001    .CLASS 65
                           A  1002    
                           A  1003    .VALUE -9
                           A  1004    
                           A  1005    .TYPE 34
                           A  1006    
                           A  1007    .ENDEF
                           A  1008    
                           A  1009    .DEFINE "rowPtr"
                           A  1010    
                           A  1011    .CLASS 65
                           A  1012    
                           A  1013    .VALUE -12
                           A  1014    
                           A  1015    .TYPE 34
                           A  1016    
                           A  1017    .ENDEF
                           A  1018    
                           A  1019    .DEFINE "row"
                           A  1020    
                           A  1021    .CLASS 65
                           A  1022    
                           A  1023    .VALUE -15
                           A  1024    
                           A  1025    .TYPE 4
                           A  1026    
                           A  1027    .ENDEF
                           A  1028    
0B028B DDE5                A  1029    	PUSH	IX
0B028D DD210000 00         A  1030    	LD	IX,0
0B0292 DD39                A  1031    	ADD	IX,SP
0B0294 ED22E4              A  1032    	LEA	HL,IX+%FFFFFFE4
0B0297 F9                  A  1033    	LD	SP,HL
                           A  1034    ;   91	    int row, col;
                           A  1035    ;   92	    char* rowPtr;
                           A  1036    ;   93		char* oppositeRowPtr;
                           A  1037    ;   94		char* tempRow = (char*)malloc(width
                           A  1038    .LINE 94
                           A  1039    
0B0298 DD2709              A  1040    	LD	HL,(IX+%9)
0B029B 29                  A  1041    	ADD	HL,HL
0B029C 29                  A  1042    	ADD	HL,HL
0B029D E5                  A  1043    	PUSH	HL
0B029E DD77E4              A  1044    	LD	(IX+%FFFFFFE4),A
0B02A1 CD C7 3D 0B         A  1045    	CALL	_malloc
0B02A5 DD7EE4              A  1046    	LD	A,(IX+%FFFFFFE4)
0B02A8 C1                  A  1047    	POP	BC
0B02A9 DD2FFA              A  1048    	LD	(IX+%FFFFFFFA),HL
                           A  1049    ;   95	
                           A  1050    ;   96	    //Iterate over each row
                           A  1051    ;   97	    for (row = 0; row < height / 2; row
                           A  1052    .LINE 97
                           A  1053    
0B02AC 01000000            A  1054    	LD	BC,0
0B02B0 DD0FF1              A  1055    	LD	(IX+%FFFFFFF1),BC
0B02B3 C3 6B 04 0B         A  1056    	JR	L_24
0B02B7                     A  1057    L_22:
                           A  1058    ;   98	        rowPtr = buffer + row * width *
                           A  1059    .LINE 98
                           A  1060    
0B02B7 DD27F1              A  1061    	LD	HL,(IX+%FFFFFFF1)
0B02BA DD0709              A  1062    	LD	BC,(IX+%9)
0B02BD CD 5F 47 0B         A  1063    	CALL	__imuls
0B02C1 29                  A  1064    	ADD	HL,HL
0B02C2 29                  A  1065    	ADD	HL,HL
0B02C3 DD0706              A  1066    	LD	BC,(IX+%6)
0B02C6 09                  A  1067    	ADD	HL,BC
0B02C7 DD2FF4              A  1068    	LD	(IX+%FFFFFFF4),HL
                           A  1069    ;   99	        oppositeRowPtr = buffer + (heig
                           A  1070    .LINE 99
                           A  1071    
0B02CA DD07F1              A  1072    	LD	BC,(IX+%FFFFFFF1)
0B02CD DD270C              A  1073    	LD	HL,(IX+%C)
0B02D0 B7                  A  1074    	OR	A,A
0B02D1 ED42                A  1075    	SBC	HL,BC
0B02D3 2B                  A  1076    	DEC	HL
0B02D4 DD0709              A  1077    	LD	BC,(IX+%9)
0B02D7 CD 5F 47 0B         A  1078    	CALL	__imuls
0B02DB 29                  A  1079    	ADD	HL,HL
0B02DC 29                  A  1080    	ADD	HL,HL
0B02DD DD0706              A  1081    	LD	BC,(IX+%6)
0B02E0 09                  A  1082    	ADD	HL,BC
0B02E1 DD2FF7              A  1083    	LD	(IX+%FFFFFFF7),HL
                           A  1084    ;  100	
                           A  1085    ;  101	        //Swap bytes within each row (B
                           A  1086    ;  102	        for (col = 0; col < width; col+
                           A  1087    .LINE 102
                           A  1088    
0B02E4 01000000            A  1089    	LD	BC,0
0B02E8 DD0FFD              A  1090    	LD	(IX+%FFFFFFFD),BC
0B02EB C3 4D 04 0B         A  1091    	JR	L_21
0B02EF                     A  1092    L_19:
                           A  1093    ;  103	            tempRow[col * 4] = opposite
                           A  1094    .LINE 103
                           A  1095    
0B02EF DD27FD              A  1096    	LD	HL,(IX+%FFFFFFFD)
0B02F2 29                  A  1097    	ADD	HL,HL
0B02F3 29                  A  1098    	ADD	HL,HL
0B02F4 E5C1                A  1099    	LD	BC,HL
0B02F6 DD27FD              A  1100    	LD	HL,(IX+%FFFFFFFD)
0B02F9 29                  A  1101    	ADD	HL,HL
0B02FA 29                  A  1102    	ADD	HL,HL
0B02FB DD17F7              A  1103    	LD	DE,(IX+%FFFFFFF7)
0B02FE 19                  A  1104    	ADD	HL,DE
0B02FF E5FDE1              A  1105    	LD	IY,HL
0B0302 C5D1                A  1106    	LD	DE,BC
0B0304 DD27FA              A  1107    	LD	HL,(IX+%FFFFFFFA)
0B0307 19                  A  1108    	ADD	HL,DE
0B0308 FD7E02              A  1109    	LD	A,(IY+%2)
0B030B 77                  A  1110    	LD	(HL),A
                           A  1111    ;  104	            tempRow[col * 4 + 1] = oppo
                           A  1112    .LINE 104
                           A  1113    
0B030C DD27FD              A  1114    	LD	HL,(IX+%FFFFFFFD)
0B030F 29                  A  1115    	ADD	HL,HL
0B0310 29                  A  1116    	ADD	HL,HL
0B0311 E5D1                A  1117    	LD	DE,HL
0B0313 DD27F7              A  1118    	LD	HL,(IX+%FFFFFFF7)
0B0316 09                  A  1119    	ADD	HL,BC
0B0317 E5FDE1              A  1120    	LD	IY,HL
0B031A D5C1                A  1121    	LD	BC,DE
0B031C DD27FA              A  1122    	LD	HL,(IX+%FFFFFFFA)
0B031F 09                  A  1123    	ADD	HL,BC
0B0320 23                  A  1124    	INC	HL
0B0321 FD7E01              A  1125    	LD	A,(IY+%1)
0B0324 77                  A  1126    	LD	(HL),A
                           A  1127    ;  105	            tempRow[col * 4 + 2] = oppo
                           A  1128    .LINE 105
                           A  1129    
0B0325 DD27FD              A  1130    	LD	HL,(IX+%FFFFFFFD)
0B0328 29                  A  1131    	ADD	HL,HL
0B0329 29                  A  1132    	ADD	HL,HL
0B032A E5C1                A  1133    	LD	BC,HL
0B032C DD27F7              A  1134    	LD	HL,(IX+%FFFFFFF7)
0B032F 19                  A  1135    	ADD	HL,DE
0B0330 E5FDE1              A  1136    	LD	IY,HL
0B0333 C5D1                A  1137    	LD	DE,BC
0B0335 DD27FA              A  1138    	LD	HL,(IX+%FFFFFFFA)
0B0338 19                  A  1139    	ADD	HL,DE
0B0339 23                  A  1140    	INC	HL
0B033A 23                  A  1141    	INC	HL
0B033B FD7E00              A  1142    	LD	A,(IY)
0B033E 77                  A  1143    	LD	(HL),A
                           A  1144    ;  106	            tempRow[col * 4 + 3] = oppo
                           A  1145    .LINE 106
                           A  1146    
0B033F DD27FD              A  1147    	LD	HL,(IX+%FFFFFFFD)
0B0342 29                  A  1148    	ADD	HL,HL
0B0343 29                  A  1149    	ADD	HL,HL
0B0344 E5D1                A  1150    	LD	DE,HL
0B0346 DD27F7              A  1151    	LD	HL,(IX+%FFFFFFF7)
0B0349 09                  A  1152    	ADD	HL,BC
0B034A E5FDE1              A  1153    	LD	IY,HL
0B034D DD2FEE              A  1154    	LD	(IX+%FFFFFFEE),HL	; spill
0B0350 ED2303              A  1155    	LEA	HL,IY+%3
0B0353 DD2FEB              A  1156    	LD	(IX+%FFFFFFEB),HL	; spill
0B0356 D5C1                A  1157    	LD	BC,DE
0B0358 DD27FA              A  1158    	LD	HL,(IX+%FFFFFFFA)
0B035B 09                  A  1159    	ADD	HL,BC
0B035C E5FDE1              A  1160    	LD	IY,HL
0B035F DD27EB              A  1161    	LD	HL,(IX+%FFFFFFEB)	; unspill
0B0362 7E                  A  1162    	LD	A,(HL)
0B0363 FD7703              A  1163    	LD	(IY+%3),A
                           A  1164    ;  107	
                           A  1165    ;  108	            oppositeRowPtr[col * 4] = r
                           A  1166    .LINE 108
                           A  1167    
0B0366 DD27FD              A  1168    	LD	HL,(IX+%FFFFFFFD)
0B0369 29                  A  1169    	ADD	HL,HL
0B036A 29                  A  1170    	ADD	HL,HL
0B036B E5C1                A  1171    	LD	BC,HL
0B036D DD27F4              A  1172    	LD	HL,(IX+%FFFFFFF4)
0B0370 19                  A  1173    	ADD	HL,DE
0B0371 E5FDE1              A  1174    	LD	IY,HL
0B0374 C5D1                A  1175    	LD	DE,BC
0B0376 DD27F7              A  1176    	LD	HL,(IX+%FFFFFFF7)
0B0379 19                  A  1177    	ADD	HL,DE
0B037A FD7E02              A  1178    	LD	A,(IY+%2)
0B037D 77                  A  1179    	LD	(HL),A
                           A  1180    ;  109	            oppositeRowPtr[col * 4 + 1]
                           A  1181    .LINE 109
                           A  1182    
0B037E DD27FD              A  1183    	LD	HL,(IX+%FFFFFFFD)
0B0381 29                  A  1184    	ADD	HL,HL
0B0382 29                  A  1185    	ADD	HL,HL
0B0383 E5D1                A  1186    	LD	DE,HL
0B0385 DD27F4              A  1187    	LD	HL,(IX+%FFFFFFF4)
0B0388 09                  A  1188    	ADD	HL,BC
0B0389 E5FDE1              A  1189    	LD	IY,HL
0B038C D5C1                A  1190    	LD	BC,DE
0B038E DD27F7              A  1191    	LD	HL,(IX+%FFFFFFF7)
0B0391 09                  A  1192    	ADD	HL,BC
0B0392 23                  A  1193    	INC	HL
0B0393 FD7E01              A  1194    	LD	A,(IY+%1)
0B0396 77                  A  1195    	LD	(HL),A
                           A  1196    ;  110	            oppositeRowPtr[col * 4 + 2]
                           A  1197    .LINE 110
                           A  1198    
0B0397 DD27FD              A  1199    	LD	HL,(IX+%FFFFFFFD)
0B039A 29                  A  1200    	ADD	HL,HL
0B039B 29                  A  1201    	ADD	HL,HL
0B039C E5C1                A  1202    	LD	BC,HL
0B039E DD27F4              A  1203    	LD	HL,(IX+%FFFFFFF4)
0B03A1 19                  A  1204    	ADD	HL,DE
0B03A2 E5FDE1              A  1205    	LD	IY,HL
0B03A5 C5D1                A  1206    	LD	DE,BC
0B03A7 DD27F7              A  1207    	LD	HL,(IX+%FFFFFFF7)
0B03AA 19                  A  1208    	ADD	HL,DE
0B03AB 23                  A  1209    	INC	HL
0B03AC 23                  A  1210    	INC	HL
0B03AD FD7E00              A  1211    	LD	A,(IY)
0B03B0 77                  A  1212    	LD	(HL),A
                           A  1213    ;  111	            oppositeRowPtr[col * 4 + 3]
                           A  1214    .LINE 111
                           A  1215    
0B03B1 DD27FD              A  1216    	LD	HL,(IX+%FFFFFFFD)
0B03B4 29                  A  1217    	ADD	HL,HL
0B03B5 29                  A  1218    	ADD	HL,HL
0B03B6 E5D1                A  1219    	LD	DE,HL
0B03B8 DD27F4              A  1220    	LD	HL,(IX+%FFFFFFF4)
0B03BB 09                  A  1221    	ADD	HL,BC
0B03BC E5FDE1              A  1222    	LD	IY,HL
0B03BF DD2FEE              A  1223    	LD	(IX+%FFFFFFEE),HL	; spill
0B03C2 ED2303              A  1224    	LEA	HL,IY+%3
0B03C5 DD2FE8              A  1225    	LD	(IX+%FFFFFFE8),HL	; spill
0B03C8 D5C1                A  1226    	LD	BC,DE
0B03CA DD27F7              A  1227    	LD	HL,(IX+%FFFFFFF7)
0B03CD 09                  A  1228    	ADD	HL,BC
0B03CE E5FDE1              A  1229    	LD	IY,HL
0B03D1 DD27E8              A  1230    	LD	HL,(IX+%FFFFFFE8)	; unspill
0B03D4 7E                  A  1231    	LD	A,(HL)
0B03D5 FD7703              A  1232    	LD	(IY+%3),A
                           A  1233    ;  112	
                           A  1234    ;  113	            rowPtr[col * 4] = tempRow[c
                           A  1235    .LINE 113
                           A  1236    
0B03D8 DD27FD              A  1237    	LD	HL,(IX+%FFFFFFFD)
0B03DB 29                  A  1238    	ADD	HL,HL
0B03DC 29                  A  1239    	ADD	HL,HL
0B03DD E5C1                A  1240    	LD	BC,HL
0B03DF DD27FA              A  1241    	LD	HL,(IX+%FFFFFFFA)
0B03E2 19                  A  1242    	ADD	HL,DE
0B03E3 E5FDE1              A  1243    	LD	IY,HL
0B03E6 C5D1                A  1244    	LD	DE,BC
0B03E8 DD27F4              A  1245    	LD	HL,(IX+%FFFFFFF4)
0B03EB 19                  A  1246    	ADD	HL,DE
0B03EC FD7E00              A  1247    	LD	A,(IY)
0B03EF 77                  A  1248    	LD	(HL),A
                           A  1249    ;  114	            rowPtr[col * 4 + 1] = tempR
                           A  1250    .LINE 114
                           A  1251    
0B03F0 DD27FD              A  1252    	LD	HL,(IX+%FFFFFFFD)
0B03F3 29                  A  1253    	ADD	HL,HL
0B03F4 29                  A  1254    	ADD	HL,HL
0B03F5 E5D1                A  1255    	LD	DE,HL
0B03F7 DD27FA              A  1256    	LD	HL,(IX+%FFFFFFFA)
0B03FA 09                  A  1257    	ADD	HL,BC
0B03FB E5FDE1              A  1258    	LD	IY,HL
0B03FE D5C1                A  1259    	LD	BC,DE
0B0400 DD27F4              A  1260    	LD	HL,(IX+%FFFFFFF4)
0B0403 09                  A  1261    	ADD	HL,BC
0B0404 23                  A  1262    	INC	HL
0B0405 FD7E01              A  1263    	LD	A,(IY+%1)
0B0408 77                  A  1264    	LD	(HL),A
                           A  1265    ;  115	            rowPtr[col * 4 + 2] = tempR
                           A  1266    .LINE 115
                           A  1267    
0B0409 DD27FD              A  1268    	LD	HL,(IX+%FFFFFFFD)
0B040C 29                  A  1269    	ADD	HL,HL
0B040D 29                  A  1270    	ADD	HL,HL
0B040E E5C1                A  1271    	LD	BC,HL
0B0410 DD27FA              A  1272    	LD	HL,(IX+%FFFFFFFA)
0B0413 19                  A  1273    	ADD	HL,DE
0B0414 E5FDE1              A  1274    	LD	IY,HL
0B0417 C5D1                A  1275    	LD	DE,BC
0B0419 DD27F4              A  1276    	LD	HL,(IX+%FFFFFFF4)
0B041C 19                  A  1277    	ADD	HL,DE
0B041D 23                  A  1278    	INC	HL
0B041E 23                  A  1279    	INC	HL
0B041F FD7E02              A  1280    	LD	A,(IY+%2)
0B0422 77                  A  1281    	LD	(HL),A
                           A  1282    ;  116	            rowPtr[col * 4 + 3] = tempR
                           A  1283    .LINE 116
                           A  1284    
0B0423 DD27FA              A  1285    	LD	HL,(IX+%FFFFFFFA)
0B0426 09                  A  1286    	ADD	HL,BC
0B0427 E5FDE1              A  1287    	LD	IY,HL
0B042A DD2FEE              A  1288    	LD	(IX+%FFFFFFEE),HL	; spill
0B042D ED2303              A  1289    	LEA	HL,IY+%3
0B0430 DD2FE5              A  1290    	LD	(IX+%FFFFFFE5),HL	; spill
0B0433 DD27FD              A  1291    	LD	HL,(IX+%FFFFFFFD)
0B0436 29                  A  1292    	ADD	HL,HL
0B0437 29                  A  1293    	ADD	HL,HL
0B0438 DD07F4              A  1294    	LD	BC,(IX+%FFFFFFF4)
0B043B 09                  A  1295    	ADD	HL,BC
0B043C E5FDE1              A  1296    	LD	IY,HL
0B043F DD27E5              A  1297    	LD	HL,(IX+%FFFFFFE5)	; unspill
0B0442 7E                  A  1298    	LD	A,(HL)
0B0443 FD7703              A  1299    	LD	(IY+%3),A
0B0446 DD07FD              A  1300    	LD	BC,(IX+%FFFFFFFD)
0B0449 03                  A  1301    	INC	BC
0B044A DD0FFD              A  1302    	LD	(IX+%FFFFFFFD),BC
                           A  1303    ;  117	        }
0B044D                     A  1304    L_21:
                           A  1305    .LINE 117
                           A  1306    
0B044D DD0709              A  1307    	LD	BC,(IX+%9)
0B0450 DD27FD              A  1308    	LD	HL,(IX+%FFFFFFFD)
0B0453 B7                  A  1309    	OR	A,A
0B0454 ED42                A  1310    	SBC	HL,BC
0B0456 FA 60 04 0B         A  1311    	JP	M,L__16
0B045A EA EF 02 0B         A  1312    	JP	PE,L_19
0B045E 18 04               A  1313    	JR	L__17
0B0460                     A  1314    L__16:
0B0460 E2 EF 02 0B         A  1315    	JP	PO,L_19
0B0464                     A  1316    L__17:
0B0464 DD07F1              A  1317    	LD	BC,(IX+%FFFFFFF1)
0B0467 03                  A  1318    	INC	BC
0B0468 DD0FF1              A  1319    	LD	(IX+%FFFFFFF1),BC
                           A  1320    ;  118	    }
0B046B                     A  1321    L_24:
                           A  1322    .LINE 118
                           A  1323    
0B046B 01020000            A  1324    	LD	BC,2
0B046F DD270C              A  1325    	LD	HL,(IX+%C)
0B0472 CD 9B 47 0B         A  1326    	CALL	__idivs
0B0476 E5C1                A  1327    	LD	BC,HL
0B0478 DD27F1              A  1328    	LD	HL,(IX+%FFFFFFF1)
0B047B B7                  A  1329    	OR	A,A
0B047C ED42                A  1330    	SBC	HL,BC
0B047E FA 88 04 0B         A  1331    	JP	M,L__18
0B0482 EA B7 02 0B         A  1332    	JP	PE,L_22
0B0486 18 04               A  1333    	JR	L__19
0B0488                     A  1334    L__18:
0B0488 E2 B7 02 0B         A  1335    	JP	PO,L_22
0B048C                     A  1336    L__19:
                           A  1337    ;  119		free(tempRow);
                           A  1338    .LINE 119
                           A  1339    
0B048C DD07FA              A  1340    	LD	BC,(IX+%FFFFFFFA)
0B048F C5                  A  1341    	PUSH	BC
0B0490 CD C2 3C 0B         A  1342    	CALL	_free
0B0494 C1                  A  1343    	POP	BC
                           A  1344    ;  120	}
                           A  1345    .LINE 120
                           A  1346    
0B0495 DDF9                A  1347    	LD	SP,IX
0B0497 DDE1                A  1348    	POP	IX
0B0499 C9                  A  1349    	RET	
                           A  1350    
                           A  1351    
                           A  1352    ;**************************** _twiddle_buffer *
                           A  1353    ;Name                         Addr/Register   S
                           A  1354    ;_free                               IMPORT  --
                           A  1355    ;_malloc                             IMPORT  --
                           A  1356    ;row                                  IX-15    
                           A  1357    ;rowPtr                               IX-12    
                           A  1358    ;oppositeRowPtr                        IX-9    
                           A  1359    ;tempRow                               IX-6    
                           A  1360    ;col                                   IX-3    
                           A  1361    ;height                               IX+12    
                           A  1362    ;width                                 IX+9    
                           A  1363    ;buffer                                IX+6    
                           A  1364    
                           A  1365    
                           A  1366    ; Stack Frame Size: 43 (bytes)
                           A  1367    ;       Spill Code: -3 (instruction)
                           A  1368    
                           A  1369    
                           A  1370    .ENDFUNC "twiddle_buffer",120,"_twiddle_buffer"
                           A  1371    ;  121	
                           A  1372    ;  122	void reorder(char *arr, uint16_t length
0B049A                     A  1373    _reorder:
                           A  1374    .DEFINE "_reorder"
                           A  1375    
                           A  1376    .VALUE _reorder
                           A  1377    
                           A  1378    .CLASS 2
                           A  1379    
                           A  1380    .TYPE 65
                           A  1381    
                           A  1382    .ENDEF
                           A  1383    
                           A  1384    .BEGFUNC "reorder",122,"_reorder"
                           A  1385    
                           A  1386    .LINE 122
                           A  1387    
                           A  1388    .DEFINE "arr"
                           A  1389    
                           A  1390    .CLASS 65
                           A  1391    
                           A  1392    .VALUE 6
                           A  1393    
                           A  1394    .TYPE 34
                           A  1395    
                           A  1396    .ENDEF
                           A  1397    
                           A  1398    .DEFINE "length"
                           A  1399    
                           A  1400    .CLASS 65
                           A  1401    
                           A  1402    .VALUE 9
                           A  1403    
                           A  1404    .TYPE 13
                           A  1405    
                           A  1406    .ENDEF
                           A  1407    
                           A  1408    .DEFINE "i"
                           A  1409    
                           A  1410    .CLASS 65
                           A  1411    
                           A  1412    .VALUE -2
                           A  1413    
                           A  1414    .TYPE 13
                           A  1415    
                           A  1416    .ENDEF
                           A  1417    
                           A  1418    .DEFINE "temp"
                           A  1419    
                           A  1420    .CLASS 65
                           A  1421    
                           A  1422    .VALUE -3
                           A  1423    
                           A  1424    .TYPE 12
                           A  1425    
                           A  1426    .ENDEF
                           A  1427    
0B049A DDE5                A  1428    	PUSH	IX
0B049C DD210000 00         A  1429    	LD	IX,0
0B04A1 DD39                A  1430    	ADD	IX,SP
0B04A3 C5                  A  1431    	PUSH	BC
0B04A4 C5                  A  1432    	PUSH	BC
                           A  1433    ;  123	    uint16_t i;
                           A  1434    ;  124		for (i = 0; i < length; i += 4) {
                           A  1435    .LINE 124
                           A  1436    
0B04A5 DD36FE00            A  1437    	LD	(IX+%FFFFFFFE),%0
0B04A9 DD36FF00            A  1438    	LD	(IX+%FFFFFFFF),%0
0B04AD 18 68               A  1439    	JR	L_30
0B04AF                     A  1440    L_28:
                           A  1441    ;  125	        if (i + 2 < length) {
                           A  1442    .LINE 125
                           A  1443    
0B04AF DD07FE              A  1444    	LD	BC,(IX+%FFFFFFFE)
0B04B2 CD 9E 40 0B         A  1445    	CALL	__stoiu
0B04B6 E5D1                A  1446    	LD	DE,HL
0B04B8 13                  A  1447    	INC	DE
0B04B9 13                  A  1448    	INC	DE
0B04BA DD0709              A  1449    	LD	BC,(IX+%9)
0B04BD CD 9E 40 0B         A  1450    	CALL	__stoiu
0B04C1 E5C1                A  1451    	LD	BC,HL
0B04C3 D5E1                A  1452    	LD	HL,DE
0B04C5 B7                  A  1453    	OR	A,A
0B04C6 ED42                A  1454    	SBC	HL,BC
0B04C8 F2 D2 04 0B         A  1455    	JP	P,L__23
0B04CC EA 0B 05 0B         A  1456    	JP	PE,L_29
0B04D0 18 04               A  1457    	JR	L__24
0B04D2                     A  1458    L__23:
0B04D2 E2 0B 05 0B         A  1459    	JP	PO,L_29
0B04D6                     A  1460    L__24:
                           A  1461    ;  126	            uint8_t temp = arr[i];
                           A  1462    .LINE 126
                           A  1463    
0B04D6 DD07FE              A  1464    	LD	BC,(IX+%FFFFFFFE)
0B04D9 CD 9E 40 0B         A  1465    	CALL	__stoiu
0B04DD DD0706              A  1466    	LD	BC,(IX+%6)
0B04E0 09                  A  1467    	ADD	HL,BC
0B04E1 DD2FFA              A  1468    	LD	(IX+%FFFFFFFA),HL
0B04E4 7E                  A  1469    	LD	A,(HL)
0B04E5 DD77FD              A  1470    	LD	(IX+%FFFFFFFD),A
                           A  1471    ;  127	            arr[i] = arr[i + 2];
                           A  1472    .LINE 127
                           A  1473    
0B04E8 DD31FA              A  1474    	LD	IY,(IX+%FFFFFFFA)
0B04EB DD07FE              A  1475    	LD	BC,(IX+%FFFFFFFE)
0B04EE CD 9E 40 0B         A  1476    	CALL	__stoiu
0B04F2 DD0706              A  1477    	LD	BC,(IX+%6)
0B04F5 09                  A  1478    	ADD	HL,BC
0B04F6 FD7E02              A  1479    	LD	A,(IY+%2)
0B04F9 77                  A  1480    	LD	(HL),A
                           A  1481    ;  128	            arr[i + 2] = temp;
                           A  1482    .LINE 128
                           A  1483    
0B04FA DD07FE              A  1484    	LD	BC,(IX+%FFFFFFFE)
0B04FD CD 9E 40 0B         A  1485    	CALL	__stoiu
0B0501 DD0706              A  1486    	LD	BC,(IX+%6)
0B0504 09                  A  1487    	ADD	HL,BC
0B0505 23                  A  1488    	INC	HL
0B0506 23                  A  1489    	INC	HL
0B0507 DD7EFD              A  1490    	LD	A,(IX+%FFFFFFFD)
0B050A 77                  A  1491    	LD	(HL),A
                           A  1492    ;  129	        }
                           A  1493    ;  130	    }
0B050B                     A  1494    L_29:
                           A  1495    .LINE 130
                           A  1496    
0B050B DD31FE              A  1497    	LD	IY,(IX+%FFFFFFFE)
0B050E ED2304              A  1498    	LEA	HL,IY+%4
0B0511 DD75FE              A  1499    	LD	(IX+%FFFFFFFE),L
0B0514 DD74FF              A  1500    	LD	(IX+%FFFFFFFF),H
0B0517                     A  1501    L_30:
0B0517 DD0709              A  1502    	LD	BC,(IX+%9)
0B051A DD27FE              A  1503    	LD	HL,(IX+%FFFFFFFE)
0B051D B7                  A  1504    	OR	A,A
0B051E 40ED42              A  1505    	SBC.SIS	HL,BC
0B0521 38 8C               A  1506    	JR	C,L_28
                           A  1507    ;  131	}
                           A  1508    .LINE 131
                           A  1509    
0B0523 DDF9                A  1510    	LD	SP,IX
0B0525 DDE1                A  1511    	POP	IX
0B0527 C9                  A  1512    	RET	
                           A  1513    
                           A  1514    
                           A  1515    ;**************************** _reorder ********
                           A  1516    ;Name                         Addr/Register   S
                           A  1517    ;temp                                  IX-3    
                           A  1518    ;i                                     IX-2    
                           A  1519    ;length                                IX+9    
                           A  1520    ;arr                                   IX+6    
                           A  1521    
                           A  1522    
                           A  1523    ; Stack Frame Size: 18 (bytes)
                           A  1524    ;       Spill Code: -3 (instruction)
                           A  1525    
                           A  1526    
                           A  1527    .ENDFUNC "reorder",131,"_reorder"
                           A  1528    ;  132	
                           A  1529    ;  133	void reorder_and_insert(char *arr, uint
0B0528                     A  1530    _reorder_and_insert:
                           A  1531    .DEFINE "_reorder_and_insert"
                           A  1532    
                           A  1533    .VALUE _reorder_and_insert
                           A  1534    
                           A  1535    .CLASS 2
                           A  1536    
                           A  1537    .TYPE 65
                           A  1538    
                           A  1539    .ENDEF
                           A  1540    
                           A  1541    .BEGFUNC "reorder_and_insert",133,"_reorder_and
                           A  1542    
                           A  1543    .LINE 133
                           A  1544    
                           A  1545    .DEFINE "arr"
                           A  1546    
                           A  1547    .CLASS 65
                           A  1548    
                           A  1549    .VALUE 6
                           A  1550    
                           A  1551    .TYPE 34
                           A  1552    
                           A  1553    .ENDEF
                           A  1554    
                           A  1555    .DEFINE "length"
                           A  1556    
                           A  1557    .CLASS 65
                           A  1558    
                           A  1559    .VALUE 9
                           A  1560    
                           A  1561    .TYPE 13
                           A  1562    
                           A  1563    .ENDEF
                           A  1564    
                           A  1565    .DEFINE "new_arr"
                           A  1566    
                           A  1567    .CLASS 65
                           A  1568    
                           A  1569    .VALUE 12
                           A  1570    
                           A  1571    .TYPE 290
                           A  1572    
                           A  1573    .ENDEF
                           A  1574    
                           A  1575    .DEFINE "new_length"
                           A  1576    
                           A  1577    .CLASS 65
                           A  1578    
                           A  1579    .VALUE 15
                           A  1580    
                           A  1581    .TYPE 45
                           A  1582    
                           A  1583    .ENDEF
                           A  1584    
                           A  1585    .DEFINE "insert_value"
                           A  1586    
                           A  1587    .CLASS 65
                           A  1588    
                           A  1589    .VALUE 18
                           A  1590    
                           A  1591    .TYPE 2
                           A  1592    
                           A  1593    .ENDEF
                           A  1594    
                           A  1595    .DEFINE "i"
                           A  1596    
                           A  1597    .CLASS 65
                           A  1598    
                           A  1599    .VALUE -2
                           A  1600    
                           A  1601    .TYPE 13
                           A  1602    
                           A  1603    .ENDEF
                           A  1604    
                           A  1605    .DEFINE "j"
                           A  1606    
                           A  1607    .CLASS 65
                           A  1608    
                           A  1609    .VALUE -4
                           A  1610    
                           A  1611    .TYPE 13
                           A  1612    
                           A  1613    .ENDEF
                           A  1614    
0B0528 DDE5                A  1615    	PUSH	IX
0B052A DD210000 00         A  1616    	LD	IX,0
0B052F DD39                A  1617    	ADD	IX,SP
0B0531 ED22ED              A  1618    	LEA	HL,IX+%FFFFFFED
0B0534 F9                  A  1619    	LD	SP,HL
                           A  1620    ;  134	
                           A  1621    ;  135		uint16_t i, j = 0;
                           A  1622    .LINE 135
                           A  1623    
0B0535 DD36FC00            A  1624    	LD	(IX+%FFFFFFFC),%0
0B0539 DD36FD00            A  1625    	LD	(IX+%FFFFFFFD),%0
                           A  1626    ;  136	    *new_length = (length / 3) * 4 + (l
                           A  1627    .LINE 136
                           A  1628    
0B053D DD0709              A  1629    	LD	BC,(IX+%9)
0B0540 CD 9E 40 0B         A  1630    	CALL	__stoiu
0B0544 01030000            A  1631    	LD	BC,3
0B0548 CD 9B 47 0B         A  1632    	CALL	__idivs
0B054C 29                  A  1633    	ADD	HL,HL
0B054D 29                  A  1634    	ADD	HL,HL
0B054E E5D1                A  1635    	LD	DE,HL
0B0550 DD0709              A  1636    	LD	BC,(IX+%9)
0B0553 CD 9E 40 0B         A  1637    	CALL	__stoiu
0B0557 01030000            A  1638    	LD	BC,3
0B055B CD 7A 3E 0B         A  1639    	CALL	__irems
0B055F 19                  A  1640    	ADD	HL,DE
0B0560 E5C1                A  1641    	LD	BC,HL
0B0562 DD270F              A  1642    	LD	HL,(IX+%F)
0B0565 71                  A  1643    	LD	(HL),C
0B0566 23                  A  1644    	INC	HL
0B0567 70                  A  1645    	LD	(HL),B
                           A  1646    ;  137	    *new_arr = (char *) malloc(*new_len
                           A  1647    .LINE 137
                           A  1648    
0B0568 DD270F              A  1649    	LD	HL,(IX+%F)
0B056B ED07                A  1650    	LD	BC,(HL)
0B056D CD 9E 40 0B         A  1651    	CALL	__stoiu
0B0571 E5                  A  1652    	PUSH	HL
0B0572 CD C7 3D 0B         A  1653    	CALL	_malloc
0B0576 C1                  A  1654    	POP	BC
0B0577 DD310C              A  1655    	LD	IY,(IX+%C)
0B057A FD2F00              A  1656    	LD	(IY),HL
                           A  1657    ;  138	
                           A  1658    ;  139	    for (i = 0; i < length; i += 3) {
                           A  1659    .LINE 139
                           A  1660    
0B057D DD36FE00            A  1661    	LD	(IX+%FFFFFFFE),%0
0B0581 DD36FF00            A  1662    	LD	(IX+%FFFFFFFF),%0
0B0585 C3 8E 06 0B         A  1663    	JR	L_42
0B0589                     A  1664    L_40:
                           A  1665    ;  140	        
                           A  1666    ;  141	        (*new_arr)[j] = (i + 2 < length
                           A  1667    .LINE 141
                           A  1668    
0B0589 DD07FE              A  1669    	LD	BC,(IX+%FFFFFFFE)
0B058C CD 9E 40 0B         A  1670    	CALL	__stoiu
0B0590 E5D1                A  1671    	LD	DE,HL
0B0592 13                  A  1672    	INC	DE
0B0593 13                  A  1673    	INC	DE
0B0594 DD0709              A  1674    	LD	BC,(IX+%9)
0B0597 CD 9E 40 0B         A  1675    	CALL	__stoiu
0B059B E5C1                A  1676    	LD	BC,HL
0B059D D5E1                A  1677    	LD	HL,DE
0B059F B7                  A  1678    	OR	A,A
0B05A0 ED42                A  1679    	SBC	HL,BC
0B05A2 F2 AC 05 0B         A  1680    	JP	P,L__29
0B05A6 EA C8 05 0B         A  1681    	JP	PE,L_34
0B05AA 18 04               A  1682    	JR	L__30
0B05AC                     A  1683    L__29:
0B05AC E2 C8 05 0B         A  1684    	JP	PO,L_34
0B05B0                     A  1685    L__30:
0B05B0 DD07FE              A  1686    	LD	BC,(IX+%FFFFFFFE)
0B05B3 CD 9E 40 0B         A  1687    	CALL	__stoiu
0B05B7 DD0706              A  1688    	LD	BC,(IX+%6)
0B05BA 09                  A  1689    	ADD	HL,BC
0B05BB 23                  A  1690    	INC	HL
0B05BC 23                  A  1691    	INC	HL
0B05BD 7E                  A  1692    	LD	A,(HL)
0B05BE 47                  A  1693    	LD	B,A
0B05BF 17ED62              A  1694    	SEXT	HL
0B05C2 68                  A  1695    	LD	L,B
0B05C3 DD2FF9              A  1696    	LD	(IX+%FFFFFFF9),HL
0B05C6 18 07               A  1697    	JR	L_35
0B05C8                     A  1698    L_34:
0B05C8 01000000            A  1699    	LD	BC,0
0B05CC DD0FF9              A  1700    	LD	(IX+%FFFFFFF9),BC
0B05CF                     A  1701    L_35:
0B05CF DD310C              A  1702    	LD	IY,(IX+%C)
0B05D2 DD07FC              A  1703    	LD	BC,(IX+%FFFFFFFC)
0B05D5 CD 9E 40 0B         A  1704    	CALL	__stoiu
0B05D9 FD0700              A  1705    	LD	BC,(IY)
0B05DC 09                  A  1706    	ADD	HL,BC
0B05DD DD2FF3              A  1707    	LD	(IX+%FFFFFFF3),HL
0B05E0 DD7EF9              A  1708    	LD	A,(IX+%FFFFFFF9)
0B05E3 DD27F3              A  1709    	LD	HL,(IX+%FFFFFFF3)
0B05E6 77                  A  1710    	LD	(HL),A
                           A  1711    ;  142	        (*new_arr)[j + 1] = (i + 1 < le
                           A  1712    .LINE 142
                           A  1713    
0B05E7 DD07FE              A  1714    	LD	BC,(IX+%FFFFFFFE)
0B05EA CD 9E 40 0B         A  1715    	CALL	__stoiu
0B05EE E5D1                A  1716    	LD	DE,HL
0B05F0 13                  A  1717    	INC	DE
0B05F1 DD0709              A  1718    	LD	BC,(IX+%9)
0B05F4 CD 9E 40 0B         A  1719    	CALL	__stoiu
0B05F8 E5C1                A  1720    	LD	BC,HL
0B05FA D5E1                A  1721    	LD	HL,DE
0B05FC B7                  A  1722    	OR	A,A
0B05FD ED42                A  1723    	SBC	HL,BC
0B05FF F2 09 06 0B         A  1724    	JP	P,L__31
0B0603 EA 24 06 0B         A  1725    	JP	PE,L_38
0B0607 18 04               A  1726    	JR	L__32
0B0609                     A  1727    L__31:
0B0609 E2 24 06 0B         A  1728    	JP	PO,L_38
0B060D                     A  1729    L__32:
0B060D DD07FE              A  1730    	LD	BC,(IX+%FFFFFFFE)
0B0610 CD 9E 40 0B         A  1731    	CALL	__stoiu
0B0614 DD0706              A  1732    	LD	BC,(IX+%6)
0B0617 09                  A  1733    	ADD	HL,BC
0B0618 23                  A  1734    	INC	HL
0B0619 7E                  A  1735    	LD	A,(HL)
0B061A 47                  A  1736    	LD	B,A
0B061B 17ED62              A  1737    	SEXT	HL
0B061E 68                  A  1738    	LD	L,B
0B061F DD2FF6              A  1739    	LD	(IX+%FFFFFFF6),HL
0B0622 18 07               A  1740    	JR	L_39
0B0624                     A  1741    L_38:
0B0624 01000000            A  1742    	LD	BC,0
0B0628 DD0FF6              A  1743    	LD	(IX+%FFFFFFF6),BC
0B062B                     A  1744    L_39:
0B062B DD7EF6              A  1745    	LD	A,(IX+%FFFFFFF6)
0B062E DD27F3              A  1746    	LD	HL,(IX+%FFFFFFF3)
0B0631 23                  A  1747    	INC	HL
0B0632 77                  A  1748    	LD	(HL),A
                           A  1749    ;  143	        (*new_arr)[j + 2] = arr[i];
                           A  1750    .LINE 143
                           A  1751    
0B0633 DD07FE              A  1752    	LD	BC,(IX+%FFFFFFFE)
0B0636 CD 9E 40 0B         A  1753    	CALL	__stoiu
0B063A DD0706              A  1754    	LD	BC,(IX+%6)
0B063D 09                  A  1755    	ADD	HL,BC
0B063E E5FDE1              A  1756    	LD	IY,HL
0B0641 DD270C              A  1757    	LD	HL,(IX+%C)
0B0644 DD2FED              A  1758    	LD	(IX+%FFFFFFED),HL	; spill
0B0647 DD07FC              A  1759    	LD	BC,(IX+%FFFFFFFC)
0B064A CD 9E 40 0B         A  1760    	CALL	__stoiu
0B064E DD2FF0              A  1761    	LD	(IX+%FFFFFFF0),HL	; spill
0B0651 DD27ED              A  1762    	LD	HL,(IX+%FFFFFFED)	; unspill
0B0654 ED07                A  1763    	LD	BC,(HL)
0B0656 DD27F0              A  1764    	LD	HL,(IX+%FFFFFFF0)	; unspill
0B0659 09                  A  1765    	ADD	HL,BC
0B065A 23                  A  1766    	INC	HL
0B065B 23                  A  1767    	INC	HL
0B065C FD7E00              A  1768    	LD	A,(IY)
0B065F 77                  A  1769    	LD	(HL),A
                           A  1770    ;  144	        
                           A  1771    ;  145	        (*new_arr)[j + 3] = 0xFF;
                           A  1772    .LINE 145
                           A  1773    
0B0660 DD310C              A  1774    	LD	IY,(IX+%C)
0B0663 DD07FC              A  1775    	LD	BC,(IX+%FFFFFFFC)
0B0666 CD 9E 40 0B         A  1776    	CALL	__stoiu
0B066A FD0700              A  1777    	LD	BC,(IY)
0B066D 09                  A  1778    	ADD	HL,BC
0B066E E5FDE1              A  1779    	LD	IY,HL
0B0671 ED2303              A  1780    	LEA	HL,IY+%3
0B0674 36FF                A  1781    	LD	(HL),%FF
                           A  1782    ;  146	
                           A  1783    ;  147	        j += 4;
                           A  1784    .LINE 147
                           A  1785    
0B0676 DD31FC              A  1786    	LD	IY,(IX+%FFFFFFFC)
0B0679 ED2304              A  1787    	LEA	HL,IY+%4
0B067C DD75FC              A  1788    	LD	(IX+%FFFFFFFC),L
0B067F DD74FD              A  1789    	LD	(IX+%FFFFFFFD),H
0B0682 DD31FE              A  1790    	LD	IY,(IX+%FFFFFFFE)
0B0685 ED2303              A  1791    	LEA	HL,IY+%3
0B0688 DD75FE              A  1792    	LD	(IX+%FFFFFFFE),L
0B068B DD74FF              A  1793    	LD	(IX+%FFFFFFFF),H
                           A  1794    ;  148	    }
0B068E                     A  1795    L_42:
                           A  1796    .LINE 148
                           A  1797    
0B068E DD0709              A  1798    	LD	BC,(IX+%9)
0B0691 DD27FE              A  1799    	LD	HL,(IX+%FFFFFFFE)
0B0694 B7                  A  1800    	OR	A,A
0B0695 40ED42              A  1801    	SBC.SIS	HL,BC
0B0698 DA 89 05 0B         A  1802    	JR	C,L_40
                           A  1803    ;  149		free(new_arr);
                           A  1804    .LINE 149
                           A  1805    
0B069C DD070C              A  1806    	LD	BC,(IX+%C)
0B069F C5                  A  1807    	PUSH	BC
0B06A0 CD C2 3C 0B         A  1808    	CALL	_free
0B06A4 C1                  A  1809    	POP	BC
                           A  1810    ;  150	}
                           A  1811    .LINE 150
                           A  1812    
0B06A5 DDF9                A  1813    	LD	SP,IX
0B06A7 DDE1                A  1814    	POP	IX
0B06A9 C9                  A  1815    	RET	
                           A  1816    
                           A  1817    
                           A  1818    ;**************************** _reorder_and_inse
                           A  1819    ;Name                         Addr/Register   S
                           A  1820    ;_free                               IMPORT  --
                           A  1821    ;_malloc                             IMPORT  --
                           A  1822    ;G_0                                  IX-13    
                           A  1823    ;temp36                               IX-10    
                           A  1824    ;temp32                                IX-7    
                           A  1825    ;j                                     IX-4    
                           A  1826    ;i                                     IX-2    
                           A  1827    ;insert_value                         IX+18    
                           A  1828    ;new_length                           IX+15    
                           A  1829    ;new_arr                              IX+12    
                           A  1830    ;length                                IX+9    
                           A  1831    ;arr                                   IX+6    
                           A  1832    
                           A  1833    
                           A  1834    ; Stack Frame Size: 40 (bytes)
                           A  1835    ;       Spill Code: -3 (instruction)
                           A  1836    
                           A  1837    
                           A  1838    .ENDFUNC "reorder_and_insert",150,"_reorder_and
                           A  1839    ;  151	
                           A  1840    ;  152	void generic8888_to_rgba2222(char *inpu
0B06AA                     A  1841    _generic8888_to_rgba2222:
                           A  1842    .DEFINE "_generic8888_to_rgba2222"
                           A  1843    
                           A  1844    .VALUE _generic8888_to_rgba2222
                           A  1845    
                           A  1846    .CLASS 2
                           A  1847    
                           A  1848    .TYPE 65
                           A  1849    
                           A  1850    .ENDEF
                           A  1851    
                           A  1852    .BEGFUNC "generic8888_to_rgba2222",152,"_generi
                           A  1853    
                           A  1854    .LINE 152
                           A  1855    
                           A  1856    .DEFINE "input"
                           A  1857    
                           A  1858    .CLASS 65
                           A  1859    
                           A  1860    .VALUE 6
                           A  1861    
                           A  1862    .TYPE 34
                           A  1863    
                           A  1864    .ENDEF
                           A  1865    
                           A  1866    .DEFINE "output"
                           A  1867    
                           A  1868    .CLASS 65
                           A  1869    
                           A  1870    .VALUE 9
                           A  1871    
                           A  1872    .TYPE 34
                           A  1873    
                           A  1874    .ENDEF
                           A  1875    
                           A  1876    .DEFINE "num_pixels"
                           A  1877    
                           A  1878    .CLASS 65
                           A  1879    
                           A  1880    .VALUE 12
                           A  1881    
                           A  1882    .TYPE 14
                           A  1883    
                           A  1884    .ENDEF
                           A  1885    
                           A  1886    .DEFINE "width"
                           A  1887    
                           A  1888    .CLASS 65
                           A  1889    
                           A  1890    .VALUE 15
                           A  1891    
                           A  1892    .TYPE 12
                           A  1893    
                           A  1894    .ENDEF
                           A  1895    
                           A  1896    .DEFINE "red_byte"
                           A  1897    
                           A  1898    .CLASS 65
                           A  1899    
                           A  1900    .VALUE 18
                           A  1901    
                           A  1902    .TYPE 2
                           A  1903    
                           A  1904    .ENDEF
                           A  1905    
                           A  1906    .DEFINE "green_byte"
                           A  1907    
                           A  1908    .CLASS 65
                           A  1909    
                           A  1910    .VALUE 21
                           A  1911    
                           A  1912    .TYPE 2
                           A  1913    
                           A  1914    .ENDEF
                           A  1915    
                           A  1916    .DEFINE "blue_byte"
                           A  1917    
                           A  1918    .CLASS 65
                           A  1919    
                           A  1920    .VALUE 24
                           A  1921    
                           A  1922    .TYPE 2
                           A  1923    
                           A  1924    .ENDEF
                           A  1925    
                           A  1926    .DEFINE "alpha_byte"
                           A  1927    
                           A  1928    .CLASS 65
                           A  1929    
                           A  1930    .VALUE 27
                           A  1931    
                           A  1932    .TYPE 2
                           A  1933    
                           A  1934    .ENDEF
                           A  1935    
                           A  1936    .DEFINE "input_ptr"
                           A  1937    
                           A  1938    .CLASS 65
                           A  1939    
                           A  1940    .VALUE -3
                           A  1941    
                           A  1942    .TYPE 34
                           A  1943    
                           A  1944    .ENDEF
                           A  1945    
                           A  1946    .DEFINE "output_ptr"
                           A  1947    
                           A  1948    .CLASS 65
                           A  1949    
                           A  1950    .VALUE -6
                           A  1951    
                           A  1952    .TYPE 34
                           A  1953    
                           A  1954    .ENDEF
                           A  1955    
                           A  1956    .DEFINE "r"
                           A  1957    
                           A  1958    .CLASS 65
                           A  1959    
                           A  1960    .VALUE -7
                           A  1961    
                           A  1962    .TYPE 12
                           A  1963    
                           A  1964    .ENDEF
                           A  1965    
                           A  1966    .DEFINE "g"
                           A  1967    
                           A  1968    .CLASS 65
                           A  1969    
                           A  1970    .VALUE -8
                           A  1971    
                           A  1972    .TYPE 12
                           A  1973    
                           A  1974    .ENDEF
                           A  1975    
                           A  1976    .DEFINE "b"
                           A  1977    
                           A  1978    .CLASS 65
                           A  1979    
                           A  1980    .VALUE -9
                           A  1981    
                           A  1982    .TYPE 12
                           A  1983    
                           A  1984    .ENDEF
                           A  1985    
                           A  1986    .DEFINE "a"
                           A  1987    
                           A  1988    .CLASS 65
                           A  1989    
                           A  1990    .VALUE -10
                           A  1991    
                           A  1992    .TYPE 12
                           A  1993    
                           A  1994    .ENDEF
                           A  1995    
0B06AA DDE5                A  1996    	PUSH	IX
0B06AC DD210000 00         A  1997    	LD	IX,0
0B06B1 DD39                A  1998    	ADD	IX,SP
0B06B3 ED22F3              A  1999    	LEA	HL,IX+%FFFFFFF3
0B06B6 F9                  A  2000    	LD	SP,HL
                           A  2001    ;  153	    char *input_ptr = input;
                           A  2002    .LINE 153
                           A  2003    
0B06B7 DD0706              A  2004    	LD	BC,(IX+%6)
0B06BA DD0FFD              A  2005    	LD	(IX+%FFFFFFFD),BC
                           A  2006    ;  154	    char *output_ptr = output;
                           A  2007    .LINE 154
                           A  2008    
0B06BD DD0709              A  2009    	LD	BC,(IX+%9)
0B06C0 DD0FFA              A  2010    	LD	(IX+%FFFFFFFA),BC
                           A  2011    ;  155	
                           A  2012    ;  156	    while (num_pixels--) {
                           A  2013    .LINE 156
                           A  2014    
0B06C3 C3 98 07 0B         A  2015    	JR	L_51
0B06C7                     A  2016    L_52:
                           A  2017    ;  157	        uint8_t r = input_ptr[red_byte]
                           A  2018    .LINE 157
                           A  2019    
0B06C7 DD7E12              A  2020    	LD	A,(IX+%12)
0B06CA 17ED62              A  2021    	SEXT	HL
0B06CD DD6E12              A  2022    	LD	L,(IX+%12)
0B06D0 DD07FD              A  2023    	LD	BC,(IX+%FFFFFFFD)
0B06D3 09                  A  2024    	ADD	HL,BC
0B06D4 7E                  A  2025    	LD	A,(HL)
0B06D5 DD77F9              A  2026    	LD	(IX+%FFFFFFF9),A
                           A  2027    ;  158	        uint8_t g = input_ptr[green_byt
                           A  2028    .LINE 158
                           A  2029    
0B06D8 DD7E15              A  2030    	LD	A,(IX+%15)
0B06DB 17ED62              A  2031    	SEXT	HL
0B06DE DD6E15              A  2032    	LD	L,(IX+%15)
0B06E1 DD07FD              A  2033    	LD	BC,(IX+%FFFFFFFD)
0B06E4 09                  A  2034    	ADD	HL,BC
0B06E5 7E                  A  2035    	LD	A,(HL)
0B06E6 DD77F8              A  2036    	LD	(IX+%FFFFFFF8),A
                           A  2037    ;  159	        uint8_t b = input_ptr[blue_byte
                           A  2038    .LINE 159
                           A  2039    
0B06E9 DD7E18              A  2040    	LD	A,(IX+%18)
0B06EC 17ED62              A  2041    	SEXT	HL
0B06EF DD6E18              A  2042    	LD	L,(IX+%18)
0B06F2 DD07FD              A  2043    	LD	BC,(IX+%FFFFFFFD)
0B06F5 09                  A  2044    	ADD	HL,BC
0B06F6 7E                  A  2045    	LD	A,(HL)
0B06F7 DD77F7              A  2046    	LD	(IX+%FFFFFFF7),A
                           A  2047    ;  160	        uint8_t a = (alpha_byte < 0) ? 
                           A  2048    .LINE 160
                           A  2049    
0B06FA DD7E1B              A  2050    	LD	A,(IX+%1B)
0B06FD B7                  A  2051    	OR	A,A
0B06FE F2 0B 07 0B         A  2052    	JP	P,L_48
0B0702 01FF0000            A  2053    	LD	BC,255
0B0706 DD0FF3              A  2054    	LD	(IX+%FFFFFFF3),BC
0B0709 18 16               A  2055    	JR	L_49
0B070B                     A  2056    L_48:
0B070B DD7E1B              A  2057    	LD	A,(IX+%1B)
0B070E 17ED62              A  2058    	SEXT	HL
0B0711 DD6E1B              A  2059    	LD	L,(IX+%1B)
0B0714 DD07FD              A  2060    	LD	BC,(IX+%FFFFFFFD)
0B0717 09                  A  2061    	ADD	HL,BC
0B0718 7E                  A  2062    	LD	A,(HL)
0B0719 47                  A  2063    	LD	B,A
0B071A 17ED62              A  2064    	SEXT	HL
0B071D 68                  A  2065    	LD	L,B
0B071E DD2FF3              A  2066    	LD	(IX+%FFFFFFF3),HL
0B0721                     A  2067    L_49:
0B0721 DD7EF3              A  2068    	LD	A,(IX+%FFFFFFF3)
0B0724 DD77F6              A  2069    	LD	(IX+%FFFFFFF6),A
                           A  2070    ;  161	
                           A  2071    ;  162			*output_ptr = ((r >> 6) & 0x03)
                           A  2072    ;  163	              (((g >> 6) & 0x03) << 2) 
                           A  2073    ;  164	              (((b >> 6) & 0x03) << 4) 
                           A  2074    ;  165	              (((a >> 6) & 0x03) << 6);
                           A  2075    .LINE 165
                           A  2076    
0B0727 DD7EF8              A  2077    	LD	A,(IX+%FFFFFFF8)
0B072A B7ED62              A  2078    	UEXT	HL
0B072D 6F                  A  2079    	LD	L,A
0B072E 3E06                A  2080    	LD	A,%6
0B0730 CD B2 3E 0B         A  2081    	CALL	__ishrs_b
0B0734 7D                  A  2082    	LD	A,L
0B0735 E603                A  2083    	AND	A,%3
0B0737 87                  A  2084    	ADD	A,A
0B0738 87                  A  2085    	ADD	A,A
0B0739 4F                  A  2086    	LD	C,A
0B073A DD7EF9              A  2087    	LD	A,(IX+%FFFFFFF9)
0B073D B7ED62              A  2088    	UEXT	HL
0B0740 6F                  A  2089    	LD	L,A
0B0741 3E06                A  2090    	LD	A,%6
0B0743 CD B2 3E 0B         A  2091    	CALL	__ishrs_b
0B0747 7D                  A  2092    	LD	A,L
0B0748 E603                A  2093    	AND	A,%3
0B074A 47                  A  2094    	LD	B,A
0B074B 79                  A  2095    	LD	A,C
0B074C B0                  A  2096    	OR	A,B
0B074D 4F                  A  2097    	LD	C,A
0B074E DD7EF7              A  2098    	LD	A,(IX+%FFFFFFF7)
0B0751 B7ED62              A  2099    	UEXT	HL
0B0754 6F                  A  2100    	LD	L,A
0B0755 3E06                A  2101    	LD	A,%6
0B0757 CD B2 3E 0B         A  2102    	CALL	__ishrs_b
0B075B 7D                  A  2103    	LD	A,L
0B075C E603                A  2104    	AND	A,%3
0B075E 87                  A  2105    	ADD	A,A
0B075F 87                  A  2106    	ADD	A,A
0B0760 87                  A  2107    	ADD	A,A
0B0761 87                  A  2108    	ADD	A,A
0B0762 47                  A  2109    	LD	B,A
0B0763 79                  A  2110    	LD	A,C
0B0764 B0                  A  2111    	OR	A,B
0B0765 57                  A  2112    	LD	D,A
0B0766 DD7EF6              A  2113    	LD	A,(IX+%FFFFFFF6)
0B0769 B7ED62              A  2114    	UEXT	HL
0B076C 6F                  A  2115    	LD	L,A
0B076D 3E06                A  2116    	LD	A,%6
0B076F CD B2 3E 0B         A  2117    	CALL	__ishrs_b
0B0773 7D                  A  2118    	LD	A,L
0B0774 E603                A  2119    	AND	A,%3
0B0776 0606                A  2120    	LD	B,%6
0B0778 CD DF 4A 0B         A  2121    	CALL	__bshl
0B077C 47                  A  2122    	LD	B,A
0B077D 7A                  A  2123    	LD	A,D
0B077E B0                  A  2124    	OR	A,B
0B077F DD27FA              A  2125    	LD	HL,(IX+%FFFFFFFA)
0B0782 77                  A  2126    	LD	(HL),A
                           A  2127    ;  166			output_ptr++;
                           A  2128    .LINE 166
                           A  2129    
0B0783 DD07FA              A  2130    	LD	BC,(IX+%FFFFFFFA)
0B0786 03                  A  2131    	INC	BC
0B0787 DD0FFA              A  2132    	LD	(IX+%FFFFFFFA),BC
                           A  2133    ;  167			
                           A  2134    ;  168			input_ptr += width;
                           A  2135    .LINE 168
                           A  2136    
0B078A DD7E0F              A  2137    	LD	A,(IX+%F)
0B078D B7ED62              A  2138    	UEXT	HL
0B0790 6F                  A  2139    	LD	L,A
0B0791 DD07FD              A  2140    	LD	BC,(IX+%FFFFFFFD)
0B0794 09                  A  2141    	ADD	HL,BC
0B0795 DD2FFD              A  2142    	LD	(IX+%FFFFFFFD),HL
                           A  2143    ;  169			
                           A  2144    ;  170	    }
0B0798                     A  2145    L_51:
                           A  2146    .LINE 170
                           A  2147    
0B0798 DD270C              A  2148    	LD	HL,(IX+%C)
0B079B DD310C              A  2149    	LD	IY,(IX+%C)
0B079E ED33FF              A  2150    	LEA	IY,IY+%FFFFFFFF
0B07A1 DD3E0C              A  2151    	LD	(IX+%C),IY
0B07A4 01000000            A  2152    	LD	BC,0
0B07A8 B7                  A  2153    	OR	A,A
0B07A9 ED42                A  2154    	SBC	HL,BC
0B07AB C2 C7 06 0B         A  2155    	JR	NZ,L_52
                           A  2156    ;  171	}
                           A  2157    .LINE 171
                           A  2158    
0B07AF DDF9                A  2159    	LD	SP,IX
0B07B1 DDE1                A  2160    	POP	IX
0B07B3 C9                  A  2161    	RET	
                           A  2162    
                           A  2163    
                           A  2164    ;**************************** _generic8888_to_r
                           A  2165    ;Name                         Addr/Register   S
                           A  2166    ;temp46                               IX-13    
                           A  2167    ;a                                    IX-10    
                           A  2168    ;b                                     IX-9    
                           A  2169    ;g                                     IX-8    
                           A  2170    ;r                                     IX-7    
                           A  2171    ;output_ptr                            IX-6    
                           A  2172    ;input_ptr                             IX-3    
                           A  2173    ;alpha_byte                           IX+27    
                           A  2174    ;blue_byte                            IX+24    
                           A  2175    ;green_byte                           IX+21    
                           A  2176    ;red_byte                             IX+18    
                           A  2177    ;width                                IX+15    
                           A  2178    ;num_pixels                           IX+12    
                           A  2179    ;output                                IX+9    
                           A  2180    ;input                                 IX+6    
                           A  2181    
                           A  2182    
                           A  2183    ; Stack Frame Size: 43 (bytes)
                           A  2184    ;       Spill Code: -3 (instruction)
                           A  2185    
                           A  2186    
                           A  2187    .ENDFUNC "generic8888_to_rgba2222",171,"_generi
                           A  2188    ;  172	
                           A  2189    ;  173	void generic8888_to_rgba8888(char *inpu
0B07B4                     A  2190    _generic8888_to_rgba8888:
                           A  2191    .DEFINE "_generic8888_to_rgba8888"
                           A  2192    
                           A  2193    .VALUE _generic8888_to_rgba8888
                           A  2194    
                           A  2195    .CLASS 2
                           A  2196    
                           A  2197    .TYPE 65
                           A  2198    
                           A  2199    .ENDEF
                           A  2200    
                           A  2201    .BEGFUNC "generic8888_to_rgba8888",173,"_generi
                           A  2202    
                           A  2203    .LINE 173
                           A  2204    
                           A  2205    .DEFINE "input"
                           A  2206    
                           A  2207    .CLASS 65
                           A  2208    
                           A  2209    .VALUE 6
                           A  2210    
                           A  2211    .TYPE 34
                           A  2212    
                           A  2213    .ENDEF
                           A  2214    
                           A  2215    .DEFINE "output"
                           A  2216    
                           A  2217    .CLASS 65
                           A  2218    
                           A  2219    .VALUE 9
                           A  2220    
                           A  2221    .TYPE 34
                           A  2222    
                           A  2223    .ENDEF
                           A  2224    
                           A  2225    .DEFINE "num_pixels"
                           A  2226    
                           A  2227    .CLASS 65
                           A  2228    
                           A  2229    .VALUE 12
                           A  2230    
                           A  2231    .TYPE 14
                           A  2232    
                           A  2233    .ENDEF
                           A  2234    
                           A  2235    .DEFINE "width"
                           A  2236    
                           A  2237    .CLASS 65
                           A  2238    
                           A  2239    .VALUE 15
                           A  2240    
                           A  2241    .TYPE 12
                           A  2242    
                           A  2243    .ENDEF
                           A  2244    
                           A  2245    .DEFINE "red_byte"
                           A  2246    
                           A  2247    .CLASS 65
                           A  2248    
                           A  2249    .VALUE 18
                           A  2250    
                           A  2251    .TYPE 2
                           A  2252    
                           A  2253    .ENDEF
                           A  2254    
                           A  2255    .DEFINE "green_byte"
                           A  2256    
                           A  2257    .CLASS 65
                           A  2258    
                           A  2259    .VALUE 21
                           A  2260    
                           A  2261    .TYPE 2
                           A  2262    
                           A  2263    .ENDEF
                           A  2264    
                           A  2265    .DEFINE "blue_byte"
                           A  2266    
                           A  2267    .CLASS 65
                           A  2268    
                           A  2269    .VALUE 24
                           A  2270    
                           A  2271    .TYPE 2
                           A  2272    
                           A  2273    .ENDEF
                           A  2274    
                           A  2275    .DEFINE "alpha_byte"
                           A  2276    
                           A  2277    .CLASS 65
                           A  2278    
                           A  2279    .VALUE 27
                           A  2280    
                           A  2281    .TYPE 2
                           A  2282    
                           A  2283    .ENDEF
                           A  2284    
                           A  2285    .DEFINE "input_ptr"
                           A  2286    
                           A  2287    .CLASS 65
                           A  2288    
                           A  2289    .VALUE -3
                           A  2290    
                           A  2291    .TYPE 34
                           A  2292    
                           A  2293    .ENDEF
                           A  2294    
                           A  2295    .DEFINE "channels"
                           A  2296    
                           A  2297    .CLASS 65
                           A  2298    
                           A  2299    .VALUE -6
                           A  2300    
                           A  2301    .TYPE 44
                           A  2302    
                           A  2303    .ENDEF
                           A  2304    
                           A  2305    .DEFINE "output_ptr"
                           A  2306    
                           A  2307    .CLASS 65
                           A  2308    
                           A  2309    .VALUE -9
                           A  2310    
                           A  2311    .TYPE 34
                           A  2312    
                           A  2313    .ENDEF
                           A  2314    
0B07B4 DDE5                A  2315    	PUSH	IX
0B07B6 DD210000 00         A  2316    	LD	IX,0
0B07BB DD39                A  2317    	ADD	IX,SP
0B07BD ED22F4              A  2318    	LEA	HL,IX+%FFFFFFF4
0B07C0 F9                  A  2319    	LD	SP,HL
                           A  2320    ;  174	    char *input_ptr = input;
                           A  2321    .LINE 174
                           A  2322    
0B07C1 DD0706              A  2323    	LD	BC,(IX+%6)
0B07C4 DD0FFD              A  2324    	LD	(IX+%FFFFFFFD),BC
                           A  2325    ;  175	    char *output_ptr = output;
                           A  2326    .LINE 175
                           A  2327    
0B07C7 DD0709              A  2328    	LD	BC,(IX+%9)
0B07CA DD0FF7              A  2329    	LD	(IX+%FFFFFFF7),BC
                           A  2330    ;  176	
                           A  2331    ;  177	    while (num_pixels--) {
                           A  2332    .LINE 177
                           A  2333    
0B07CD C3 5A 08 0B         A  2334    	JR	L_59
0B07D1                     A  2335    L_60:
                           A  2336    ;  178	        uint8_t *channels = (uint8_t *)
                           A  2337    .LINE 178
                           A  2338    
0B07D1 DD07F7              A  2339    	LD	BC,(IX+%FFFFFFF7)
0B07D4 DD0FFA              A  2340    	LD	(IX+%FFFFFFFA),BC
                           A  2341    ;  179					
                           A  2342    ;  180			channels[0] = input_ptr[red_byt
                           A  2343    .LINE 180
                           A  2344    
0B07D7 DD7E12              A  2345    	LD	A,(IX+%12)
0B07DA 17ED62              A  2346    	SEXT	HL
0B07DD DD6E12              A  2347    	LD	L,(IX+%12)
0B07E0 DD07FD              A  2348    	LD	BC,(IX+%FFFFFFFD)
0B07E3 09                  A  2349    	ADD	HL,BC
0B07E4 DD31FA              A  2350    	LD	IY,(IX+%FFFFFFFA)
0B07E7 7E                  A  2351    	LD	A,(HL)
0B07E8 FD7700              A  2352    	LD	(IY),A
                           A  2353    ;  181	        channels[1] = input_ptr[green_b
                           A  2354    .LINE 181
                           A  2355    
0B07EB DD7E15              A  2356    	LD	A,(IX+%15)
0B07EE 17ED62              A  2357    	SEXT	HL
0B07F1 DD6E15              A  2358    	LD	L,(IX+%15)
0B07F4 DD07FD              A  2359    	LD	BC,(IX+%FFFFFFFD)
0B07F7 09                  A  2360    	ADD	HL,BC
0B07F8 7E                  A  2361    	LD	A,(HL)
0B07F9 FD7701              A  2362    	LD	(IY+%1),A
                           A  2363    ;  182	        channels[2] = input_ptr[blue_by
                           A  2364    .LINE 182
                           A  2365    
0B07FC DD7E18              A  2366    	LD	A,(IX+%18)
0B07FF 17ED62              A  2367    	SEXT	HL
0B0802 DD6E18              A  2368    	LD	L,(IX+%18)
0B0805 DD07FD              A  2369    	LD	BC,(IX+%FFFFFFFD)
0B0808 09                  A  2370    	ADD	HL,BC
0B0809 7E                  A  2371    	LD	A,(HL)
0B080A FD7702              A  2372    	LD	(IY+%2),A
                           A  2373    ;  183	        channels[3] = (alpha_byte < 0) 
                           A  2374    .LINE 183
                           A  2375    
0B080D DD7E1B              A  2376    	LD	A,(IX+%1B)
0B0810 B7                  A  2377    	OR	A,A
0B0811 F2 1E 08 0B         A  2378    	JP	P,L_57
0B0815 01FF0000            A  2379    	LD	BC,255
0B0819 DD0FF4              A  2380    	LD	(IX+%FFFFFFF4),BC
0B081C 18 16               A  2381    	JR	L_58
0B081E                     A  2382    L_57:
0B081E DD7E1B              A  2383    	LD	A,(IX+%1B)
0B0821 17ED62              A  2384    	SEXT	HL
0B0824 DD6E1B              A  2385    	LD	L,(IX+%1B)
0B0827 DD07FD              A  2386    	LD	BC,(IX+%FFFFFFFD)
0B082A 09                  A  2387    	ADD	HL,BC
0B082B 7E                  A  2388    	LD	A,(HL)
0B082C 47                  A  2389    	LD	B,A
0B082D 17ED62              A  2390    	SEXT	HL
0B0830 68                  A  2391    	LD	L,B
0B0831 DD2FF4              A  2392    	LD	(IX+%FFFFFFF4),HL
0B0834                     A  2393    L_58:
0B0834 DD7EF4              A  2394    	LD	A,(IX+%FFFFFFF4)
0B0837 DD31FA              A  2395    	LD	IY,(IX+%FFFFFFFA)
0B083A ED2303              A  2396    	LEA	HL,IY+%3
0B083D 77                  A  2397    	LD	(HL),A
                           A  2398    ;  184	
                           A  2399    ;  185			output_ptr += width;
                           A  2400    .LINE 185
                           A  2401    
0B083E DD7E0F              A  2402    	LD	A,(IX+%F)
0B0841 B7ED62              A  2403    	UEXT	HL
0B0844 6F                  A  2404    	LD	L,A
0B0845 DD07F7              A  2405    	LD	BC,(IX+%FFFFFFF7)
0B0848 09                  A  2406    	ADD	HL,BC
0B0849 DD2FF7              A  2407    	LD	(IX+%FFFFFFF7),HL
                           A  2408    ;  186			
                           A  2409    ;  187			input_ptr += width;
                           A  2410    .LINE 187
                           A  2411    
0B084C DD7E0F              A  2412    	LD	A,(IX+%F)
0B084F B7ED62              A  2413    	UEXT	HL
0B0852 6F                  A  2414    	LD	L,A
0B0853 DD07FD              A  2415    	LD	BC,(IX+%FFFFFFFD)
0B0856 09                  A  2416    	ADD	HL,BC
0B0857 DD2FFD              A  2417    	LD	(IX+%FFFFFFFD),HL
                           A  2418    ;  188			
                           A  2419    ;  189	    }
0B085A                     A  2420    L_59:
                           A  2421    .LINE 189
                           A  2422    
0B085A DD270C              A  2423    	LD	HL,(IX+%C)
0B085D DD310C              A  2424    	LD	IY,(IX+%C)
0B0860 ED33FF              A  2425    	LEA	IY,IY+%FFFFFFFF
0B0863 DD3E0C              A  2426    	LD	(IX+%C),IY
0B0866 01000000            A  2427    	LD	BC,0
0B086A B7                  A  2428    	OR	A,A
0B086B ED42                A  2429    	SBC	HL,BC
0B086D C2 D1 07 0B         A  2430    	JR	NZ,L_60
                           A  2431    ;  190	}
                           A  2432    .LINE 190
                           A  2433    
0B0871 DDF9                A  2434    	LD	SP,IX
0B0873 DDE1                A  2435    	POP	IX
0B0875 C9                  A  2436    	RET	
                           A  2437    
                           A  2438    
                           A  2439    ;**************************** _generic8888_to_r
                           A  2440    ;Name                         Addr/Register   S
                           A  2441    ;temp55                               IX-12    
                           A  2442    ;output_ptr                            IX-9    
                           A  2443    ;channels                              IX-6    
                           A  2444    ;input_ptr                             IX-3    
                           A  2445    ;alpha_byte                           IX+27    
                           A  2446    ;blue_byte                            IX+24    
                           A  2447    ;green_byte                           IX+21    
                           A  2448    ;red_byte                             IX+18    
                           A  2449    ;width                                IX+15    
                           A  2450    ;num_pixels                           IX+12    
                           A  2451    ;output                                IX+9    
                           A  2452    ;input                                 IX+6    
                           A  2453    
                           A  2454    
                           A  2455    ; Stack Frame Size: 42 (bytes)
                           A  2456    ;       Spill Code: -3 (instruction)
                           A  2457    
                           A  2458    
                           A  2459    .ENDFUNC "generic8888_to_rgba8888",190,"_generi
                           A  2460    ;  191	
                           A  2461    ;  192	
                           A  2462    ;  193	int8_t getByte(uint32_t bitmask) {
0B0876                     A  2463    _getByte:
                           A  2464    .DEFINE "_getByte"
                           A  2465    
                           A  2466    .VALUE _getByte
                           A  2467    
                           A  2468    .CLASS 2
                           A  2469    
                           A  2470    .TYPE 66
                           A  2471    
                           A  2472    .ENDEF
                           A  2473    
                           A  2474    .BEGFUNC "getByte",193,"_getByte"
                           A  2475    
                           A  2476    .LINE 193
                           A  2477    
                           A  2478    .DEFINE "bitmask"
                           A  2479    
                           A  2480    .CLASS 65
                           A  2481    
                           A  2482    .VALUE 6
                           A  2483    
                           A  2484    .TYPE 15
                           A  2485    
                           A  2486    .ENDEF
                           A  2487    
0B0876 DDE5                A  2488    	PUSH	IX
0B0878 DD210000 00         A  2489    	LD	IX,0
0B087D DD39                A  2490    	ADD	IX,SP
                           A  2491    ;  194	
                           A  2492    ;  195	    if (bitmask & 0xFF) {
                           A  2493    .LINE 195
                           A  2494    
0B087F B7ED62              A  2495    	UEXT	HL
0B0882 DD6E06              A  2496    	LD	L,(IX+%6)
0B0885 5C                  A  2497    	LD	E,H
0B0886 01000000            A  2498    	LD	BC,0
0B088A AF                  A  2499    	XOR	A,A
0B088B CD DB 47 0B         A  2500    	CALL	__lcmpu
0B088F 28 03               A  2501    	JR	Z,L_68
                           A  2502    ;  196	        return 0;
                           A  2503    .LINE 196
                           A  2504    
0B0891 AF                  A  2505    	XOR	A,A
0B0892 18 56               A  2506    	JR	L_70
                           A  2507    ;  197	    }
                           A  2508    ;  198	    else if ((bitmask >> 8) & 0xFF) {
0B0894                     A  2509    L_68:
                           A  2510    .LINE 198
                           A  2511    
0B0894 DD0707              A  2512    	LD	BC,(IX+%7)
0B0897 B7ED62              A  2513    	UEXT	HL
0B089A 69                  A  2514    	LD	L,C
0B089B 5C                  A  2515    	LD	E,H
0B089C 01000000            A  2516    	LD	BC,0
0B08A0 AF                  A  2517    	XOR	A,A
0B08A1 CD DB 47 0B         A  2518    	CALL	__lcmpu
0B08A5 28 04               A  2519    	JR	Z,L_66
                           A  2520    ;  199	        return 1;
                           A  2521    .LINE 199
                           A  2522    
0B08A7 3E01                A  2523    	LD	A,%1
0B08A9 18 3F               A  2524    	JR	L_70
                           A  2525    ;  200	    }
                           A  2526    ;  201		else if ((bitmask >> 16) & 0xFF) {
0B08AB                     A  2527    L_66:
                           A  2528    .LINE 201
                           A  2529    
0B08AB B7ED62              A  2530    	UEXT	HL
0B08AE E5                  A  2531    	PUSH	HL
0B08AF DD0707              A  2532    	LD	BC,(IX+%7)
0B08B2 C5                  A  2533    	PUSH	BC
0B08B3 33                  A  2534    	INC	SP
0B08B4 C1                  A  2535    	POP	BC
0B08B5 33                  A  2536    	INC	SP
0B08B6 33                  A  2537    	INC	SP
0B08B7 B7ED62              A  2538    	UEXT	HL
0B08BA 69                  A  2539    	LD	L,C
0B08BB 5C                  A  2540    	LD	E,H
0B08BC 01000000            A  2541    	LD	BC,0
0B08C0 AF                  A  2542    	XOR	A,A
0B08C1 CD DB 47 0B         A  2543    	CALL	__lcmpu
0B08C5 28 04               A  2544    	JR	Z,L_64
                           A  2545    ;  202	        return 2;
                           A  2546    .LINE 202
                           A  2547    
0B08C7 3E02                A  2548    	LD	A,%2
0B08C9 18 1F               A  2549    	JR	L_70
                           A  2550    ;  203	    }
                           A  2551    ;  204	    else if ((bitmask >> 24) & 0xFF) {
0B08CB                     A  2552    L_64:
                           A  2553    .LINE 204
                           A  2554    
0B08CB DD7E09              A  2555    	LD	A,(IX+%9)
0B08CE B7ED62              A  2556    	UEXT	HL
0B08D1 6F                  A  2557    	LD	L,A
0B08D2 E5C1                A  2558    	LD	BC,HL
0B08D4 B7ED62              A  2559    	UEXT	HL
0B08D7 69                  A  2560    	LD	L,C
0B08D8 5C                  A  2561    	LD	E,H
0B08D9 01000000            A  2562    	LD	BC,0
0B08DD AF                  A  2563    	XOR	A,A
0B08DE CD DB 47 0B         A  2564    	CALL	__lcmpu
0B08E2 28 04               A  2565    	JR	Z,L_69
                           A  2566    ;  205	        return 3;
                           A  2567    .LINE 205
                           A  2568    
0B08E4 3E03                A  2569    	LD	A,%3
0B08E6 18 02               A  2570    	JR	L_70
                           A  2571    ;  206	    }
0B08E8                     A  2572    L_69:
                           A  2573    .LINE 206
                           A  2574    
                           A  2575    ;  207	
                           A  2576    ;  208	    return -1;
                           A  2577    .LINE 208
                           A  2578    
0B08E8 3EFF                A  2579    	LD	A,%FF
                           A  2580    ;  209	}
0B08EA                     A  2581    L_70:
                           A  2582    .LINE 209
                           A  2583    
0B08EA DDF9                A  2584    	LD	SP,IX
0B08EC DDE1                A  2585    	POP	IX
0B08EE C9                  A  2586    	RET	
                           A  2587    
                           A  2588    
                           A  2589    ;**************************** _getByte ********
                           A  2590    ;Name                         Addr/Register   S
                           A  2591    ;bitmask                               IX+6    
                           A  2592    
                           A  2593    
                           A  2594    ; Stack Frame Size: 12 (bytes)
                           A  2595    ;       Spill Code: -3 (instruction)
                           A  2596    
                           A  2597    
                           A  2598    .ENDFUNC "getByte",209,"_getByte"
                           A  2599    ;  210	
                           A  2600    ;  211	void print_bin(void* value, size_t size
0B08EF                     A  2601    _print_bin:
                           A  2602    .DEFINE "_print_bin"
                           A  2603    
                           A  2604    .VALUE _print_bin
                           A  2605    
                           A  2606    .CLASS 2
                           A  2607    
                           A  2608    .TYPE 65
                           A  2609    
                           A  2610    .ENDEF
                           A  2611    
                           A  2612    .BEGFUNC "print_bin",211,"_print_bin"
                           A  2613    
                           A  2614    .LINE 211
                           A  2615    
                           A  2616    .DEFINE "value"
                           A  2617    
                           A  2618    .CLASS 65
                           A  2619    
                           A  2620    .VALUE 6
                           A  2621    
                           A  2622    .TYPE 33
                           A  2623    
                           A  2624    .ENDEF
                           A  2625    
                           A  2626    .DEFINE "size"
                           A  2627    
                           A  2628    .CLASS 65
                           A  2629    
                           A  2630    .VALUE 9
                           A  2631    
                           A  2632    .TYPE 14
                           A  2633    
                           A  2634    .ENDEF
                           A  2635    
                           A  2636    .DEFINE "i"
                           A  2637    
                           A  2638    .CLASS 65
                           A  2639    
                           A  2640    .VALUE -3
                           A  2641    
                           A  2642    .TYPE 4
                           A  2643    
                           A  2644    .ENDEF
                           A  2645    
                           A  2646    .DEFINE "j"
                           A  2647    
                           A  2648    .CLASS 65
                           A  2649    
                           A  2650    .VALUE -6
                           A  2651    
                           A  2652    .TYPE 4
                           A  2653    
                           A  2654    .ENDEF
                           A  2655    
0B08EF DDE5                A  2656    	PUSH	IX
0B08F1 DD210000 00         A  2657    	LD	IX,0
0B08F6 DD39                A  2658    	ADD	IX,SP
0B08F8 C5                  A  2659    	PUSH	BC
0B08F9 C5                  A  2660    	PUSH	BC
                           A  2661    ;  212	    
                           A  2662    ;  213		int i, j;
                           A  2663    ;  214		unsigned char* bytes = (unsigned ch
                           A  2664    ;  215		
                           A  2665    ;  216		if (size == 0) {
                           A  2666    .LINE 216
                           A  2667    
0B08FA 01000000            A  2668    	LD	BC,0
0B08FE DD2709              A  2669    	LD	HL,(IX+%9)
0B0901 B7                  A  2670    	OR	A,A
0B0902 ED42                A  2671    	SBC	HL,BC
0B0904 20 17               A  2672    	JR	NZ,L_80
                           A  2673    ;  217	        printf("Error: Invalid size\n")
                           A  2674    .LINE 217
                           A  2675    
0B0906 01 A4 40 0B         A  2676    	LD	BC,___print_uputch
0B090A ED43 1B 4B 0B       A  2677    	LD	(___print_xputch),BC
0B090F 01 21 4B 0B         A  2678    	LD	BC,L__46
0B0913 C5                  A  2679    	PUSH	BC
0B0914 CD EC 3E 0B         A  2680    	CALL	___print_sendstring
0B0918 C1                  A  2681    	POP	BC
                           A  2682    ;  218	        return;
                           A  2683    .LINE 218
                           A  2684    
0B0919 C3 A3 09 0B         A  2685    	JR	L_81
                           A  2686    ;  219	    }
0B091D                     A  2687    L_80:
                           A  2688    .LINE 219
                           A  2689    
                           A  2690    ;  220	
                           A  2691    ;  221	    for (i = size - 1; i >= 0; i--) {
                           A  2692    .LINE 221
                           A  2693    
0B091D DD0709              A  2694    	LD	BC,(IX+%9)
0B0920 0B                  A  2695    	DEC	BC
0B0921 DD0FFD              A  2696    	LD	(IX+%FFFFFFFD),BC
0B0924 18 65               A  2697    	JR	L_79
0B0926                     A  2698    L_77:
                           A  2699    ;  222	        for (j = 7; j >= 0; j--) {
                           A  2700    .LINE 222
                           A  2701    
0B0926 01070000            A  2702    	LD	BC,7
0B092A DD0FFA              A  2703    	LD	(IX+%FFFFFFFA),BC
0B092D 18 3D               A  2704    	JR	L_76
0B092F                     A  2705    L_74:
                           A  2706    ;  223	            printf("%d", (bytes[i] >> j
                           A  2707    .LINE 223
                           A  2708    
0B092F 01 A4 40 0B         A  2709    	LD	BC,___print_uputch
0B0933 ED43 1B 4B 0B       A  2710    	LD	(___print_xputch),BC
0B0938 DD07FD              A  2711    	LD	BC,(IX+%FFFFFFFD)
0B093B DD2706              A  2712    	LD	HL,(IX+%6)
0B093E 09                  A  2713    	ADD	HL,BC
0B093F 7E                  A  2714    	LD	A,(HL)
0B0940 B7ED62              A  2715    	UEXT	HL
0B0943 6F                  A  2716    	LD	L,A
0B0944 DD07FA              A  2717    	LD	BC,(IX+%FFFFFFFA)
0B0947 CD BA 3E 0B         A  2718    	CALL	__ishrs
0B094B 7D                  A  2719    	LD	A,L
0B094C E601                A  2720    	AND	A,%1
0B094E B7ED62              A  2721    	UEXT	HL
0B0951 6F                  A  2722    	LD	L,A
0B0952 E5C1                A  2723    	LD	BC,HL
0B0954 CD D4 47 0B         A  2724    	CALL	__itol
0B0958 C5D1                A  2725    	LD	DE,BC
0B095A 4F                  A  2726    	LD	C,A
0B095B 0600                A  2727    	LD	B,%0
0B095D C5                  A  2728    	PUSH	BC
0B095E D5                  A  2729    	PUSH	DE
0B095F CD DC 41 0B         A  2730    	CALL	__u_itoa
0B0963 C1                  A  2731    	POP	BC
0B0964 C1                  A  2732    	POP	BC
0B0965 DD07FA              A  2733    	LD	BC,(IX+%FFFFFFFA)
0B0968 0B                  A  2734    	DEC	BC
0B0969 DD0FFA              A  2735    	LD	(IX+%FFFFFFFA),BC
                           A  2736    ;  224	        }
0B096C                     A  2737    L_76:
                           A  2738    .LINE 224
                           A  2739    
0B096C 01000000            A  2740    	LD	BC,0
0B0970 DD27FA              A  2741    	LD	HL,(IX+%FFFFFFFA)
0B0973 B7                  A  2742    	OR	A,A
0B0974 ED42                A  2743    	SBC	HL,BC
0B0976 F2 80 09 0B         A  2744    	JP	P,L__49
0B097A EA 2F 09 0B         A  2745    	JP	PE,L_74
0B097E 18 04               A  2746    	JR	L__50
0B0980                     A  2747    L__49:
0B0980 E2 2F 09 0B         A  2748    	JP	PO,L_74
0B0984                     A  2749    L__50:
0B0984 DD07FD              A  2750    	LD	BC,(IX+%FFFFFFFD)
0B0987 0B                  A  2751    	DEC	BC
0B0988 DD0FFD              A  2752    	LD	(IX+%FFFFFFFD),BC
                           A  2753    ;  225	    }
0B098B                     A  2754    L_79:
                           A  2755    .LINE 225
                           A  2756    
0B098B 01000000            A  2757    	LD	BC,0
0B098F DD27FD              A  2758    	LD	HL,(IX+%FFFFFFFD)
0B0992 B7                  A  2759    	OR	A,A
0B0993 ED42                A  2760    	SBC	HL,BC
0B0995 F2 9F 09 0B         A  2761    	JP	P,L__51
0B0999 EA 26 09 0B         A  2762    	JP	PE,L_77
0B099D 18 04               A  2763    	JR	L__52
0B099F                     A  2764    L__51:
0B099F E2 26 09 0B         A  2765    	JP	PO,L_77
0B09A3                     A  2766    L__52:
                           A  2767    ;  226	}
0B09A3                     A  2768    L_81:
                           A  2769    .LINE 226
                           A  2770    
0B09A3 DDF9                A  2771    	LD	SP,IX
0B09A5 DDE1                A  2772    	POP	IX
0B09A7 C9                  A  2773    	RET	
                           A  2774    
                           A  2775    
                           A  2776    ;**************************** _print_bin ******
                           A  2777    ;Name                         Addr/Register   S
                           A  2778    ;__u_itoa                            IMPORT  --
                           A  2779    ;___print_sendstring                 IMPORT  --
                           A  2780    ;___print_xputch                     IMPORT    
                           A  2781    ;___print_uputch                     IMPORT  --
                           A  2782    ;j                                     IX-6    
                           A  2783    ;i                                     IX-3    
                           A  2784    ;size                                  IX+9    
                           A  2785    ;value                                 IX+6    
                           A  2786    
                           A  2787    
                           A  2788    ; Stack Frame Size: 18 (bytes)
                           A  2789    ;       Spill Code: -3 (instruction)
                           A  2790    
                           A  2791    
                           A  2792    .ENDFUNC "print_bin",226,"_print_bin"
                           A  2793    	SEGMENT STRSECT
0B4B21                     A  2794    L__46:
0B4B21 4572726F 723A2049   A  2795    	DB	"Error: Invalid size"
0B4B29 6E76616C 69642073 
0B4B31 697A65 
0B4B34 0A00                A  2796    	DB	10,0
                           A  2797    	SEGMENT CODE
                           A  2798    ;  227	
                           A  2799    ;  228	
                           A  2800    ;  229	bmp_info get_info(const char * filename
0B09A8                     A  2801    _get_info:
                           A  2802    .DEFINE "_get_info"
                           A  2803    
                           A  2804    .VALUE _get_info
                           A  2805    
                           A  2806    .CLASS 2
                           A  2807    
                           A  2808    .TAG "NONAME6"
                           A  2809    
                           A  2810    .TYPE 72
                           A  2811    
                           A  2812    .ENDEF
                           A  2813    
                           A  2814    .BEGFUNC "get_info",229,"_get_info"
                           A  2815    
                           A  2816    .LINE 229
                           A  2817    
                           A  2818    .DEFINE "filename"
                           A  2819    
                           A  2820    .CLASS 65
                           A  2821    
                           A  2822    .VALUE 9
                           A  2823    
                           A  2824    .TYPE 194
                           A  2825    
                           A  2826    .ENDEF
                           A  2827    
                           A  2828    .DEFINE "main_header"
                           A  2829    
                           A  2830    .CLASS 65
                           A  2831    
                           A  2832    .VALUE -3
                           A  2833    
                           A  2834    .TYPE 34
                           A  2835    
                           A  2836    .ENDEF
                           A  2837    
                           A  2838    .DEFINE "file"
                           A  2839    
                           A  2840    .CLASS 65
                           A  2841    
                           A  2842    .VALUE -4
                           A  2843    
                           A  2844    .TYPE 12
                           A  2845    
                           A  2846    .ENDEF
                           A  2847    
                           A  2848    .DEFINE "redmask"
                           A  2849    
                           A  2850    .CLASS 65
                           A  2851    
                           A  2852    .VALUE -6
                           A  2853    
                           A  2854    .TYPE 13
                           A  2855    
                           A  2856    .ENDEF
                           A  2857    
                           A  2858    .DEFINE "greenmask"
                           A  2859    
                           A  2860    .CLASS 65
                           A  2861    
                           A  2862    .VALUE -8
                           A  2863    
                           A  2864    .TYPE 13
                           A  2865    
                           A  2866    .ENDEF
                           A  2867    
                           A  2868    .DEFINE "bluemask"
                           A  2869    
                           A  2870    .CLASS 65
                           A  2871    
                           A  2872    .VALUE -10
                           A  2873    
                           A  2874    .TYPE 13
                           A  2875    
                           A  2876    .ENDEF
                           A  2877    
                           A  2878    .DEFINE "alphamask"
                           A  2879    
                           A  2880    .CLASS 65
                           A  2881    
                           A  2882    .VALUE -12
                           A  2883    
                           A  2884    .TYPE 13
                           A  2885    
                           A  2886    .ENDEF
                           A  2887    
                           A  2888    .DEFINE "fo"
                           A  2889    
                           A  2890    .CLASS 65
                           A  2891    
                           A  2892    .VALUE -15
                           A  2893    
                           A  2894    .TAG "NONAME5"
                           A  2895    
                           A  2896    .TYPE 40
                           A  2897    
                           A  2898    .ENDEF
                           A  2899    
                           A  2900    .DEFINE "initial_header"
                           A  2901    
                           A  2902    .CLASS 65
                           A  2903    
                           A  2904    .VALUE -33
                           A  2905    
                           A  2906    .DIM 18
                           A  2907    
                           A  2908    .TYPE 98
                           A  2909    
                           A  2910    .ENDEF
                           A  2911    
                           A  2912    .DEFINE "bmp"
                           A  2913    
                           A  2914    .CLASS 65
                           A  2915    
                           A  2916    .VALUE -1106
                           A  2917    
                           A  2918    .TAG "NONAME6"
                           A  2919    
                           A  2920    .TYPE 8
                           A  2921    
                           A  2922    .ENDEF
                           A  2923    
0B09A8 DDE5                A  2924    	PUSH	IX
0B09AA DD210000 00         A  2925    	LD	IX,0
0B09AF DD39                A  2926    	ADD	IX,SP
0B09B1 21AEFBFF            A  2927    	LD	HL,-1106
0B09B5 39                  A  2928    	ADD	HL,SP
0B09B6 F9                  A  2929    	LD	SP,HL
                           A  2930    ;  230	
                           A  2931    ;  231		uint8_t file;
                           A  2932    ;  232		FIL * fo;
                           A  2933    ;  233		bmp_info bmp;
                           A  2934    ;  234		char initial_header[18];
                           A  2935    ;  235		char *main_header;
                           A  2936    ;  236		
                           A  2937    ;  237		memset(&bmp, 0, sizeof(bmp));	
                           A  2938    .LINE 237
                           A  2939    
0B09B7 01310400            A  2940    	LD	BC,1073
0B09BB C5                  A  2941    	PUSH	BC
0B09BC 01000000            A  2942    	LD	BC,0
0B09C0 C5                  A  2943    	PUSH	BC
0B09C1 DDE5E1              A  2944    	LD	HL,IX
0B09C4 01AEFBFF            A  2945    	LD	BC,-1106
0B09C8 09                  A  2946    	ADD	HL,BC
0B09C9 E5C1                A  2947    	LD	BC,HL
0B09CB C5                  A  2948    	PUSH	BC
0B09CC CD 8F 48 0B         A  2949    	CALL	_memset
0B09D0 C1                  A  2950    	POP	BC
0B09D1 C1                  A  2951    	POP	BC
0B09D2 C1                  A  2952    	POP	BC
                           A  2953    ;  238		
                           A  2954    ;  239		file = mos_fopen(filename, fa_read)
                           A  2955    .LINE 239
                           A  2956    
0B09D3 01010000            A  2957    	LD	BC,1
0B09D7 C5                  A  2958    	PUSH	BC
0B09D8 DD0709              A  2959    	LD	BC,(IX+%9)
0B09DB C5                  A  2960    	PUSH	BC
0B09DC CD 11 3B 0B         A  2961    	CALL	_mos_fopen
0B09E0 C1                  A  2962    	POP	BC
0B09E1 C1                  A  2963    	POP	BC
0B09E2 DD77FC              A  2964    	LD	(IX+%FFFFFFFC),A
                           A  2965    ;  240		fo = (FIL * ) mos_getfil(file);
                           A  2966    .LINE 240
                           A  2967    
0B09E5 DD4EFC              A  2968    	LD	C,(IX+%FFFFFFFC)
0B09E8 0600                A  2969    	LD	B,%0
0B09EA C5                  A  2970    	PUSH	BC
0B09EB CD 97 3C 0B         A  2971    	CALL	_mos_getfil
0B09EF C1                  A  2972    	POP	BC
0B09F0 DD2FF1              A  2973    	LD	(IX+%FFFFFFF1),HL
                           A  2974    ;  241		
                           A  2975    ;  242	    if (!file) {
                           A  2976    .LINE 242
                           A  2977    
0B09F3 DD7EFC              A  2978    	LD	A,(IX+%FFFFFFFC)
0B09F6 B7                  A  2979    	OR	A,A
0B09F7 20 40               A  2980    	JR	NZ,L_83
                           A  2981    ;  243	        printf("Error: could not open %
                           A  2982    .LINE 243
                           A  2983    
0B09F9 01 A4 40 0B         A  2984    	LD	BC,___print_uputch
0B09FD ED43 1B 4B 0B       A  2985    	LD	(___print_xputch),BC
0B0A02 01 36 4B 0B         A  2986    	LD	BC,L__55
0B0A06 C5                  A  2987    	PUSH	BC
0B0A07 CD EC 3E 0B         A  2988    	CALL	___print_sendstring
0B0A0B C1                  A  2989    	POP	BC
0B0A0C DD0709              A  2990    	LD	BC,(IX+%9)
0B0A0F C5                  A  2991    	PUSH	BC
0B0A10 CD EC 3E 0B         A  2992    	CALL	___print_sendstring
0B0A14 C1                  A  2993    	POP	BC
0B0A15 01 4D 4B 0B         A  2994    	LD	BC,L__56
0B0A19 C5                  A  2995    	PUSH	BC
0B0A1A CD EC 3E 0B         A  2996    	CALL	___print_sendstring
0B0A1E C1                  A  2997    	POP	BC
                           A  2998    ;  244	        return bmp;
                           A  2999    .LINE 244
                           A  3000    
0B0A1F ED2206              A  3001    	LEA	HL,IX+%6
0B0A22 ED17                A  3002    	LD	DE,(HL)
0B0A24 DDE5E1              A  3003    	LD	HL,IX
0B0A27 01AEFBFF            A  3004    	LD	BC,-1106
0B0A2B 09                  A  3005    	ADD	HL,BC
0B0A2C 01310400            A  3006    	LD	BC,1073
0B0A30 EDB0                A  3007    	LDIR	
0B0A32 DD2706              A  3008    	LD	HL,(IX+%6)
0B0A35 C3 D4 11 0B         A  3009    	JR	L_100
                           A  3010    ;  245	    }
0B0A39                     A  3011    L_83:
                           A  3012    .LINE 245
                           A  3013    
                           A  3014    ;  246	
                           A  3015    ;  247		mos_fread(file, initial_header, 14 
                           A  3016    .LINE 247
                           A  3017    
0B0A39 01120000            A  3018    	LD	BC,18
0B0A3D C5                  A  3019    	PUSH	BC
0B0A3E ED65DF              A  3020    	PEA	IX+%FFFFFFDF
0B0A41 DD4EFC              A  3021    	LD	C,(IX+%FFFFFFFC)
0B0A44 0600                A  3022    	LD	B,%0
0B0A46 C5                  A  3023    	PUSH	BC
0B0A47 CD 3E 3C 0B         A  3024    	CALL	_mos_fread
0B0A4B C1                  A  3025    	POP	BC
0B0A4C C1                  A  3026    	POP	BC
0B0A4D C1                  A  3027    	POP	BC
                           A  3028    ;  248		
                           A  3029    ;  249		bmp.pixels_offset = * (uint32_t * )
                           A  3030    .LINE 249
                           A  3031    
0B0A4E ED22E9              A  3032    	LEA	HL,IX+%FFFFFFE9
0B0A51 ED07                A  3033    	LD	BC,(HL)
0B0A53 23                  A  3034    	INC	HL
0B0A54 23                  A  3035    	INC	HL
0B0A55 23                  A  3036    	INC	HL
0B0A56 7E                  A  3037    	LD	A,(HL)
0B0A57 FD21B3FB FF         A  3038    	LD	IY,-1101
0B0A5C DDE5D1              A  3039    	LD	DE,IX
0B0A5F FD19                A  3040    	ADD	IY,DE
0B0A61 FD0F00              A  3041    	LD	(IY),BC
0B0A64 FD7703              A  3042    	LD	(IY+%3),A
                           A  3043    ;  250	    bmp.main_header_size = * (uint32_t 
                           A  3044    .LINE 250
                           A  3045    
0B0A67 ED22ED              A  3046    	LEA	HL,IX+%FFFFFFED
0B0A6A ED07                A  3047    	LD	BC,(HL)
0B0A6C 23                  A  3048    	INC	HL
0B0A6D 23                  A  3049    	INC	HL
0B0A6E 23                  A  3050    	INC	HL
0B0A6F 7E                  A  3051    	LD	A,(HL)
0B0A70 FD21BBFB FF         A  3052    	LD	IY,-1093
0B0A75 DDE5D1              A  3053    	LD	DE,IX
0B0A78 FD19                A  3054    	ADD	IY,DE
0B0A7A FD0F00              A  3055    	LD	(IY),BC
0B0A7D FD7703              A  3056    	LD	(IY+%3),A
                           A  3057    ;  251		
                           A  3058    ;  252		main_header = malloc(bmp.main_heade
                           A  3059    .LINE 252
                           A  3060    
0B0A80 21BBFBFF            A  3061    	LD	HL,-1093
0B0A84 DDE5C1              A  3062    	LD	BC,IX
0B0A87 09                  A  3063    	ADD	HL,BC
0B0A88 ED07                A  3064    	LD	BC,(HL)
0B0A8A C5                  A  3065    	PUSH	BC
0B0A8B CD C7 3D 0B         A  3066    	CALL	_malloc
0B0A8F C1                  A  3067    	POP	BC
0B0A90 DD2FFD              A  3068    	LD	(IX+%FFFFFFFD),HL
                           A  3069    ;  253		
                           A  3070    ;  254		mos_flseek(file, 14);
                           A  3071    .LINE 254
                           A  3072    
0B0A93 01000000            A  3073    	LD	BC,0
0B0A97 C5                  A  3074    	PUSH	BC
0B0A98 010E0000            A  3075    	LD	BC,14
0B0A9C C5                  A  3076    	PUSH	BC
0B0A9D DD4EFC              A  3077    	LD	C,(IX+%FFFFFFFC)
0B0AA0 0600                A  3078    	LD	B,%0
0B0AA2 C5                  A  3079    	PUSH	BC
0B0AA3 CD 78 3C 0B         A  3080    	CALL	_mos_flseek
0B0AA7 C1                  A  3081    	POP	BC
0B0AA8 C1                  A  3082    	POP	BC
0B0AA9 C1                  A  3083    	POP	BC
                           A  3084    ;  255		mos_fread(file, main_header, bmp.ma
                           A  3085    .LINE 255
                           A  3086    
0B0AAA 21BBFBFF            A  3087    	LD	HL,-1093
0B0AAE DDE5C1              A  3088    	LD	BC,IX
0B0AB1 09                  A  3089    	ADD	HL,BC
0B0AB2 ED07                A  3090    	LD	BC,(HL)
0B0AB4 C5                  A  3091    	PUSH	BC
0B0AB5 DD07FD              A  3092    	LD	BC,(IX+%FFFFFFFD)
0B0AB8 C5                  A  3093    	PUSH	BC
0B0AB9 DD4EFC              A  3094    	LD	C,(IX+%FFFFFFFC)
0B0ABC 0600                A  3095    	LD	B,%0
0B0ABE C5                  A  3096    	PUSH	BC
0B0ABF CD 3E 3C 0B         A  3097    	CALL	_mos_fread
0B0AC3 C1                  A  3098    	POP	BC
0B0AC4 C1                  A  3099    	POP	BC
0B0AC5 C1                  A  3100    	POP	BC
                           A  3101    ;  256		
                           A  3102    ;  257		bmp.bmp_width = *(int32_t *) & main
                           A  3103    .LINE 257
                           A  3104    
0B0AC6 DD31FD              A  3105    	LD	IY,(IX+%FFFFFFFD)
0B0AC9 ED2304              A  3106    	LEA	HL,IY+%4
0B0ACC ED07                A  3107    	LD	BC,(HL)
0B0ACE 21AEFBFF            A  3108    	LD	HL,-1106
0B0AD2 DDE5D1              A  3109    	LD	DE,IX
0B0AD5 19                  A  3110    	ADD	HL,DE
0B0AD6 71                  A  3111    	LD	(HL),C
0B0AD7 23                  A  3112    	INC	HL
0B0AD8 70                  A  3113    	LD	(HL),B
                           A  3114    ;  258		bmp.bmp_height = *(int32_t *) & mai
                           A  3115    .LINE 258
                           A  3116    
0B0AD9 ED2308              A  3117    	LEA	HL,IY+%8
0B0ADC ED07                A  3118    	LD	BC,(HL)
0B0ADE 21B0FBFF            A  3119    	LD	HL,-1104
0B0AE2 DDE5D1              A  3120    	LD	DE,IX
0B0AE5 19                  A  3121    	ADD	HL,DE
0B0AE6 71                  A  3122    	LD	(HL),C
0B0AE7 23                  A  3123    	INC	HL
0B0AE8 70                  A  3124    	LD	(HL),B
                           A  3125    ;  259		bmp.bmp_bitdepth = *(uint16_t *) & 
                           A  3126    .LINE 259
                           A  3127    
0B0AE9 ED230E              A  3128    	LEA	HL,IY+%E
0B0AEC 7E                  A  3129    	LD	A,(HL)
0B0AED 21B2FBFF            A  3130    	LD	HL,-1102
0B0AF1 DDE5C1              A  3131    	LD	BC,IX
0B0AF4 09                  A  3132    	ADD	HL,BC
0B0AF5 77                  A  3133    	LD	(HL),A
                           A  3134    ;  260		bmp.compression = *(uint32_t *) & m
                           A  3135    .LINE 260
                           A  3136    
0B0AF6 ED2310              A  3137    	LEA	HL,IY+%10
0B0AF9 ED07                A  3138    	LD	BC,(HL)
0B0AFB 23                  A  3139    	INC	HL
0B0AFC 23                  A  3140    	INC	HL
0B0AFD 23                  A  3141    	INC	HL
0B0AFE 7E                  A  3142    	LD	A,(HL)
0B0AFF FD21BFFB FF         A  3143    	LD	IY,-1089
0B0B04 DDE5D1              A  3144    	LD	DE,IX
0B0B07 FD19                A  3145    	ADD	IY,DE
0B0B09 FD0F00              A  3146    	LD	(IY),BC
0B0B0C FD7703              A  3147    	LD	(IY+%3),A
                           A  3148    ;  261		bmp.color_table_size = * (uint32_t 
                           A  3149    .LINE 261
                           A  3150    
0B0B0F DD31FD              A  3151    	LD	IY,(IX+%FFFFFFFD)
0B0B12 ED2320              A  3152    	LEA	HL,IY+%20
0B0B15 ED07                A  3153    	LD	BC,(HL)
0B0B17 23                  A  3154    	INC	HL
0B0B18 23                  A  3155    	INC	HL
0B0B19 23                  A  3156    	INC	HL
0B0B1A 7E                  A  3157    	LD	A,(HL)
0B0B1B FD21D3FB FF         A  3158    	LD	IY,-1069
0B0B20 DDE5D1              A  3159    	LD	DE,IX
0B0B23 FD19                A  3160    	ADD	IY,DE
0B0B25 FD0F00              A  3161    	LD	(IY),BC
0B0B28 FD7703              A  3162    	LD	(IY+%3),A
                           A  3163    ;  262	
                           A  3164    ;  263	    if (bmp.color_table_size == 0 && bm
                           A  3165    .LINE 263
                           A  3166    
0B0B2B FD21D3FB FF         A  3167    	LD	IY,-1069
0B0B30 DDE5C1              A  3168    	LD	BC,IX
0B0B33 FD09                A  3169    	ADD	IY,BC
0B0B35 FD2700              A  3170    	LD	HL,(IY)
0B0B38 FD5E03              A  3171    	LD	E,(IY+%3)
0B0B3B 01000000            A  3172    	LD	BC,0
0B0B3F AF                  A  3173    	XOR	A,A
0B0B40 CD DB 47 0B         A  3174    	CALL	__lcmpu
0B0B44 20 22               A  3175    	JR	NZ,L_87
0B0B46 21B2FBFF            A  3176    	LD	HL,-1102
0B0B4A DDE5C1              A  3177    	LD	BC,IX
0B0B4D 09                  A  3178    	ADD	HL,BC
0B0B4E 7E                  A  3179    	LD	A,(HL)
0B0B4F FE08                A  3180    	CP	A,%8
0B0B51 20 15               A  3181    	JR	NZ,L_87
                           A  3182    ;  264	        bmp.color_table_size = 256;
                           A  3183    .LINE 264
                           A  3184    
0B0B53 01000100            A  3185    	LD	BC,256
0B0B57 FD21D3FB FF         A  3186    	LD	IY,-1069
0B0B5C DDE5D1              A  3187    	LD	DE,IX
0B0B5F FD19                A  3188    	ADD	IY,DE
0B0B61 FD0F00              A  3189    	LD	(IY),BC
0B0B64 FD360300            A  3190    	LD	(IY+%3),%0
                           A  3191    ;  265	    }
0B0B68                     A  3192    L_87:
                           A  3193    .LINE 265
                           A  3194    
                           A  3195    ;  266	
                           A  3196    ;  267		if (bmp.color_table_size > 0) mos_f
                           A  3197    .LINE 267
                           A  3198    
0B0B68 FD21D3FB FF         A  3199    	LD	IY,-1069
0B0B6D DDE5C1              A  3200    	LD	BC,IX
0B0B70 FD09                A  3201    	ADD	IY,BC
0B0B72 FD0700              A  3202    	LD	BC,(IY)
0B0B75 FD7E03              A  3203    	LD	A,(IY+%3)
0B0B78 B7                  A  3204    	OR	A,A
0B0B79 ED62                A  3205    	SBC	HL,HL
0B0B7B 1E00                A  3206    	LD	E,%0
0B0B7D CD DB 47 0B         A  3207    	CALL	__lcmpu
0B0B81 30 25               A  3208    	JR	NC,L_88
0B0B83 21D3FBFF            A  3209    	LD	HL,-1069
0B0B87 DDE5C1              A  3210    	LD	BC,IX
0B0B8A 09                  A  3211    	ADD	HL,BC
0B0B8B ED27                A  3212    	LD	HL,(HL)
0B0B8D 29                  A  3213    	ADD	HL,HL
0B0B8E 29                  A  3214    	ADD	HL,HL
0B0B8F E5                  A  3215    	PUSH	HL
0B0B90 DDE5E1              A  3216    	LD	HL,IX
0B0B93 01D7FBFF            A  3217    	LD	BC,-1065
0B0B97 09                  A  3218    	ADD	HL,BC
0B0B98 E5C1                A  3219    	LD	BC,HL
0B0B9A C5                  A  3220    	PUSH	BC
0B0B9B DD4EFC              A  3221    	LD	C,(IX+%FFFFFFFC)
0B0B9E 0600                A  3222    	LD	B,%0
0B0BA0 C5                  A  3223    	PUSH	BC
0B0BA1 CD 3E 3C 0B         A  3224    	CALL	_mos_fread
0B0BA5 C1                  A  3225    	POP	BC
0B0BA6 C1                  A  3226    	POP	BC
0B0BA7 C1                  A  3227    	POP	BC
0B0BA8                     A  3228    L_88:
                           A  3229    ;  268		
                           A  3230    ;  269		bmp.row_padding = (4 - (bmp.bmp_wid
                           A  3231    .LINE 269
                           A  3232    
0B0BA8 21AEFBFF            A  3233    	LD	HL,-1106
0B0BAC DDE5C1              A  3234    	LD	BC,IX
0B0BAF 09                  A  3235    	ADD	HL,BC
0B0BB0 ED07                A  3236    	LD	BC,(HL)
0B0BB2 CD 9E 40 0B         A  3237    	CALL	__stoiu
0B0BB6 E5D1                A  3238    	LD	DE,HL
0B0BB8 21B2FBFF            A  3239    	LD	HL,-1102
0B0BBC DDE5C1              A  3240    	LD	BC,IX
0B0BBF 09                  A  3241    	ADD	HL,BC
0B0BC0 7E                  A  3242    	LD	A,(HL)
0B0BC1 B7ED62              A  3243    	UEXT	HL
0B0BC4 6F                  A  3244    	LD	L,A
0B0BC5 01080000            A  3245    	LD	BC,8
0B0BC9 CD 9B 47 0B         A  3246    	CALL	__idivs
0B0BCD E5C1                A  3247    	LD	BC,HL
0B0BCF D5E1                A  3248    	LD	HL,DE
0B0BD1 CD 5F 47 0B         A  3249    	CALL	__imuls
0B0BD5 01040000            A  3250    	LD	BC,4
0B0BD9 CD 7A 3E 0B         A  3251    	CALL	__irems
0B0BDD E5C1                A  3252    	LD	BC,HL
0B0BDF 21040000            A  3253    	LD	HL,4
0B0BE3 B7                  A  3254    	OR	A,A
0B0BE4 ED42                A  3255    	SBC	HL,BC
0B0BE6 01040000            A  3256    	LD	BC,4
0B0BEA CD 7A 3E 0B         A  3257    	CALL	__irems
0B0BEE DD75DB              A  3258    	LD	(IX+%FFFFFFDB),L
0B0BF1 DD74DC              A  3259    	LD	(IX+%FFFFFFDC),H
                           A  3260    ;  270		bmp.non_pad_row = bmp.bmp_width * b
                           A  3261    .LINE 270
                           A  3262    
0B0BF4 21AEFBFF            A  3263    	LD	HL,-1106
0B0BF8 DDE5C1              A  3264    	LD	BC,IX
0B0BFB 09                  A  3265    	ADD	HL,BC
0B0BFC ED07                A  3266    	LD	BC,(HL)
0B0BFE CD 9E 40 0B         A  3267    	CALL	__stoiu
0B0C02 E5D1                A  3268    	LD	DE,HL
0B0C04 21B2FBFF            A  3269    	LD	HL,-1102
0B0C08 DDE5C1              A  3270    	LD	BC,IX
0B0C0B 09                  A  3271    	ADD	HL,BC
0B0C0C 7E                  A  3272    	LD	A,(HL)
0B0C0D B7ED62              A  3273    	UEXT	HL
0B0C10 6F                  A  3274    	LD	L,A
0B0C11 E5C1                A  3275    	LD	BC,HL
0B0C13 D5E1                A  3276    	LD	HL,DE
0B0C15 CD 5F 47 0B         A  3277    	CALL	__imuls
0B0C19 01080000            A  3278    	LD	BC,8
0B0C1D CD 9B 47 0B         A  3279    	CALL	__idivs
0B0C21 DD75DD              A  3280    	LD	(IX+%FFFFFFDD),L
0B0C24 DD74DE              A  3281    	LD	(IX+%FFFFFFDE),H
                           A  3282    ;  271		
                           A  3283    ;  272		printf("Debug: BMP is %u x %u x %u,
                           A  3284    .LINE 272
                           A  3285    
0B0C27 01 A4 40 0B         A  3286    	LD	BC,___print_uputch
0B0C2B ED43 1B 4B 0B       A  3287    	LD	(___print_xputch),BC
0B0C30 01 51 4B 0B         A  3288    	LD	BC,L__60
0B0C34 C5                  A  3289    	PUSH	BC
0B0C35 CD EC 3E 0B         A  3290    	CALL	___print_sendstring
0B0C39 C1                  A  3291    	POP	BC
0B0C3A 3E75                A  3292    	LD	A,%75
0B0C3C 32 8F 4E 0B         A  3293    	LD	(___print_fmt+4),A
0B0C40 21AEFBFF            A  3294    	LD	HL,-1106
0B0C44 DDE5C1              A  3295    	LD	BC,IX
0B0C47 09                  A  3296    	ADD	HL,BC
0B0C48 ED07                A  3297    	LD	BC,(HL)
0B0C4A CD 9E 40 0B         A  3298    	CALL	__stoiu
0B0C4E E5C1                A  3299    	LD	BC,HL
0B0C50 CD D4 47 0B         A  3300    	CALL	__itol
0B0C54 C5D1                A  3301    	LD	DE,BC
0B0C56 4F                  A  3302    	LD	C,A
0B0C57 0600                A  3303    	LD	B,%0
0B0C59 C5                  A  3304    	PUSH	BC
0B0C5A D5                  A  3305    	PUSH	DE
0B0C5B CD 2A 41 0B         A  3306    	CALL	__u_uitoa
0B0C5F C1                  A  3307    	POP	BC
0B0C60 C1                  A  3308    	POP	BC
0B0C61 01 60 4B 0B         A  3309    	LD	BC,L__61
0B0C65 C5                  A  3310    	PUSH	BC
0B0C66 CD EC 3E 0B         A  3311    	CALL	___print_sendstring
0B0C6A C1                  A  3312    	POP	BC
0B0C6B 3E75                A  3313    	LD	A,%75
0B0C6D 32 8F 4E 0B         A  3314    	LD	(___print_fmt+4),A
0B0C71 21B0FBFF            A  3315    	LD	HL,-1104
0B0C75 DDE5C1              A  3316    	LD	BC,IX
0B0C78 09                  A  3317    	ADD	HL,BC
0B0C79 ED07                A  3318    	LD	BC,(HL)
0B0C7B CD 9E 40 0B         A  3319    	CALL	__stoiu
0B0C7F E5C1                A  3320    	LD	BC,HL
0B0C81 CD D4 47 0B         A  3321    	CALL	__itol
0B0C85 C5D1                A  3322    	LD	DE,BC
0B0C87 4F                  A  3323    	LD	C,A
0B0C88 0600                A  3324    	LD	B,%0
0B0C8A C5                  A  3325    	PUSH	BC
0B0C8B D5                  A  3326    	PUSH	DE
0B0C8C CD 2A 41 0B         A  3327    	CALL	__u_uitoa
0B0C90 C1                  A  3328    	POP	BC
0B0C91 C1                  A  3329    	POP	BC
0B0C92 01 64 4B 0B         A  3330    	LD	BC,L__62
0B0C96 C5                  A  3331    	PUSH	BC
0B0C97 CD EC 3E 0B         A  3332    	CALL	___print_sendstring
0B0C9B C1                  A  3333    	POP	BC
0B0C9C 3E75                A  3334    	LD	A,%75
0B0C9E 32 8F 4E 0B         A  3335    	LD	(___print_fmt+4),A
0B0CA2 21B2FBFF            A  3336    	LD	HL,-1102
0B0CA6 DDE5C1              A  3337    	LD	BC,IX
0B0CA9 09                  A  3338    	ADD	HL,BC
0B0CAA 7E                  A  3339    	LD	A,(HL)
0B0CAB B7ED62              A  3340    	UEXT	HL
0B0CAE 6F                  A  3341    	LD	L,A
0B0CAF E5C1                A  3342    	LD	BC,HL
0B0CB1 CD D4 47 0B         A  3343    	CALL	__itol
0B0CB5 C5D1                A  3344    	LD	DE,BC
0B0CB7 4F                  A  3345    	LD	C,A
0B0CB8 0600                A  3346    	LD	B,%0
0B0CBA C5                  A  3347    	PUSH	BC
0B0CBB D5                  A  3348    	PUSH	DE
0B0CBC CD 2A 41 0B         A  3349    	CALL	__u_uitoa
0B0CC0 C1                  A  3350    	POP	BC
0B0CC1 C1                  A  3351    	POP	BC
0B0CC2 01 68 4B 0B         A  3352    	LD	BC,L__63
0B0CC6 C5                  A  3353    	PUSH	BC
0B0CC7 CD EC 3E 0B         A  3354    	CALL	___print_sendstring
0B0CCB C1                  A  3355    	POP	BC
0B0CCC 3E75                A  3356    	LD	A,%75
0B0CCE 32 8F 4E 0B         A  3357    	LD	(___print_fmt+4),A
0B0CD2 FD21BFFB FF         A  3358    	LD	IY,-1089
0B0CD7 DDE5C1              A  3359    	LD	BC,IX
0B0CDA FD09                A  3360    	ADD	IY,BC
0B0CDC FD0700              A  3361    	LD	BC,(IY)
0B0CDF FD7E03              A  3362    	LD	A,(IY+%3)
0B0CE2 2600                A  3363    	LD	H,%0
0B0CE4 6F                  A  3364    	LD	L,A
0B0CE5 E5                  A  3365    	PUSH	HL
0B0CE6 C5                  A  3366    	PUSH	BC
0B0CE7 CD 2A 41 0B         A  3367    	CALL	__u_uitoa
0B0CEB C1                  A  3368    	POP	BC
0B0CEC C1                  A  3369    	POP	BC
0B0CED 01 7C 4B 0B         A  3370    	LD	BC,L__64
0B0CF1 C5                  A  3371    	PUSH	BC
0B0CF2 CD EC 3E 0B         A  3372    	CALL	___print_sendstring
0B0CF6 C1                  A  3373    	POP	BC
0B0CF7 3E75                A  3374    	LD	A,%75
0B0CF9 32 8F 4E 0B         A  3375    	LD	(___print_fmt+4),A
0B0CFD FD21BBFB FF         A  3376    	LD	IY,-1093
0B0D02 DDE5C1              A  3377    	LD	BC,IX
0B0D05 FD09                A  3378    	ADD	IY,BC
0B0D07 FD0700              A  3379    	LD	BC,(IY)
0B0D0A FD7E03              A  3380    	LD	A,(IY+%3)
0B0D0D 2600                A  3381    	LD	H,%0
0B0D0F 6F                  A  3382    	LD	L,A
0B0D10 E5                  A  3383    	PUSH	HL
0B0D11 C5                  A  3384    	PUSH	BC
0B0D12 CD 2A 41 0B         A  3385    	CALL	__u_uitoa
0B0D16 C1                  A  3386    	POP	BC
0B0D17 C1                  A  3387    	POP	BC
0B0D18 01 8C 4B 0B         A  3388    	LD	BC,L__65
0B0D1C C5                  A  3389    	PUSH	BC
0B0D1D CD EC 3E 0B         A  3390    	CALL	___print_sendstring
0B0D21 C1                  A  3391    	POP	BC
                           A  3392    ;  273	
                           A  3393    ;  274		if ((bmp.compression == 3) || (bmp.
                           A  3394    .LINE 274
                           A  3395    
0B0D22 FD21BFFB FF         A  3396    	LD	IY,-1089
0B0D27 DDE5C1              A  3397    	LD	BC,IX
0B0D2A FD09                A  3398    	ADD	IY,BC
0B0D2C FD2700              A  3399    	LD	HL,(IY)
0B0D2F FD5E03              A  3400    	LD	E,(IY+%3)
0B0D32 01030000            A  3401    	LD	BC,3
0B0D36 AF                  A  3402    	XOR	A,A
0B0D37 CD DB 47 0B         A  3403    	CALL	__lcmpu
0B0D3B 28 3A               A  3404    	JR	Z,L_98
0B0D3D FD21BFFB FF         A  3405    	LD	IY,-1089
0B0D42 DDE5C1              A  3406    	LD	BC,IX
0B0D45 FD09                A  3407    	ADD	IY,BC
0B0D47 FD2700              A  3408    	LD	HL,(IY)
0B0D4A FD5E03              A  3409    	LD	E,(IY+%3)
0B0D4D 01060000            A  3410    	LD	BC,6
0B0D51 AF                  A  3411    	XOR	A,A
0B0D52 CD DB 47 0B         A  3412    	CALL	__lcmpu
0B0D56 C2 B3 11 0B         A  3413    	JR	NZ,L_99
0B0D5A FD21BBFB FF         A  3414    	LD	IY,-1093
0B0D5F DDE5C1              A  3415    	LD	BC,IX
0B0D62 FD09                A  3416    	ADD	IY,BC
0B0D64 FD2700              A  3417    	LD	HL,(IY)
0B0D67 FD5E03              A  3418    	LD	E,(IY+%3)
0B0D6A 016C0000            A  3419    	LD	BC,108
0B0D6E AF                  A  3420    	XOR	A,A
0B0D6F CD DB 47 0B         A  3421    	CALL	__lcmpu
0B0D73 DA B3 11 0B         A  3422    	JR	C,L_99
0B0D77                     A  3423    L_98:
                           A  3424    ;  275			
                           A  3425    ;  276			if (bmp.bmp_bitdepth == 32) {
                           A  3426    .LINE 276
                           A  3427    
0B0D77 21B2FBFF            A  3428    	LD	HL,-1102
0B0D7B DDE5C1              A  3429    	LD	BC,IX
0B0D7E 09                  A  3430    	ADD	HL,BC
0B0D7F 7E                  A  3431    	LD	A,(HL)
0B0D80 FE20                A  3432    	CP	A,%20
0B0D82 C2 30 10 0B         A  3433    	JR	NZ,L_97
                           A  3434    ;  277								
                           A  3435    ;  278				bmp.redBitField = *(uint32_
                           A  3436    .LINE 278
                           A  3437    
0B0D86 DD31FD              A  3438    	LD	IY,(IX+%FFFFFFFD)
0B0D89 ED2328              A  3439    	LEA	HL,IY+%28
0B0D8C ED07                A  3440    	LD	BC,(HL)
0B0D8E 23                  A  3441    	INC	HL
0B0D8F 23                  A  3442    	INC	HL
0B0D90 23                  A  3443    	INC	HL
0B0D91 7E                  A  3444    	LD	A,(HL)
0B0D92 FD21C3FB FF         A  3445    	LD	IY,-1085
0B0D97 DDE5D1              A  3446    	LD	DE,IX
0B0D9A FD19                A  3447    	ADD	IY,DE
0B0D9C FD0F00              A  3448    	LD	(IY),BC
0B0D9F FD7703              A  3449    	LD	(IY+%3),A
                           A  3450    ;  279				bmp.red_pos = getByte(bmp.r
                           A  3451    .LINE 279
                           A  3452    
0B0DA2 FD21C3FB FF         A  3453    	LD	IY,-1085
0B0DA7 DDE5C1              A  3454    	LD	BC,IX
0B0DAA FD09                A  3455    	ADD	IY,BC
0B0DAC FD0700              A  3456    	LD	BC,(IY)
0B0DAF FD7E03              A  3457    	LD	A,(IY+%3)
0B0DB2 2600                A  3458    	LD	H,%0
0B0DB4 6F                  A  3459    	LD	L,A
0B0DB5 E5                  A  3460    	PUSH	HL
0B0DB6 C5                  A  3461    	PUSH	BC
0B0DB7 CD 76 08 0B         A  3462    	CALL	_getByte
0B0DBB C1                  A  3463    	POP	BC
0B0DBC C1                  A  3464    	POP	BC
0B0DBD DD77D7              A  3465    	LD	(IX+%FFFFFFD7),A
                           A  3466    ;  280				
                           A  3467    ;  281				bmp.greenBitField = *(uint3
                           A  3468    .LINE 281
                           A  3469    
0B0DC0 DD31FD              A  3470    	LD	IY,(IX+%FFFFFFFD)
0B0DC3 ED232C              A  3471    	LEA	HL,IY+%2C
0B0DC6 ED07                A  3472    	LD	BC,(HL)
0B0DC8 23                  A  3473    	INC	HL
0B0DC9 23                  A  3474    	INC	HL
0B0DCA 23                  A  3475    	INC	HL
0B0DCB 7E                  A  3476    	LD	A,(HL)
0B0DCC FD21C7FB FF         A  3477    	LD	IY,-1081
0B0DD1 DDE5D1              A  3478    	LD	DE,IX
0B0DD4 FD19                A  3479    	ADD	IY,DE
0B0DD6 FD0F00              A  3480    	LD	(IY),BC
0B0DD9 FD7703              A  3481    	LD	(IY+%3),A
                           A  3482    ;  282				bmp.green_pos = getByte(bmp
                           A  3483    .LINE 282
                           A  3484    
0B0DDC FD21C7FB FF         A  3485    	LD	IY,-1081
0B0DE1 DDE5C1              A  3486    	LD	BC,IX
0B0DE4 FD09                A  3487    	ADD	IY,BC
0B0DE6 FD0700              A  3488    	LD	BC,(IY)
0B0DE9 FD7E03              A  3489    	LD	A,(IY+%3)
0B0DEC 2600                A  3490    	LD	H,%0
0B0DEE 6F                  A  3491    	LD	L,A
0B0DEF E5                  A  3492    	PUSH	HL
0B0DF0 C5                  A  3493    	PUSH	BC
0B0DF1 CD 76 08 0B         A  3494    	CALL	_getByte
0B0DF5 C1                  A  3495    	POP	BC
0B0DF6 C1                  A  3496    	POP	BC
0B0DF7 DD77D8              A  3497    	LD	(IX+%FFFFFFD8),A
                           A  3498    ;  283				
                           A  3499    ;  284				bmp.blueBitField = *(uint32
                           A  3500    .LINE 284
                           A  3501    
0B0DFA DD31FD              A  3502    	LD	IY,(IX+%FFFFFFFD)
0B0DFD ED2330              A  3503    	LEA	HL,IY+%30
0B0E00 ED07                A  3504    	LD	BC,(HL)
0B0E02 23                  A  3505    	INC	HL
0B0E03 23                  A  3506    	INC	HL
0B0E04 23                  A  3507    	INC	HL
0B0E05 7E                  A  3508    	LD	A,(HL)
0B0E06 FD21CBFB FF         A  3509    	LD	IY,-1077
0B0E0B DDE5D1              A  3510    	LD	DE,IX
0B0E0E FD19                A  3511    	ADD	IY,DE
0B0E10 FD0F00              A  3512    	LD	(IY),BC
0B0E13 FD7703              A  3513    	LD	(IY+%3),A
                           A  3514    ;  285				bmp.blue_pos = getByte(bmp.
                           A  3515    .LINE 285
                           A  3516    
0B0E16 FD21CBFB FF         A  3517    	LD	IY,-1077
0B0E1B DDE5C1              A  3518    	LD	BC,IX
0B0E1E FD09                A  3519    	ADD	IY,BC
0B0E20 FD0700              A  3520    	LD	BC,(IY)
0B0E23 FD7E03              A  3521    	LD	A,(IY+%3)
0B0E26 2600                A  3522    	LD	H,%0
0B0E28 6F                  A  3523    	LD	L,A
0B0E29 E5                  A  3524    	PUSH	HL
0B0E2A C5                  A  3525    	PUSH	BC
0B0E2B CD 76 08 0B         A  3526    	CALL	_getByte
0B0E2F C1                  A  3527    	POP	BC
0B0E30 C1                  A  3528    	POP	BC
0B0E31 DD77D9              A  3529    	LD	(IX+%FFFFFFD9),A
                           A  3530    ;  286				
                           A  3531    ;  287				bmp.alphaBitField = *(uint3
                           A  3532    .LINE 287
                           A  3533    
0B0E34 DD31FD              A  3534    	LD	IY,(IX+%FFFFFFFD)
0B0E37 ED2334              A  3535    	LEA	HL,IY+%34
0B0E3A ED07                A  3536    	LD	BC,(HL)
0B0E3C 23                  A  3537    	INC	HL
0B0E3D 23                  A  3538    	INC	HL
0B0E3E 23                  A  3539    	INC	HL
0B0E3F 7E                  A  3540    	LD	A,(HL)
0B0E40 FD21CFFB FF         A  3541    	LD	IY,-1073
0B0E45 DDE5D1              A  3542    	LD	DE,IX
0B0E48 FD19                A  3543    	ADD	IY,DE
0B0E4A FD0F00              A  3544    	LD	(IY),BC
0B0E4D FD7703              A  3545    	LD	(IY+%3),A
                           A  3546    ;  288				bmp.alpha_pos = getByte(bmp
                           A  3547    .LINE 288
                           A  3548    
0B0E50 FD21CFFB FF         A  3549    	LD	IY,-1073
0B0E55 DDE5C1              A  3550    	LD	BC,IX
0B0E58 FD09                A  3551    	ADD	IY,BC
0B0E5A FD0700              A  3552    	LD	BC,(IY)
0B0E5D FD7E03              A  3553    	LD	A,(IY+%3)
0B0E60 2600                A  3554    	LD	H,%0
0B0E62 6F                  A  3555    	LD	L,A
0B0E63 E5                  A  3556    	PUSH	HL
0B0E64 C5                  A  3557    	PUSH	BC
0B0E65 CD 76 08 0B         A  3558    	CALL	_getByte
0B0E69 C1                  A  3559    	POP	BC
0B0E6A C1                  A  3560    	POP	BC
0B0E6B DD77DA              A  3561    	LD	(IX+%FFFFFFDA),A
                           A  3562    ;  289				
                           A  3563    ;  290				printf("Red bitfield:   ");
                           A  3564    .LINE 290
                           A  3565    
0B0E6E 01 A4 40 0B         A  3566    	LD	BC,___print_uputch
0B0E72 ED43 1B 4B 0B       A  3567    	LD	(___print_xputch),BC
0B0E77 01 8F 4B 0B         A  3568    	LD	BC,L__70
0B0E7B C5                  A  3569    	PUSH	BC
0B0E7C CD EC 3E 0B         A  3570    	CALL	___print_sendstring
0B0E80 C1                  A  3571    	POP	BC
0B0E81 01040000            A  3572    	LD	BC,4
0B0E85 C5                  A  3573    	PUSH	BC
0B0E86 DDE5E1              A  3574    	LD	HL,IX
0B0E89 01C3FBFF            A  3575    	LD	BC,-1085
0B0E8D 09                  A  3576    	ADD	HL,BC
0B0E8E E5C1                A  3577    	LD	BC,HL
0B0E90 C5                  A  3578    	PUSH	BC
0B0E91 CD EF 08 0B         A  3579    	CALL	_print_bin
0B0E95 C1                  A  3580    	POP	BC
0B0E96 C1                  A  3581    	POP	BC
0B0E97 01 A4 40 0B         A  3582    	LD	BC,___print_uputch
0B0E9B ED43 1B 4B 0B       A  3583    	LD	(___print_xputch),BC
0B0EA0 01 A0 4B 0B         A  3584    	LD	BC,L__71
0B0EA4 C5                  A  3585    	PUSH	BC
0B0EA5 CD EC 3E 0B         A  3586    	CALL	___print_sendstring
0B0EA9 C1                  A  3587    	POP	BC
0B0EAA 3E75                A  3588    	LD	A,%75
0B0EAC 32 8F 4E 0B         A  3589    	LD	(___print_fmt+4),A
0B0EB0 DD7ED7              A  3590    	LD	A,(IX+%FFFFFFD7)
0B0EB3 17ED62              A  3591    	SEXT	HL
0B0EB6 DD6ED7              A  3592    	LD	L,(IX+%FFFFFFD7)
0B0EB9 E5C1                A  3593    	LD	BC,HL
0B0EBB CD D4 47 0B         A  3594    	CALL	__itol
0B0EBF C5D1                A  3595    	LD	DE,BC
0B0EC1 4F                  A  3596    	LD	C,A
0B0EC2 0600                A  3597    	LD	B,%0
0B0EC4 C5                  A  3598    	PUSH	BC
0B0EC5 D5                  A  3599    	PUSH	DE
0B0EC6 CD 2A 41 0B         A  3600    	CALL	__u_uitoa
0B0ECA C1                  A  3601    	POP	BC
0B0ECB C1                  A  3602    	POP	BC
0B0ECC 01 A8 4B 0B         A  3603    	LD	BC,L__72
0B0ED0 C5                  A  3604    	PUSH	BC
0B0ED1 CD EC 3E 0B         A  3605    	CALL	___print_sendstring
0B0ED5 C1                  A  3606    	POP	BC
                           A  3607    ;  291				printf("Green bitfield: ");
                           A  3608    .LINE 291
                           A  3609    
0B0ED6 01 A4 40 0B         A  3610    	LD	BC,___print_uputch
0B0EDA ED43 1B 4B 0B       A  3611    	LD	(___print_xputch),BC
0B0EDF 01 B5 4B 0B         A  3612    	LD	BC,L__73
0B0EE3 C5                  A  3613    	PUSH	BC
0B0EE4 CD EC 3E 0B         A  3614    	CALL	___print_sendstring
0B0EE8 C1                  A  3615    	POP	BC
0B0EE9 01040000            A  3616    	LD	BC,4
0B0EED C5                  A  3617    	PUSH	BC
0B0EEE DDE5E1              A  3618    	LD	HL,IX
0B0EF1 01C7FBFF            A  3619    	LD	BC,-1081
0B0EF5 09                  A  3620    	ADD	HL,BC
0B0EF6 E5C1                A  3621    	LD	BC,HL
0B0EF8 C5                  A  3622    	PUSH	BC
0B0EF9 CD EF 08 0B         A  3623    	CALL	_print_bin
0B0EFD C1                  A  3624    	POP	BC
0B0EFE C1                  A  3625    	POP	BC
0B0EFF 01 A4 40 0B         A  3626    	LD	BC,___print_uputch
0B0F03 ED43 1B 4B 0B       A  3627    	LD	(___print_xputch),BC
0B0F08 01 C6 4B 0B         A  3628    	LD	BC,L__74
0B0F0C C5                  A  3629    	PUSH	BC
0B0F0D CD EC 3E 0B         A  3630    	CALL	___print_sendstring
0B0F11 C1                  A  3631    	POP	BC
0B0F12 3E75                A  3632    	LD	A,%75
0B0F14 32 8F 4E 0B         A  3633    	LD	(___print_fmt+4),A
0B0F18 DD7ED8              A  3634    	LD	A,(IX+%FFFFFFD8)
0B0F1B 17ED62              A  3635    	SEXT	HL
0B0F1E DD6ED8              A  3636    	LD	L,(IX+%FFFFFFD8)
0B0F21 E5C1                A  3637    	LD	BC,HL
0B0F23 CD D4 47 0B         A  3638    	CALL	__itol
0B0F27 C5D1                A  3639    	LD	DE,BC
0B0F29 4F                  A  3640    	LD	C,A
0B0F2A 0600                A  3641    	LD	B,%0
0B0F2C C5                  A  3642    	PUSH	BC
0B0F2D D5                  A  3643    	PUSH	DE
0B0F2E CD 2A 41 0B         A  3644    	CALL	__u_uitoa
0B0F32 C1                  A  3645    	POP	BC
0B0F33 C1                  A  3646    	POP	BC
0B0F34 01 CE 4B 0B         A  3647    	LD	BC,L__75
0B0F38 C5                  A  3648    	PUSH	BC
0B0F39 CD EC 3E 0B         A  3649    	CALL	___print_sendstring
0B0F3D C1                  A  3650    	POP	BC
                           A  3651    ;  292				printf("Blue bitfield:  ");
                           A  3652    .LINE 292
                           A  3653    
0B0F3E 01 A4 40 0B         A  3654    	LD	BC,___print_uputch
0B0F42 ED43 1B 4B 0B       A  3655    	LD	(___print_xputch),BC
0B0F47 01 DB 4B 0B         A  3656    	LD	BC,L__76
0B0F4B C5                  A  3657    	PUSH	BC
0B0F4C CD EC 3E 0B         A  3658    	CALL	___print_sendstring
0B0F50 C1                  A  3659    	POP	BC
0B0F51 01040000            A  3660    	LD	BC,4
0B0F55 C5                  A  3661    	PUSH	BC
0B0F56 DDE5E1              A  3662    	LD	HL,IX
0B0F59 01CBFBFF            A  3663    	LD	BC,-1077
0B0F5D 09                  A  3664    	ADD	HL,BC
0B0F5E E5C1                A  3665    	LD	BC,HL
0B0F60 C5                  A  3666    	PUSH	BC
0B0F61 CD EF 08 0B         A  3667    	CALL	_print_bin
0B0F65 C1                  A  3668    	POP	BC
0B0F66 C1                  A  3669    	POP	BC
0B0F67 01 A4 40 0B         A  3670    	LD	BC,___print_uputch
0B0F6B ED43 1B 4B 0B       A  3671    	LD	(___print_xputch),BC
0B0F70 01 EC 4B 0B         A  3672    	LD	BC,L__77
0B0F74 C5                  A  3673    	PUSH	BC
0B0F75 CD EC 3E 0B         A  3674    	CALL	___print_sendstring
0B0F79 C1                  A  3675    	POP	BC
0B0F7A 3E75                A  3676    	LD	A,%75
0B0F7C 32 8F 4E 0B         A  3677    	LD	(___print_fmt+4),A
0B0F80 DD7ED9              A  3678    	LD	A,(IX+%FFFFFFD9)
0B0F83 17ED62              A  3679    	SEXT	HL
0B0F86 DD6ED9              A  3680    	LD	L,(IX+%FFFFFFD9)
0B0F89 E5C1                A  3681    	LD	BC,HL
0B0F8B CD D4 47 0B         A  3682    	CALL	__itol
0B0F8F C5D1                A  3683    	LD	DE,BC
0B0F91 4F                  A  3684    	LD	C,A
0B0F92 0600                A  3685    	LD	B,%0
0B0F94 C5                  A  3686    	PUSH	BC
0B0F95 D5                  A  3687    	PUSH	DE
0B0F96 CD 2A 41 0B         A  3688    	CALL	__u_uitoa
0B0F9A C1                  A  3689    	POP	BC
0B0F9B C1                  A  3690    	POP	BC
0B0F9C 01 F4 4B 0B         A  3691    	LD	BC,L__78
0B0FA0 C5                  A  3692    	PUSH	BC
0B0FA1 CD EC 3E 0B         A  3693    	CALL	___print_sendstring
0B0FA5 C1                  A  3694    	POP	BC
                           A  3695    ;  293	
                           A  3696    ;  294				if (bmp.alpha_pos == -1) pr
                           A  3697    .LINE 294
                           A  3698    
0B0FA6 DD7EDA              A  3699    	LD	A,(IX+%FFFFFFDA)
0B0FA9 FEFF                A  3700    	CP	A,%FFFFFFFF
0B0FAB 20 17               A  3701    	JR	NZ,L_92
0B0FAD 01 A4 40 0B         A  3702    	LD	BC,___print_uputch
0B0FB1 ED43 1B 4B 0B       A  3703    	LD	(___print_xputch),BC
0B0FB6 01 01 4C 0B         A  3704    	LD	BC,L__80
0B0FBA C5                  A  3705    	PUSH	BC
0B0FBB CD EC 3E 0B         A  3706    	CALL	___print_sendstring
0B0FBF C1                  A  3707    	POP	BC
                           A  3708    ;  295				else { printf("Alpha bitfie
                           A  3709    .LINE 295
                           A  3710    
0B0FC0 C3 B3 11 0B         A  3711    	JR	L_99
0B0FC4                     A  3712    L_92:
0B0FC4 01 A4 40 0B         A  3713    	LD	BC,___print_uputch
0B0FC8 ED43 1B 4B 0B       A  3714    	LD	(___print_xputch),BC
0B0FCD 01 14 4C 0B         A  3715    	LD	BC,L__81
0B0FD1 C5                  A  3716    	PUSH	BC
0B0FD2 CD EC 3E 0B         A  3717    	CALL	___print_sendstring
0B0FD6 C1                  A  3718    	POP	BC
0B0FD7 01040000            A  3719    	LD	BC,4
0B0FDB C5                  A  3720    	PUSH	BC
0B0FDC DDE5E1              A  3721    	LD	HL,IX
0B0FDF 01CFFBFF            A  3722    	LD	BC,-1073
0B0FE3 09                  A  3723    	ADD	HL,BC
0B0FE4 E5C1                A  3724    	LD	BC,HL
0B0FE6 C5                  A  3725    	PUSH	BC
0B0FE7 CD EF 08 0B         A  3726    	CALL	_print_bin
0B0FEB C1                  A  3727    	POP	BC
0B0FEC C1                  A  3728    	POP	BC
0B0FED 01 A4 40 0B         A  3729    	LD	BC,___print_uputch
0B0FF1 ED43 1B 4B 0B       A  3730    	LD	(___print_xputch),BC
0B0FF6 01 25 4C 0B         A  3731    	LD	BC,L__82
0B0FFA C5                  A  3732    	PUSH	BC
0B0FFB CD EC 3E 0B         A  3733    	CALL	___print_sendstring
0B0FFF C1                  A  3734    	POP	BC
0B1000 3E75                A  3735    	LD	A,%75
0B1002 32 8F 4E 0B         A  3736    	LD	(___print_fmt+4),A
0B1006 DD7EDA              A  3737    	LD	A,(IX+%FFFFFFDA)
0B1009 17ED62              A  3738    	SEXT	HL
0B100C DD6EDA              A  3739    	LD	L,(IX+%FFFFFFDA)
0B100F E5C1                A  3740    	LD	BC,HL
0B1011 CD D4 47 0B         A  3741    	CALL	__itol
0B1015 C5D1                A  3742    	LD	DE,BC
0B1017 4F                  A  3743    	LD	C,A
0B1018 0600                A  3744    	LD	B,%0
0B101A C5                  A  3745    	PUSH	BC
0B101B D5                  A  3746    	PUSH	DE
0B101C CD 2A 41 0B         A  3747    	CALL	__u_uitoa
0B1020 C1                  A  3748    	POP	BC
0B1021 C1                  A  3749    	POP	BC
0B1022 01 2D 4C 0B         A  3750    	LD	BC,L__83
0B1026 C5                  A  3751    	PUSH	BC
0B1027 CD EC 3E 0B         A  3752    	CALL	___print_sendstring
0B102B C1                  A  3753    	POP	BC
                           A  3754    ;  296						
                           A  3755    ;  297			} else if (bmp.bmp_bitdepth == 
                           A  3756    .LINE 297
                           A  3757    
0B102C C3 B3 11 0B         A  3758    	JR	L_99
0B1030                     A  3759    L_97:
0B1030 21B2FBFF            A  3760    	LD	HL,-1102
0B1034 09                  A  3761    	ADD	HL,BC
0B1035 7E                  A  3762    	LD	A,(HL)
0B1036 FE10                A  3763    	CP	A,%10
0B1038 C2 B3 11 0B         A  3764    	JR	NZ,L_99
                           A  3765    ;  298				
                           A  3766    ;  299				uint16_t redmask, greenmask
                           A  3767    ;  300				
                           A  3768    ;  301				bmp.redBitField = *(uint32_
                           A  3769    .LINE 301
                           A  3770    
0B103C DD31FD              A  3771    	LD	IY,(IX+%FFFFFFFD)
0B103F ED2328              A  3772    	LEA	HL,IY+%28
0B1042 ED07                A  3773    	LD	BC,(HL)
0B1044 23                  A  3774    	INC	HL
0B1045 23                  A  3775    	INC	HL
0B1046 23                  A  3776    	INC	HL
0B1047 7E                  A  3777    	LD	A,(HL)
0B1048 FD21C3FB FF         A  3778    	LD	IY,-1085
0B104D DDE5D1              A  3779    	LD	DE,IX
0B1050 FD19                A  3780    	ADD	IY,DE
0B1052 FD0F00              A  3781    	LD	(IY),BC
0B1055 FD7703              A  3782    	LD	(IY+%3),A
                           A  3783    ;  302				redmask = (uint16_t)(bmp.re
                           A  3784    .LINE 302
                           A  3785    
0B1058 21C3FBFF            A  3786    	LD	HL,-1085
0B105C DDE5C1              A  3787    	LD	BC,IX
0B105F 09                  A  3788    	ADD	HL,BC
0B1060 ED27                A  3789    	LD	HL,(HL)
0B1062 DD75FA              A  3790    	LD	(IX+%FFFFFFFA),L
0B1065 DD74FB              A  3791    	LD	(IX+%FFFFFFFB),H
                           A  3792    ;  303				
                           A  3793    ;  304				bmp.greenBitField = *(uint3
                           A  3794    .LINE 304
                           A  3795    
0B1068 DD31FD              A  3796    	LD	IY,(IX+%FFFFFFFD)
0B106B ED232C              A  3797    	LEA	HL,IY+%2C
0B106E ED07                A  3798    	LD	BC,(HL)
0B1070 23                  A  3799    	INC	HL
0B1071 23                  A  3800    	INC	HL
0B1072 23                  A  3801    	INC	HL
0B1073 7E                  A  3802    	LD	A,(HL)
0B1074 FD21C7FB FF         A  3803    	LD	IY,-1081
0B1079 DDE5D1              A  3804    	LD	DE,IX
0B107C FD19                A  3805    	ADD	IY,DE
0B107E FD0F00              A  3806    	LD	(IY),BC
0B1081 FD7703              A  3807    	LD	(IY+%3),A
                           A  3808    ;  305				greenmask = (uint16_t)(bmp.
                           A  3809    .LINE 305
                           A  3810    
0B1084 21C7FBFF            A  3811    	LD	HL,-1081
0B1088 DDE5C1              A  3812    	LD	BC,IX
0B108B 09                  A  3813    	ADD	HL,BC
0B108C ED27                A  3814    	LD	HL,(HL)
0B108E DD75F8              A  3815    	LD	(IX+%FFFFFFF8),L
0B1091 DD74F9              A  3816    	LD	(IX+%FFFFFFF9),H
                           A  3817    ;  306				
                           A  3818    ;  307				bmp.blueBitField = *(uint32
                           A  3819    .LINE 307
                           A  3820    
0B1094 DD31FD              A  3821    	LD	IY,(IX+%FFFFFFFD)
0B1097 ED2330              A  3822    	LEA	HL,IY+%30
0B109A ED07                A  3823    	LD	BC,(HL)
0B109C 23                  A  3824    	INC	HL
0B109D 23                  A  3825    	INC	HL
0B109E 23                  A  3826    	INC	HL
0B109F 7E                  A  3827    	LD	A,(HL)
0B10A0 FD21CBFB FF         A  3828    	LD	IY,-1077
0B10A5 DDE5D1              A  3829    	LD	DE,IX
0B10A8 FD19                A  3830    	ADD	IY,DE
0B10AA FD0F00              A  3831    	LD	(IY),BC
0B10AD FD7703              A  3832    	LD	(IY+%3),A
                           A  3833    ;  308				bluemask = (uint16_t)(bmp.b
                           A  3834    .LINE 308
                           A  3835    
0B10B0 21CBFBFF            A  3836    	LD	HL,-1077
0B10B4 DDE5C1              A  3837    	LD	BC,IX
0B10B7 09                  A  3838    	ADD	HL,BC
0B10B8 ED27                A  3839    	LD	HL,(HL)
0B10BA DD75F6              A  3840    	LD	(IX+%FFFFFFF6),L
0B10BD DD74F7              A  3841    	LD	(IX+%FFFFFFF7),H
                           A  3842    ;  309				
                           A  3843    ;  310				bmp.alphaBitField = *(uint3
                           A  3844    .LINE 310
                           A  3845    
0B10C0 DD31FD              A  3846    	LD	IY,(IX+%FFFFFFFD)
0B10C3 ED2334              A  3847    	LEA	HL,IY+%34
0B10C6 ED07                A  3848    	LD	BC,(HL)
0B10C8 23                  A  3849    	INC	HL
0B10C9 23                  A  3850    	INC	HL
0B10CA 23                  A  3851    	INC	HL
0B10CB 7E                  A  3852    	LD	A,(HL)
0B10CC FD21CFFB FF         A  3853    	LD	IY,-1073
0B10D1 DDE5D1              A  3854    	LD	DE,IX
0B10D4 FD19                A  3855    	ADD	IY,DE
0B10D6 FD0F00              A  3856    	LD	(IY),BC
0B10D9 FD7703              A  3857    	LD	(IY+%3),A
                           A  3858    ;  311				alphamask = (uint16_t)(bmp.
                           A  3859    .LINE 311
                           A  3860    
0B10DC 21CFFBFF            A  3861    	LD	HL,-1073
0B10E0 DDE5C1              A  3862    	LD	BC,IX
0B10E3 09                  A  3863    	ADD	HL,BC
0B10E4 ED27                A  3864    	LD	HL,(HL)
0B10E6 DD75F4              A  3865    	LD	(IX+%FFFFFFF4),L
0B10E9 DD74F5              A  3866    	LD	(IX+%FFFFFFF5),H
                           A  3867    ;  312				
                           A  3868    ;  313				printf("Red bitfield:   ");
                           A  3869    .LINE 313
                           A  3870    
0B10EC 01 A4 40 0B         A  3871    	LD	BC,___print_uputch
0B10F0 ED43 1B 4B 0B       A  3872    	LD	(___print_xputch),BC
0B10F5 01 3A 4C 0B         A  3873    	LD	BC,L__85
0B10F9 C5                  A  3874    	PUSH	BC
0B10FA CD EC 3E 0B         A  3875    	CALL	___print_sendstring
0B10FE C1                  A  3876    	POP	BC
0B10FF 01020000            A  3877    	LD	BC,2
0B1103 C5                  A  3878    	PUSH	BC
0B1104 ED65FA              A  3879    	PEA	IX+%FFFFFFFA
0B1107 CD EF 08 0B         A  3880    	CALL	_print_bin
0B110B C1                  A  3881    	POP	BC
0B110C C1                  A  3882    	POP	BC
                           A  3883    ;  314				printf("\r\nGreen bitfield:
                           A  3884    .LINE 314
                           A  3885    
0B110D 01 A4 40 0B         A  3886    	LD	BC,___print_uputch
0B1111 ED43 1B 4B 0B       A  3887    	LD	(___print_xputch),BC
0B1116 01 4B 4C 0B         A  3888    	LD	BC,L__86
0B111A C5                  A  3889    	PUSH	BC
0B111B CD EC 3E 0B         A  3890    	CALL	___print_sendstring
0B111F C1                  A  3891    	POP	BC
0B1120 01020000            A  3892    	LD	BC,2
0B1124 C5                  A  3893    	PUSH	BC
0B1125 ED65F8              A  3894    	PEA	IX+%FFFFFFF8
0B1128 CD EF 08 0B         A  3895    	CALL	_print_bin
0B112C C1                  A  3896    	POP	BC
0B112D C1                  A  3897    	POP	BC
                           A  3898    ;  315				printf("\r\nBlue bitfield: 
                           A  3899    .LINE 315
                           A  3900    
0B112E 01 A4 40 0B         A  3901    	LD	BC,___print_uputch
0B1132 ED43 1B 4B 0B       A  3902    	LD	(___print_xputch),BC
0B1137 01 5E 4C 0B         A  3903    	LD	BC,L__87
0B113B C5                  A  3904    	PUSH	BC
0B113C CD EC 3E 0B         A  3905    	CALL	___print_sendstring
0B1140 C1                  A  3906    	POP	BC
0B1141 01020000            A  3907    	LD	BC,2
0B1145 C5                  A  3908    	PUSH	BC
0B1146 ED65F6              A  3909    	PEA	IX+%FFFFFFF6
0B1149 CD EF 08 0B         A  3910    	CALL	_print_bin
0B114D C1                  A  3911    	POP	BC
0B114E C1                  A  3912    	POP	BC
                           A  3913    ;  316	
                           A  3914    ;  317				if (bmp.alphaBitField == 0)
                           A  3915    .LINE 317
                           A  3916    
0B114F FD21CFFB FF         A  3917    	LD	IY,-1073
0B1154 DDE5C1              A  3918    	LD	BC,IX
0B1157 FD09                A  3919    	ADD	IY,BC
0B1159 FD2700              A  3920    	LD	HL,(IY)
0B115C FD5E03              A  3921    	LD	E,(IY+%3)
0B115F 01000000            A  3922    	LD	BC,0
0B1163 AF                  A  3923    	XOR	A,A
0B1164 CD DB 47 0B         A  3924    	CALL	__lcmpu
0B1168 20 15               A  3925    	JR	NZ,L_94
0B116A 01 A4 40 0B         A  3926    	LD	BC,___print_uputch
0B116E ED43 1B 4B 0B       A  3927    	LD	(___print_xputch),BC
0B1173 01 71 4C 0B         A  3928    	LD	BC,L__89
0B1177 C5                  A  3929    	PUSH	BC
0B1178 CD EC 3E 0B         A  3930    	CALL	___print_sendstring
0B117C C1                  A  3931    	POP	BC
                           A  3932    ;  318				else { printf("\r\nAlpha bi
                           A  3933    .LINE 318
                           A  3934    
0B117D 18 34               A  3935    	JR	L_99
0B117F                     A  3936    L_94:
0B117F 01 A4 40 0B         A  3937    	LD	BC,___print_uputch
0B1183 ED43 1B 4B 0B       A  3938    	LD	(___print_xputch),BC
0B1188 01 86 4C 0B         A  3939    	LD	BC,L__90
0B118C C5                  A  3940    	PUSH	BC
0B118D CD EC 3E 0B         A  3941    	CALL	___print_sendstring
0B1191 C1                  A  3942    	POP	BC
0B1192 01020000            A  3943    	LD	BC,2
0B1196 C5                  A  3944    	PUSH	BC
0B1197 ED65F4              A  3945    	PEA	IX+%FFFFFFF4
0B119A CD EF 08 0B         A  3946    	CALL	_print_bin
0B119E C1                  A  3947    	POP	BC
0B119F C1                  A  3948    	POP	BC
0B11A0 01 A4 40 0B         A  3949    	LD	BC,___print_uputch
0B11A4 ED43 1B 4B 0B       A  3950    	LD	(___print_xputch),BC
0B11A9 01 99 4C 0B         A  3951    	LD	BC,L__91
0B11AD C5                  A  3952    	PUSH	BC
0B11AE CD EC 3E 0B         A  3953    	CALL	___print_sendstring
0B11B2 C1                  A  3954    	POP	BC
                           A  3955    ;  319				
                           A  3956    ;  320			}
                           A  3957    ;  321			
                           A  3958    ;  322			
                           A  3959    ;  323		}
0B11B3                     A  3960    L_99:
                           A  3961    .LINE 323
                           A  3962    
                           A  3963    ;  324		
                           A  3964    ;  325		mos_fclose(file);
                           A  3965    .LINE 325
                           A  3966    
0B11B3 DD4EFC              A  3967    	LD	C,(IX+%FFFFFFFC)
0B11B6 0600                A  3968    	LD	B,%0
0B11B8 C5                  A  3969    	PUSH	BC
0B11B9 CD 29 3B 0B         A  3970    	CALL	_mos_fclose
0B11BD C1                  A  3971    	POP	BC
                           A  3972    ;  326		return bmp;
                           A  3973    .LINE 326
                           A  3974    
0B11BE ED2206              A  3975    	LEA	HL,IX+%6
0B11C1 ED17                A  3976    	LD	DE,(HL)
0B11C3 DDE5E1              A  3977    	LD	HL,IX
0B11C6 01AEFBFF            A  3978    	LD	BC,-1106
0B11CA 09                  A  3979    	ADD	HL,BC
0B11CB 01310400            A  3980    	LD	BC,1073
0B11CF EDB0                A  3981    	LDIR	
0B11D1 DD2706              A  3982    	LD	HL,(IX+%6)
                           A  3983    ;  327	
                           A  3984    ;  328	}
0B11D4                     A  3985    L_100:
                           A  3986    .LINE 328
                           A  3987    
0B11D4 DDF9                A  3988    	LD	SP,IX
0B11D6 DDE1                A  3989    	POP	IX
0B11D8 C9                  A  3990    	RET	
                           A  3991    
                           A  3992    
                           A  3993    ;**************************** _get_info *******
                           A  3994    ;Name                         Addr/Register   S
                           A  3995    ;_mos_fclose                         IMPORT  --
                           A  3996    ;__u_uitoa                           IMPORT  --
                           A  3997    ;___print_fmt                        IMPORT    
                           A  3998    ;_mos_flseek                         IMPORT  --
                           A  3999    ;_malloc                             IMPORT  --
                           A  4000    ;_mos_fread                          IMPORT  --
                           A  4001    ;___print_sendstring                 IMPORT  --
                           A  4002    ;___print_xputch                     IMPORT    
                           A  4003    ;___print_uputch                     IMPORT  --
                           A  4004    ;_mos_getfil                         IMPORT  --
                           A  4005    ;_mos_fopen                          IMPORT  --
                           A  4006    ;_memset                             IMPORT  --
                           A  4007    ;bmp                                IX-1106   1
                           A  4008    ;initial_header                       IX-33    
                           A  4009    ;fo                                   IX-15    
                           A  4010    ;alphamask                            IX-12    
                           A  4011    ;bluemask                             IX-10    
                           A  4012    ;greenmask                             IX-8    
                           A  4013    ;redmask                               IX-6    
                           A  4014    ;file                                  IX-4    
                           A  4015    ;main_header                           IX-3    
                           A  4016    ;filename                              IX+9    
                           A  4017    
                           A  4018    
                           A  4019    ; Stack Frame Size: 1118 (bytes)
                           A  4020    ;       Spill Code: -3 (instruction)
                           A  4021    
                           A  4022    
                           A  4023    .ENDFUNC "get_info",328,"_get_info"
                           A  4024    	SEGMENT STRSECT
0B4B36                     A  4025    L__55:
0B4B36 4572726F 723A2063   A  4026    	DB	"Error: could not open "
0B4B3E 6F756C64 206E6F74 
0B4B46 206F7065 6E20 
0B4B4C 00                  A  4027    	DB	0
0B4B4D                     A  4028    L__56:
0B4B4D 2E                  A  4029    	DB	"."
0B4B4E 0D0A00              A  4030    	DB	13,10,0
0B4B51                     A  4031    L__60:
0B4B51 44656275 673A2042   A  4032    	DB	"Debug: BMP is "
0B4B59 4D502069 7320 
0B4B5F 00                  A  4033    	DB	0
0B4B60                     A  4034    L__61:
0B4B60 207820              A  4035    	DB	" x "
0B4B63 00                  A  4036    	DB	0
0B4B64                     A  4037    L__62:
0B4B64 207820              A  4038    	DB	" x "
0B4B67 00                  A  4039    	DB	0
0B4B68                     A  4040    L__63:
0B4B68 2C20636F 6D707265   A  4041    	DB	", compression type "
0B4B70 7373696F 6E207479 
0B4B78 706520 
0B4B7B 00                  A  4042    	DB	0
0B4B7C                     A  4043    L__64:
0B4B7C 2C20616E 64204449   A  4044    	DB	", and DIB size "
0B4B84 42207369 7A6520 
0B4B8B 00                  A  4045    	DB	0
0B4B8C                     A  4046    L__65:
0B4B8C 0D0A00              A  4047    	DB	13,10,0
0B4B8F                     A  4048    L__70:
0B4B8F 52656420 62697466   A  4049    	DB	"Red bitfield:   "
0B4B97 69656C64 3A202020 
0B4B9F 00                  A  4050    	DB	0
0B4BA0                     A  4051    L__71:
0B4BA0 20286279 746520     A  4052    	DB	" (byte "
0B4BA7 00                  A  4053    	DB	0
0B4BA8                     A  4054    L__72:
0B4BA8 20696E20 70697865   A  4055    	DB	" in pixel)"
0B4BB0 6C29 
0B4BB2 0D0A00              A  4056    	DB	13,10,0
0B4BB5                     A  4057    L__73:
0B4BB5 47726565 6E206269   A  4058    	DB	"Green bitfield: "
0B4BBD 74666965 6C643A20 
0B4BC5 00                  A  4059    	DB	0
0B4BC6                     A  4060    L__74:
0B4BC6 20286279 746520     A  4061    	DB	" (byte "
0B4BCD 00                  A  4062    	DB	0
0B4BCE                     A  4063    L__75:
0B4BCE 20696E20 70697865   A  4064    	DB	" in pixel)"
0B4BD6 6C29 
0B4BD8 0D0A00              A  4065    	DB	13,10,0
0B4BDB                     A  4066    L__76:
0B4BDB 426C7565 20626974   A  4067    	DB	"Blue bitfield:  "
0B4BE3 6669656C 643A2020 
0B4BEB 00                  A  4068    	DB	0
0B4BEC                     A  4069    L__77:
0B4BEC 20286279 746520     A  4070    	DB	" (byte "
0B4BF3 00                  A  4071    	DB	0
0B4BF4                     A  4072    L__78:
0B4BF4 20696E20 70697865   A  4073    	DB	" in pixel)"
0B4BFC 6C29 
0B4BFE 0D0A00              A  4074    	DB	13,10,0
0B4C01                     A  4075    L__80:
0B4C01 4E6F2061 6C706861   A  4076    	DB	"No alpha channel"
0B4C09 20636861 6E6E656C 
0B4C11 0D0A00              A  4077    	DB	13,10,0
0B4C14                     A  4078    L__81:
0B4C14 416C7068 61206269   A  4079    	DB	"Alpha bitfield: "
0B4C1C 74666965 6C643A20 
0B4C24 00                  A  4080    	DB	0
0B4C25                     A  4081    L__82:
0B4C25 20286279 746520     A  4082    	DB	" (byte "
0B4C2C 00                  A  4083    	DB	0
0B4C2D                     A  4084    L__83:
0B4C2D 20696E20 70697865   A  4085    	DB	" in pixel)"
0B4C35 6C29 
0B4C37 0D0A00              A  4086    	DB	13,10,0
0B4C3A                     A  4087    L__85:
0B4C3A 52656420 62697466   A  4088    	DB	"Red bitfield:   "
0B4C42 69656C64 3A202020 
0B4C4A 00                  A  4089    	DB	0
0B4C4B                     A  4090    L__86:
0B4C4B 0D0A                A  4091    	DB	13,10
0B4C4D 47726565 6E206269   A  4092    	DB	"Green bitfield: "
0B4C55 74666965 6C643A20 
0B4C5D 00                  A  4093    	DB	0
0B4C5E                     A  4094    L__87:
0B4C5E 0D0A                A  4095    	DB	13,10
0B4C60 426C7565 20626974   A  4096    	DB	"Blue bitfield:  "
0B4C68 6669656C 643A2020 
0B4C70 00                  A  4097    	DB	0
0B4C71                     A  4098    L__89:
0B4C71 0D0A                A  4099    	DB	13,10
0B4C73 4E6F2061 6C706861   A  4100    	DB	"No alpha channel"
0B4C7B 20636861 6E6E656C 
0B4C83 0D0A00              A  4101    	DB	13,10,0
0B4C86                     A  4102    L__90:
0B4C86 0D0A                A  4103    	DB	13,10
0B4C88 416C7068 61206269   A  4104    	DB	"Alpha bitfield: "
0B4C90 74666965 6C643A20 
0B4C98 00                  A  4105    	DB	0
0B4C99                     A  4106    L__91:
0B4C99 0D0A00              A  4107    	DB	13,10,0
                           A  4108    	SEGMENT CODE
                           A  4109    ;  329	
                           A  4110    ;  330	bmp_info load_bmp_clean(const char * fi
0B11D9                     A  4111    _load_bmp_clean:
                           A  4112    .DEFINE "_load_bmp_clean"
                           A  4113    
                           A  4114    .VALUE _load_bmp_clean
                           A  4115    
                           A  4116    .CLASS 2
                           A  4117    
                           A  4118    .TAG "NONAME6"
                           A  4119    
                           A  4120    .TYPE 72
                           A  4121    
                           A  4122    .ENDEF
                           A  4123    
                           A  4124    .BEGFUNC "load_bmp_clean",330,"_load_bmp_clean"
                           A  4125    
                           A  4126    .LINE 330
                           A  4127    
                           A  4128    .DEFINE "filename"
                           A  4129    
                           A  4130    .CLASS 65
                           A  4131    
                           A  4132    .VALUE 9
                           A  4133    
                           A  4134    .TYPE 194
                           A  4135    
                           A  4136    .ENDEF
                           A  4137    
                           A  4138    .DEFINE "slot"
                           A  4139    
                           A  4140    .CLASS 65
                           A  4141    
                           A  4142    .VALUE 12
                           A  4143    
                           A  4144    .TYPE 12
                           A  4145    
                           A  4146    .ENDEF
                           A  4147    
                           A  4148    .DEFINE "file"
                           A  4149    
                           A  4150    .CLASS 65
                           A  4151    
                           A  4152    .VALUE -1
                           A  4153    
                           A  4154    .TYPE 12
                           A  4155    
                           A  4156    .ENDEF
                           A  4157    
                           A  4158    .DEFINE "main_header"
                           A  4159    
                           A  4160    .CLASS 65
                           A  4161    
                           A  4162    .VALUE -4
                           A  4163    
                           A  4164    .TYPE 34
                           A  4165    
                           A  4166    .ENDEF
                           A  4167    
                           A  4168    .DEFINE "y"
                           A  4169    
                           A  4170    .CLASS 65
                           A  4171    
                           A  4172    .VALUE -6
                           A  4173    
                           A  4174    .TYPE 3
                           A  4175    
                           A  4176    .ENDEF
                           A  4177    
                           A  4178    .DEFINE "x"
                           A  4179    
                           A  4180    .CLASS 65
                           A  4181    
                           A  4182    .VALUE -8
                           A  4183    
                           A  4184    .TYPE 3
                           A  4185    
                           A  4186    .ENDEF
                           A  4187    
                           A  4188    .DEFINE "y"
                           A  4189    
                           A  4190    .CLASS 65
                           A  4191    
                           A  4192    .VALUE -10
                           A  4193    
                           A  4194    .TYPE 3
                           A  4195    
                           A  4196    .ENDEF
                           A  4197    
                           A  4198    .DEFINE "index"
                           A  4199    
                           A  4200    .CLASS 65
                           A  4201    
                           A  4202    .VALUE -11
                           A  4203    
                           A  4204    .TYPE 12
                           A  4205    
                           A  4206    .ENDEF
                           A  4207    
                           A  4208    .DEFINE "fo"
                           A  4209    
                           A  4210    .CLASS 65
                           A  4211    
                           A  4212    .VALUE -17
                           A  4213    
                           A  4214    .TAG "NONAME5"
                           A  4215    
                           A  4216    .TYPE 40
                           A  4217    
                           A  4218    .ENDEF
                           A  4219    
                           A  4220    .DEFINE "src"
                           A  4221    
                           A  4222    .CLASS 65
                           A  4223    
                           A  4224    .VALUE -20
                           A  4225    
                           A  4226    .TYPE 34
                           A  4227    
                           A  4228    .ENDEF
                           A  4229    
                           A  4230    .DEFINE "src"
                           A  4231    
                           A  4232    .CLASS 65
                           A  4233    
                           A  4234    .VALUE -23
                           A  4235    
                           A  4236    .TYPE 34
                           A  4237    
                           A  4238    .ENDEF
                           A  4239    
                           A  4240    .DEFINE "dst"
                           A  4241    
                           A  4242    .CLASS 65
                           A  4243    
                           A  4244    .VALUE -26
                           A  4245    
                           A  4246    .TYPE 34
                           A  4247    
                           A  4248    .ENDEF
                           A  4249    
                           A  4250    .DEFINE "row_rgba2222"
                           A  4251    
                           A  4252    .CLASS 65
                           A  4253    
                           A  4254    .VALUE -29
                           A  4255    
                           A  4256    .TYPE 34
                           A  4257    
                           A  4258    .ENDEF
                           A  4259    
                           A  4260    .DEFINE "dst"
                           A  4261    
                           A  4262    .CLASS 65
                           A  4263    
                           A  4264    .VALUE -32
                           A  4265    
                           A  4266    .TYPE 34
                           A  4267    
                           A  4268    .ENDEF
                           A  4269    
                           A  4270    .DEFINE "initial_header"
                           A  4271    
                           A  4272    .CLASS 65
                           A  4273    
                           A  4274    .VALUE -50
                           A  4275    
                           A  4276    .DIM 18
                           A  4277    
                           A  4278    .TYPE 98
                           A  4279    
                           A  4280    .ENDEF
                           A  4281    
                           A  4282    .DEFINE "bmp"
                           A  4283    
                           A  4284    .CLASS 65
                           A  4285    
                           A  4286    .VALUE -1123
                           A  4287    
                           A  4288    .TAG "NONAME6"
                           A  4289    
                           A  4290    .TYPE 8
                           A  4291    
                           A  4292    .ENDEF
                           A  4293    
0B11D9 DDE5                A  4294    	PUSH	IX
0B11DB DD210000 00         A  4295    	LD	IX,0
0B11E0 DD39                A  4296    	ADD	IX,SP
0B11E2 2191FBFF            A  4297    	LD	HL,-1135
0B11E6 39                  A  4298    	ADD	HL,SP
0B11E7 F9                  A  4299    	LD	SP,HL
                           A  4300    ;  331		
                           A  4301    ;  332		uint8_t file;
                           A  4302    ;  333		FIL * fo;
                           A  4303    ;  334		bmp_info bmp;
                           A  4304    ;  335		char initial_header[18];
                           A  4305    ;  336		char *main_header;
                           A  4306    ;  337		char * row_rgba2222;
                           A  4307    ;  338		int16_t y = 0;
                           A  4308    ;  339		
                           A  4309    ;  340		memset(&bmp, 0, sizeof(bmp));	
                           A  4310    .LINE 340
                           A  4311    
0B11E8 01310400            A  4312    	LD	BC,1073
0B11EC C5                  A  4313    	PUSH	BC
0B11ED 01000000            A  4314    	LD	BC,0
0B11F1 C5                  A  4315    	PUSH	BC
0B11F2 DDE5E1              A  4316    	LD	HL,IX
0B11F5 019DFBFF            A  4317    	LD	BC,-1123
0B11F9 09                  A  4318    	ADD	HL,BC
0B11FA E5C1                A  4319    	LD	BC,HL
0B11FC C5                  A  4320    	PUSH	BC
0B11FD CD 8F 48 0B         A  4321    	CALL	_memset
0B1201 C1                  A  4322    	POP	BC
0B1202 C1                  A  4323    	POP	BC
0B1203 C1                  A  4324    	POP	BC
                           A  4325    ;  341		
                           A  4326    ;  342		file = mos_fopen(filename, fa_read)
                           A  4327    .LINE 342
                           A  4328    
0B1204 01010000            A  4329    	LD	BC,1
0B1208 C5                  A  4330    	PUSH	BC
0B1209 DD0709              A  4331    	LD	BC,(IX+%9)
0B120C C5                  A  4332    	PUSH	BC
0B120D CD 11 3B 0B         A  4333    	CALL	_mos_fopen
0B1211 C1                  A  4334    	POP	BC
0B1212 C1                  A  4335    	POP	BC
0B1213 DD77FF              A  4336    	LD	(IX+%FFFFFFFF),A
                           A  4337    ;  343		fo = (FIL * ) mos_getfil(file);
                           A  4338    .LINE 343
                           A  4339    
0B1216 DD4EFF              A  4340    	LD	C,(IX+%FFFFFFFF)
0B1219 0600                A  4341    	LD	B,%0
0B121B C5                  A  4342    	PUSH	BC
0B121C CD 97 3C 0B         A  4343    	CALL	_mos_getfil
0B1220 C1                  A  4344    	POP	BC
0B1221 DD2FEF              A  4345    	LD	(IX+%FFFFFFEF),HL
                           A  4346    ;  344		
                           A  4347    ;  345	    if (!file) {
                           A  4348    .LINE 345
                           A  4349    
0B1224 DD7EFF              A  4350    	LD	A,(IX+%FFFFFFFF)
0B1227 B7                  A  4351    	OR	A,A
0B1228 20 40               A  4352    	JR	NZ,L_102
                           A  4353    ;  346	        printf("Error: could not open %
                           A  4354    .LINE 346
                           A  4355    
0B122A 01 A4 40 0B         A  4356    	LD	BC,___print_uputch
0B122E ED43 1B 4B 0B       A  4357    	LD	(___print_xputch),BC
0B1233 01 9C 4C 0B         A  4358    	LD	BC,L__94
0B1237 C5                  A  4359    	PUSH	BC
0B1238 CD EC 3E 0B         A  4360    	CALL	___print_sendstring
0B123C C1                  A  4361    	POP	BC
0B123D DD0709              A  4362    	LD	BC,(IX+%9)
0B1240 C5                  A  4363    	PUSH	BC
0B1241 CD EC 3E 0B         A  4364    	CALL	___print_sendstring
0B1245 C1                  A  4365    	POP	BC
0B1246 01 B3 4C 0B         A  4366    	LD	BC,L__95
0B124A C5                  A  4367    	PUSH	BC
0B124B CD EC 3E 0B         A  4368    	CALL	___print_sendstring
0B124F C1                  A  4369    	POP	BC
                           A  4370    ;  347	        return bmp;
                           A  4371    .LINE 347
                           A  4372    
0B1250 ED2206              A  4373    	LEA	HL,IX+%6
0B1253 ED17                A  4374    	LD	DE,(HL)
0B1255 DDE5E1              A  4375    	LD	HL,IX
0B1258 019DFBFF            A  4376    	LD	BC,-1123
0B125C 09                  A  4377    	ADD	HL,BC
0B125D 01310400            A  4378    	LD	BC,1073
0B1261 EDB0                A  4379    	LDIR	
0B1263 DD2706              A  4380    	LD	HL,(IX+%6)
0B1266 C3 DE 1C 0B         A  4381    	JR	L_144
                           A  4382    ;  348	    }
0B126A                     A  4383    L_102:
                           A  4384    .LINE 348
                           A  4385    
                           A  4386    ;  349	
                           A  4387    ;  350		mos_fread(file, initial_header, 14 
                           A  4388    .LINE 350
                           A  4389    
0B126A 01120000            A  4390    	LD	BC,18
0B126E C5                  A  4391    	PUSH	BC
0B126F ED65CE              A  4392    	PEA	IX+%FFFFFFCE
0B1272 DD4EFF              A  4393    	LD	C,(IX+%FFFFFFFF)
0B1275 0600                A  4394    	LD	B,%0
0B1277 C5                  A  4395    	PUSH	BC
0B1278 CD 3E 3C 0B         A  4396    	CALL	_mos_fread
0B127C C1                  A  4397    	POP	BC
0B127D C1                  A  4398    	POP	BC
0B127E C1                  A  4399    	POP	BC
                           A  4400    ;  351		
                           A  4401    ;  352		bmp.pixels_offset = * (uint32_t * )
                           A  4402    .LINE 352
                           A  4403    
0B127F ED22D8              A  4404    	LEA	HL,IX+%FFFFFFD8
0B1282 ED07                A  4405    	LD	BC,(HL)
0B1284 23                  A  4406    	INC	HL
0B1285 23                  A  4407    	INC	HL
0B1286 23                  A  4408    	INC	HL
0B1287 7E                  A  4409    	LD	A,(HL)
0B1288 FD21A2FB FF         A  4410    	LD	IY,-1118
0B128D DDE5D1              A  4411    	LD	DE,IX
0B1290 FD19                A  4412    	ADD	IY,DE
0B1292 FD0F00              A  4413    	LD	(IY),BC
0B1295 FD7703              A  4414    	LD	(IY+%3),A
                           A  4415    ;  353	    bmp.main_header_size = * (uint32_t 
                           A  4416    .LINE 353
                           A  4417    
0B1298 ED22DC              A  4418    	LEA	HL,IX+%FFFFFFDC
0B129B ED07                A  4419    	LD	BC,(HL)
0B129D 23                  A  4420    	INC	HL
0B129E 23                  A  4421    	INC	HL
0B129F 23                  A  4422    	INC	HL
0B12A0 7E                  A  4423    	LD	A,(HL)
0B12A1 FD21AAFB FF         A  4424    	LD	IY,-1110
0B12A6 DDE5D1              A  4425    	LD	DE,IX
0B12A9 FD19                A  4426    	ADD	IY,DE
0B12AB FD0F00              A  4427    	LD	(IY),BC
0B12AE FD7703              A  4428    	LD	(IY+%3),A
                           A  4429    ;  354		
                           A  4430    ;  355		main_header = malloc(bmp.main_heade
                           A  4431    .LINE 355
                           A  4432    
0B12B1 21AAFBFF            A  4433    	LD	HL,-1110
0B12B5 DDE5C1              A  4434    	LD	BC,IX
0B12B8 09                  A  4435    	ADD	HL,BC
0B12B9 ED07                A  4436    	LD	BC,(HL)
0B12BB C5                  A  4437    	PUSH	BC
0B12BC CD C7 3D 0B         A  4438    	CALL	_malloc
0B12C0 C1                  A  4439    	POP	BC
0B12C1 DD2FFC              A  4440    	LD	(IX+%FFFFFFFC),HL
                           A  4441    ;  356		
                           A  4442    ;  357		mos_flseek(file, 14);
                           A  4443    .LINE 357
                           A  4444    
0B12C4 01000000            A  4445    	LD	BC,0
0B12C8 C5                  A  4446    	PUSH	BC
0B12C9 010E0000            A  4447    	LD	BC,14
0B12CD C5                  A  4448    	PUSH	BC
0B12CE DD4EFF              A  4449    	LD	C,(IX+%FFFFFFFF)
0B12D1 0600                A  4450    	LD	B,%0
0B12D3 C5                  A  4451    	PUSH	BC
0B12D4 CD 78 3C 0B         A  4452    	CALL	_mos_flseek
0B12D8 C1                  A  4453    	POP	BC
0B12D9 C1                  A  4454    	POP	BC
0B12DA C1                  A  4455    	POP	BC
                           A  4456    ;  358		mos_fread(file, main_header, bmp.ma
                           A  4457    .LINE 358
                           A  4458    
0B12DB 21AAFBFF            A  4459    	LD	HL,-1110
0B12DF DDE5C1              A  4460    	LD	BC,IX
0B12E2 09                  A  4461    	ADD	HL,BC
0B12E3 ED07                A  4462    	LD	BC,(HL)
0B12E5 C5                  A  4463    	PUSH	BC
0B12E6 DD07FC              A  4464    	LD	BC,(IX+%FFFFFFFC)
0B12E9 C5                  A  4465    	PUSH	BC
0B12EA DD4EFF              A  4466    	LD	C,(IX+%FFFFFFFF)
0B12ED 0600                A  4467    	LD	B,%0
0B12EF C5                  A  4468    	PUSH	BC
0B12F0 CD 3E 3C 0B         A  4469    	CALL	_mos_fread
0B12F4 C1                  A  4470    	POP	BC
0B12F5 C1                  A  4471    	POP	BC
0B12F6 C1                  A  4472    	POP	BC
                           A  4473    ;  359		
                           A  4474    ;  360		bmp.bmp_width = *(int32_t *) & main
                           A  4475    .LINE 360
                           A  4476    
0B12F7 DD31FC              A  4477    	LD	IY,(IX+%FFFFFFFC)
0B12FA ED2304              A  4478    	LEA	HL,IY+%4
0B12FD ED07                A  4479    	LD	BC,(HL)
0B12FF 219DFBFF            A  4480    	LD	HL,-1123
0B1303 DDE5D1              A  4481    	LD	DE,IX
0B1306 19                  A  4482    	ADD	HL,DE
0B1307 71                  A  4483    	LD	(HL),C
0B1308 23                  A  4484    	INC	HL
0B1309 70                  A  4485    	LD	(HL),B
                           A  4486    ;  361		bmp.bmp_height = *(int32_t *) & mai
                           A  4487    .LINE 361
                           A  4488    
0B130A ED2308              A  4489    	LEA	HL,IY+%8
0B130D ED07                A  4490    	LD	BC,(HL)
0B130F 219FFBFF            A  4491    	LD	HL,-1121
0B1313 DDE5D1              A  4492    	LD	DE,IX
0B1316 19                  A  4493    	ADD	HL,DE
0B1317 71                  A  4494    	LD	(HL),C
0B1318 23                  A  4495    	INC	HL
0B1319 70                  A  4496    	LD	(HL),B
                           A  4497    ;  362		bmp.bmp_bitdepth = *(uint16_t *) & 
                           A  4498    .LINE 362
                           A  4499    
0B131A ED230E              A  4500    	LEA	HL,IY+%E
0B131D 7E                  A  4501    	LD	A,(HL)
0B131E 21A1FBFF            A  4502    	LD	HL,-1119
0B1322 DDE5C1              A  4503    	LD	BC,IX
0B1325 09                  A  4504    	ADD	HL,BC
0B1326 77                  A  4505    	LD	(HL),A
                           A  4506    ;  363		bmp.compression = *(uint32_t *) & m
                           A  4507    .LINE 363
                           A  4508    
0B1327 ED2310              A  4509    	LEA	HL,IY+%10
0B132A ED07                A  4510    	LD	BC,(HL)
0B132C 23                  A  4511    	INC	HL
0B132D 23                  A  4512    	INC	HL
0B132E 23                  A  4513    	INC	HL
0B132F 7E                  A  4514    	LD	A,(HL)
0B1330 FD21AEFB FF         A  4515    	LD	IY,-1106
0B1335 DDE5D1              A  4516    	LD	DE,IX
0B1338 FD19                A  4517    	ADD	IY,DE
0B133A FD0F00              A  4518    	LD	(IY),BC
0B133D FD7703              A  4519    	LD	(IY+%3),A
                           A  4520    ;  364		bmp.color_table_size = * (uint32_t 
                           A  4521    .LINE 364
                           A  4522    
0B1340 DD31FC              A  4523    	LD	IY,(IX+%FFFFFFFC)
0B1343 ED2320              A  4524    	LEA	HL,IY+%20
0B1346 ED07                A  4525    	LD	BC,(HL)
0B1348 23                  A  4526    	INC	HL
0B1349 23                  A  4527    	INC	HL
0B134A 23                  A  4528    	INC	HL
0B134B 7E                  A  4529    	LD	A,(HL)
0B134C FD21C2FB FF         A  4530    	LD	IY,-1086
0B1351 DDE5D1              A  4531    	LD	DE,IX
0B1354 FD19                A  4532    	ADD	IY,DE
0B1356 FD0F00              A  4533    	LD	(IY),BC
0B1359 FD7703              A  4534    	LD	(IY+%3),A
                           A  4535    ;  365	
                           A  4536    ;  366	    if (bmp.color_table_size == 0 && bm
                           A  4537    .LINE 366
                           A  4538    
0B135C FD21C2FB FF         A  4539    	LD	IY,-1086
0B1361 DDE5C1              A  4540    	LD	BC,IX
0B1364 FD09                A  4541    	ADD	IY,BC
0B1366 FD2700              A  4542    	LD	HL,(IY)
0B1369 FD5E03              A  4543    	LD	E,(IY+%3)
0B136C 01000000            A  4544    	LD	BC,0
0B1370 AF                  A  4545    	XOR	A,A
0B1371 CD DB 47 0B         A  4546    	CALL	__lcmpu
0B1375 20 22               A  4547    	JR	NZ,L_106
0B1377 21A1FBFF            A  4548    	LD	HL,-1119
0B137B DDE5C1              A  4549    	LD	BC,IX
0B137E 09                  A  4550    	ADD	HL,BC
0B137F 7E                  A  4551    	LD	A,(HL)
0B1380 FE08                A  4552    	CP	A,%8
0B1382 20 15               A  4553    	JR	NZ,L_106
                           A  4554    ;  367	        bmp.color_table_size = 256;
                           A  4555    .LINE 367
                           A  4556    
0B1384 01000100            A  4557    	LD	BC,256
0B1388 FD21C2FB FF         A  4558    	LD	IY,-1086
0B138D DDE5D1              A  4559    	LD	DE,IX
0B1390 FD19                A  4560    	ADD	IY,DE
0B1392 FD0F00              A  4561    	LD	(IY),BC
0B1395 FD360300            A  4562    	LD	(IY+%3),%0
                           A  4563    ;  368	    }
0B1399                     A  4564    L_106:
                           A  4565    .LINE 368
                           A  4566    
                           A  4567    ;  369	
                           A  4568    ;  370		if (bmp.color_table_size > 0) mos_f
                           A  4569    .LINE 370
                           A  4570    
0B1399 FD21C2FB FF         A  4571    	LD	IY,-1086
0B139E DDE5C1              A  4572    	LD	BC,IX
0B13A1 FD09                A  4573    	ADD	IY,BC
0B13A3 FD0700              A  4574    	LD	BC,(IY)
0B13A6 FD7E03              A  4575    	LD	A,(IY+%3)
0B13A9 B7                  A  4576    	OR	A,A
0B13AA ED62                A  4577    	SBC	HL,HL
0B13AC 1E00                A  4578    	LD	E,%0
0B13AE CD DB 47 0B         A  4579    	CALL	__lcmpu
0B13B2 30 25               A  4580    	JR	NC,L_107
0B13B4 21C2FBFF            A  4581    	LD	HL,-1086
0B13B8 DDE5C1              A  4582    	LD	BC,IX
0B13BB 09                  A  4583    	ADD	HL,BC
0B13BC ED27                A  4584    	LD	HL,(HL)
0B13BE 29                  A  4585    	ADD	HL,HL
0B13BF 29                  A  4586    	ADD	HL,HL
0B13C0 E5                  A  4587    	PUSH	HL
0B13C1 DDE5E1              A  4588    	LD	HL,IX
0B13C4 01C6FBFF            A  4589    	LD	BC,-1082
0B13C8 09                  A  4590    	ADD	HL,BC
0B13C9 E5C1                A  4591    	LD	BC,HL
0B13CB C5                  A  4592    	PUSH	BC
0B13CC DD4EFF              A  4593    	LD	C,(IX+%FFFFFFFF)
0B13CF 0600                A  4594    	LD	B,%0
0B13D1 C5                  A  4595    	PUSH	BC
0B13D2 CD 3E 3C 0B         A  4596    	CALL	_mos_fread
0B13D6 C1                  A  4597    	POP	BC
0B13D7 C1                  A  4598    	POP	BC
0B13D8 C1                  A  4599    	POP	BC
0B13D9                     A  4600    L_107:
                           A  4601    ;  371		
                           A  4602    ;  372		bmp.row_padding = (4 - (bmp.bmp_wid
                           A  4603    .LINE 372
                           A  4604    
0B13D9 219DFBFF            A  4605    	LD	HL,-1123
0B13DD DDE5C1              A  4606    	LD	BC,IX
0B13E0 09                  A  4607    	ADD	HL,BC
0B13E1 ED07                A  4608    	LD	BC,(HL)
0B13E3 CD 9E 40 0B         A  4609    	CALL	__stoiu
0B13E7 E5D1                A  4610    	LD	DE,HL
0B13E9 21A1FBFF            A  4611    	LD	HL,-1119
0B13ED DDE5C1              A  4612    	LD	BC,IX
0B13F0 09                  A  4613    	ADD	HL,BC
0B13F1 7E                  A  4614    	LD	A,(HL)
0B13F2 B7ED62              A  4615    	UEXT	HL
0B13F5 6F                  A  4616    	LD	L,A
0B13F6 01080000            A  4617    	LD	BC,8
0B13FA CD 9B 47 0B         A  4618    	CALL	__idivs
0B13FE E5C1                A  4619    	LD	BC,HL
0B1400 D5E1                A  4620    	LD	HL,DE
0B1402 CD 5F 47 0B         A  4621    	CALL	__imuls
0B1406 01040000            A  4622    	LD	BC,4
0B140A CD 7A 3E 0B         A  4623    	CALL	__irems
0B140E E5C1                A  4624    	LD	BC,HL
0B1410 21040000            A  4625    	LD	HL,4
0B1414 B7                  A  4626    	OR	A,A
0B1415 ED42                A  4627    	SBC	HL,BC
0B1417 01040000            A  4628    	LD	BC,4
0B141B CD 7A 3E 0B         A  4629    	CALL	__irems
0B141F DD75CA              A  4630    	LD	(IX+%FFFFFFCA),L
0B1422 DD74CB              A  4631    	LD	(IX+%FFFFFFCB),H
                           A  4632    ;  373		bmp.non_pad_row = bmp.bmp_width * b
                           A  4633    .LINE 373
                           A  4634    
0B1425 219DFBFF            A  4635    	LD	HL,-1123
0B1429 DDE5C1              A  4636    	LD	BC,IX
0B142C 09                  A  4637    	ADD	HL,BC
0B142D ED07                A  4638    	LD	BC,(HL)
0B142F CD 9E 40 0B         A  4639    	CALL	__stoiu
0B1433 E5D1                A  4640    	LD	DE,HL
0B1435 21A1FBFF            A  4641    	LD	HL,-1119
0B1439 DDE5C1              A  4642    	LD	BC,IX
0B143C 09                  A  4643    	ADD	HL,BC
0B143D 7E                  A  4644    	LD	A,(HL)
0B143E B7ED62              A  4645    	UEXT	HL
0B1441 6F                  A  4646    	LD	L,A
0B1442 E5C1                A  4647    	LD	BC,HL
0B1444 D5E1                A  4648    	LD	HL,DE
0B1446 CD 5F 47 0B         A  4649    	CALL	__imuls
0B144A 01080000            A  4650    	LD	BC,8
0B144E CD 9B 47 0B         A  4651    	CALL	__idivs
0B1452 DD75CC              A  4652    	LD	(IX+%FFFFFFCC),L
0B1455 DD74CD              A  4653    	LD	(IX+%FFFFFFCD),H
                           A  4654    ;  374		row_rgba2222 = (char * ) malloc(bmp
                           A  4655    .LINE 374
                           A  4656    
0B1458 219DFBFF            A  4657    	LD	HL,-1123
0B145C DDE5C1              A  4658    	LD	BC,IX
0B145F 09                  A  4659    	ADD	HL,BC
0B1460 ED07                A  4660    	LD	BC,(HL)
0B1462 CD 9E 40 0B         A  4661    	CALL	__stoiu
0B1466 E5                  A  4662    	PUSH	HL
0B1467 CD C7 3D 0B         A  4663    	CALL	_malloc
0B146B C1                  A  4664    	POP	BC
0B146C DD2FE3              A  4665    	LD	(IX+%FFFFFFE3),HL
                           A  4666    ;  375		
                           A  4667    ;  376		if ((bmp.compression != 0) && (bmp.
                           A  4668    .LINE 376
                           A  4669    
0B146F FD21AEFB FF         A  4670    	LD	IY,-1106
0B1474 DDE5C1              A  4671    	LD	BC,IX
0B1477 FD09                A  4672    	ADD	IY,BC
0B1479 FD2700              A  4673    	LD	HL,(IY)
0B147C FD5E03              A  4674    	LD	E,(IY+%3)
0B147F 01000000            A  4675    	LD	BC,0
0B1483 AF                  A  4676    	XOR	A,A
0B1484 CD DB 47 0B         A  4677    	CALL	__lcmpu
0B1488 28 48               A  4678    	JR	Z,L_142
0B148A FD21AEFB FF         A  4679    	LD	IY,-1106
0B148F DDE5C1              A  4680    	LD	BC,IX
0B1492 FD09                A  4681    	ADD	IY,BC
0B1494 FD2700              A  4682    	LD	HL,(IY)
0B1497 FD5E03              A  4683    	LD	E,(IY+%3)
0B149A 01030000            A  4684    	LD	BC,3
0B149E AF                  A  4685    	XOR	A,A
0B149F CD DB 47 0B         A  4686    	CALL	__lcmpu
0B14A3 28 2D               A  4687    	JR	Z,L_142
                           A  4688    ;  377			printf("Non standard BMP compre
                           A  4689    .LINE 377
                           A  4690    
0B14A5 01 A4 40 0B         A  4691    	LD	BC,___print_uputch
0B14A9 ED43 1B 4B 0B       A  4692    	LD	(___print_xputch),BC
0B14AE 01 B7 4C 0B         A  4693    	LD	BC,L__101
0B14B2 C5                  A  4694    	PUSH	BC
0B14B3 CD EC 3E 0B         A  4695    	CALL	___print_sendstring
0B14B7 C1                  A  4696    	POP	BC
                           A  4697    ;  378			return bmp;
                           A  4698    .LINE 378
                           A  4699    
0B14B8 ED2206              A  4700    	LEA	HL,IX+%6
0B14BB ED17                A  4701    	LD	DE,(HL)
0B14BD DDE5E1              A  4702    	LD	HL,IX
0B14C0 019DFBFF            A  4703    	LD	BC,-1123
0B14C4 09                  A  4704    	ADD	HL,BC
0B14C5 01310400            A  4705    	LD	BC,1073
0B14C9 EDB0                A  4706    	LDIR	
0B14CB DD2706              A  4707    	LD	HL,(IX+%6)
0B14CE C3 DE 1C 0B         A  4708    	JR	L_144
                           A  4709    ;  379		}
0B14D2                     A  4710    L_142:
                           A  4711    .LINE 379
                           A  4712    
                           A  4713    ;  380		
                           A  4714    ;  381		if ((bmp.compression == 3) || (bmp.
                           A  4715    .LINE 381
                           A  4716    
0B14D2 FD21AEFB FF         A  4717    	LD	IY,-1106
0B14D7 DDE5C1              A  4718    	LD	BC,IX
0B14DA FD09                A  4719    	ADD	IY,BC
0B14DC FD2700              A  4720    	LD	HL,(IY)
0B14DF FD5E03              A  4721    	LD	E,(IY+%3)
0B14E2 01030000            A  4722    	LD	BC,3
0B14E6 AF                  A  4723    	XOR	A,A
0B14E7 CD DB 47 0B         A  4724    	CALL	__lcmpu
0B14EB 28 3A               A  4725    	JR	Z,L_140
0B14ED FD21AEFB FF         A  4726    	LD	IY,-1106
0B14F2 DDE5C1              A  4727    	LD	BC,IX
0B14F5 FD09                A  4728    	ADD	IY,BC
0B14F7 FD2700              A  4729    	LD	HL,(IY)
0B14FA FD5E03              A  4730    	LD	E,(IY+%3)
0B14FD 01060000            A  4731    	LD	BC,6
0B1501 AF                  A  4732    	XOR	A,A
0B1502 CD DB 47 0B         A  4733    	CALL	__lcmpu
0B1506 C2 64 18 0B         A  4734    	JR	NZ,L_141
0B150A FD21AAFB FF         A  4735    	LD	IY,-1110
0B150F DDE5C1              A  4736    	LD	BC,IX
0B1512 FD09                A  4737    	ADD	IY,BC
0B1514 FD2700              A  4738    	LD	HL,(IY)
0B1517 FD5E03              A  4739    	LD	E,(IY+%3)
0B151A 016C0000            A  4740    	LD	BC,108
0B151E AF                  A  4741    	XOR	A,A
0B151F CD DB 47 0B         A  4742    	CALL	__lcmpu
0B1523 DA 64 18 0B         A  4743    	JR	C,L_141
0B1527                     A  4744    L_140:
                           A  4745    ;  382			
                           A  4746    ;  383			if (bmp.bmp_bitdepth == 16) {
                           A  4747    .LINE 383
                           A  4748    
0B1527 21A1FBFF            A  4749    	LD	HL,-1119
0B152B DDE5C1              A  4750    	LD	BC,IX
0B152E 09                  A  4751    	ADD	HL,BC
0B152F 7E                  A  4752    	LD	A,(HL)
0B1530 FE10                A  4753    	CP	A,%10
0B1532 20 2D               A  4754    	JR	NZ,L_119
                           A  4755    ;  384				
                           A  4756    ;  385				printf("16-bit BMP files no
                           A  4757    .LINE 385
                           A  4758    
0B1534 01 A4 40 0B         A  4759    	LD	BC,___print_uputch
0B1538 ED43 1B 4B 0B       A  4760    	LD	(___print_xputch),BC
0B153D 01 E0 4C 0B         A  4761    	LD	BC,L__106
0B1541 C5                  A  4762    	PUSH	BC
0B1542 CD EC 3E 0B         A  4763    	CALL	___print_sendstring
0B1546 C1                  A  4764    	POP	BC
                           A  4765    ;  386				return bmp;
                           A  4766    .LINE 386
                           A  4767    
0B1547 ED2206              A  4768    	LEA	HL,IX+%6
0B154A ED17                A  4769    	LD	DE,(HL)
0B154C DDE5E1              A  4770    	LD	HL,IX
0B154F 019DFBFF            A  4771    	LD	BC,-1123
0B1553 09                  A  4772    	ADD	HL,BC
0B1554 01310400            A  4773    	LD	BC,1073
0B1558 EDB0                A  4774    	LDIR	
0B155A DD2706              A  4775    	LD	HL,(IX+%6)
0B155D C3 DE 1C 0B         A  4776    	JR	L_144
                           A  4777    ;  387	
                           A  4778    ;  388			} else if (bmp.bmp_bitdepth == 
0B1561                     A  4779    L_119:
                           A  4780    .LINE 388
                           A  4781    
0B1561 21A1FBFF            A  4782    	LD	HL,-1119
0B1565 09                  A  4783    	ADD	HL,BC
0B1566 7E                  A  4784    	LD	A,(HL)
0B1567 FE20                A  4785    	CP	A,%20
0B1569 C2 B4 1C 0B         A  4786    	JR	NZ,L_143
                           A  4787    ;  389						
                           A  4788    ;  390				char * src;
                           A  4789    ;  391				char * dst;
                           A  4790    ;  392				
                           A  4791    ;  393				bmp.redBitField = *(uint32_
                           A  4792    .LINE 393
                           A  4793    
0B156D DD31FC              A  4794    	LD	IY,(IX+%FFFFFFFC)
0B1570 ED2328              A  4795    	LEA	HL,IY+%28
0B1573 ED07                A  4796    	LD	BC,(HL)
0B1575 23                  A  4797    	INC	HL
0B1576 23                  A  4798    	INC	HL
0B1577 23                  A  4799    	INC	HL
0B1578 7E                  A  4800    	LD	A,(HL)
0B1579 FD21B2FB FF         A  4801    	LD	IY,-1102
0B157E DDE5D1              A  4802    	LD	DE,IX
0B1581 FD19                A  4803    	ADD	IY,DE
0B1583 FD0F00              A  4804    	LD	(IY),BC
0B1586 FD7703              A  4805    	LD	(IY+%3),A
                           A  4806    ;  394				bmp.red_pos = getByte(bmp.r
                           A  4807    .LINE 394
                           A  4808    
0B1589 FD21B2FB FF         A  4809    	LD	IY,-1102
0B158E DDE5C1              A  4810    	LD	BC,IX
0B1591 FD09                A  4811    	ADD	IY,BC
0B1593 FD0700              A  4812    	LD	BC,(IY)
0B1596 FD7E03              A  4813    	LD	A,(IY+%3)
0B1599 2600                A  4814    	LD	H,%0
0B159B 6F                  A  4815    	LD	L,A
0B159C E5                  A  4816    	PUSH	HL
0B159D C5                  A  4817    	PUSH	BC
0B159E CD 76 08 0B         A  4818    	CALL	_getByte
0B15A2 C1                  A  4819    	POP	BC
0B15A3 C1                  A  4820    	POP	BC
0B15A4 DD77C6              A  4821    	LD	(IX+%FFFFFFC6),A
                           A  4822    ;  395				bmp.greenBitField = *(uint3
                           A  4823    .LINE 395
                           A  4824    
0B15A7 DD31FC              A  4825    	LD	IY,(IX+%FFFFFFFC)
0B15AA ED232C              A  4826    	LEA	HL,IY+%2C
0B15AD ED07                A  4827    	LD	BC,(HL)
0B15AF 23                  A  4828    	INC	HL
0B15B0 23                  A  4829    	INC	HL
0B15B1 23                  A  4830    	INC	HL
0B15B2 7E                  A  4831    	LD	A,(HL)
0B15B3 FD21B6FB FF         A  4832    	LD	IY,-1098
0B15B8 DDE5D1              A  4833    	LD	DE,IX
0B15BB FD19                A  4834    	ADD	IY,DE
0B15BD FD0F00              A  4835    	LD	(IY),BC
0B15C0 FD7703              A  4836    	LD	(IY+%3),A
                           A  4837    ;  396				bmp.green_pos = getByte(bmp
                           A  4838    .LINE 396
                           A  4839    
0B15C3 FD21B6FB FF         A  4840    	LD	IY,-1098
0B15C8 DDE5C1              A  4841    	LD	BC,IX
0B15CB FD09                A  4842    	ADD	IY,BC
0B15CD FD0700              A  4843    	LD	BC,(IY)
0B15D0 FD7E03              A  4844    	LD	A,(IY+%3)
0B15D3 2600                A  4845    	LD	H,%0
0B15D5 6F                  A  4846    	LD	L,A
0B15D6 E5                  A  4847    	PUSH	HL
0B15D7 C5                  A  4848    	PUSH	BC
0B15D8 CD 76 08 0B         A  4849    	CALL	_getByte
0B15DC C1                  A  4850    	POP	BC
0B15DD C1                  A  4851    	POP	BC
0B15DE DD77C7              A  4852    	LD	(IX+%FFFFFFC7),A
                           A  4853    ;  397				bmp.blueBitField = *(uint32
                           A  4854    .LINE 397
                           A  4855    
0B15E1 DD31FC              A  4856    	LD	IY,(IX+%FFFFFFFC)
0B15E4 ED2330              A  4857    	LEA	HL,IY+%30
0B15E7 ED07                A  4858    	LD	BC,(HL)
0B15E9 23                  A  4859    	INC	HL
0B15EA 23                  A  4860    	INC	HL
0B15EB 23                  A  4861    	INC	HL
0B15EC 7E                  A  4862    	LD	A,(HL)
0B15ED FD21BAFB FF         A  4863    	LD	IY,-1094
0B15F2 DDE5D1              A  4864    	LD	DE,IX
0B15F5 FD19                A  4865    	ADD	IY,DE
0B15F7 FD0F00              A  4866    	LD	(IY),BC
0B15FA FD7703              A  4867    	LD	(IY+%3),A
                           A  4868    ;  398				bmp.blue_pos = getByte(bmp.
                           A  4869    .LINE 398
                           A  4870    
0B15FD FD21BAFB FF         A  4871    	LD	IY,-1094
0B1602 DDE5C1              A  4872    	LD	BC,IX
0B1605 FD09                A  4873    	ADD	IY,BC
0B1607 FD0700              A  4874    	LD	BC,(IY)
0B160A FD7E03              A  4875    	LD	A,(IY+%3)
0B160D 2600                A  4876    	LD	H,%0
0B160F 6F                  A  4877    	LD	L,A
0B1610 E5                  A  4878    	PUSH	HL
0B1611 C5                  A  4879    	PUSH	BC
0B1612 CD 76 08 0B         A  4880    	CALL	_getByte
0B1616 C1                  A  4881    	POP	BC
0B1617 C1                  A  4882    	POP	BC
0B1618 DD77C8              A  4883    	LD	(IX+%FFFFFFC8),A
                           A  4884    ;  399				bmp.alphaBitField = *(uint3
                           A  4885    .LINE 399
                           A  4886    
0B161B DD31FC              A  4887    	LD	IY,(IX+%FFFFFFFC)
0B161E ED2334              A  4888    	LEA	HL,IY+%34
0B1621 ED07                A  4889    	LD	BC,(HL)
0B1623 23                  A  4890    	INC	HL
0B1624 23                  A  4891    	INC	HL
0B1625 23                  A  4892    	INC	HL
0B1626 7E                  A  4893    	LD	A,(HL)
0B1627 FD21BEFB FF         A  4894    	LD	IY,-1090
0B162C DDE5D1              A  4895    	LD	DE,IX
0B162F FD19                A  4896    	ADD	IY,DE
0B1631 FD0F00              A  4897    	LD	(IY),BC
0B1634 FD7703              A  4898    	LD	(IY+%3),A
                           A  4899    ;  400				bmp.alpha_pos = getByte(bmp
                           A  4900    .LINE 400
                           A  4901    
0B1637 FD21BEFB FF         A  4902    	LD	IY,-1090
0B163C DDE5C1              A  4903    	LD	BC,IX
0B163F FD09                A  4904    	ADD	IY,BC
0B1641 FD0700              A  4905    	LD	BC,(IY)
0B1644 FD7E03              A  4906    	LD	A,(IY+%3)
0B1647 2600                A  4907    	LD	H,%0
0B1649 6F                  A  4908    	LD	L,A
0B164A E5                  A  4909    	PUSH	HL
0B164B C5                  A  4910    	PUSH	BC
0B164C CD 76 08 0B         A  4911    	CALL	_getByte
0B1650 C1                  A  4912    	POP	BC
0B1651 C1                  A  4913    	POP	BC
0B1652 DD77C9              A  4914    	LD	(IX+%FFFFFFC9),A
                           A  4915    ;  401				
                           A  4916    ;  402			    src = (char * ) malloc(bmp.
                           A  4917    .LINE 402
                           A  4918    
0B1655 219DFBFF            A  4919    	LD	HL,-1123
0B1659 DDE5C1              A  4920    	LD	BC,IX
0B165C 09                  A  4921    	ADD	HL,BC
0B165D ED07                A  4922    	LD	BC,(HL)
0B165F CD 9E 40 0B         A  4923    	CALL	__stoiu
0B1663 E5D1                A  4924    	LD	DE,HL
0B1665 21A1FBFF            A  4925    	LD	HL,-1119
0B1669 DDE5C1              A  4926    	LD	BC,IX
0B166C 09                  A  4927    	ADD	HL,BC
0B166D 7E                  A  4928    	LD	A,(HL)
0B166E B7ED62              A  4929    	UEXT	HL
0B1671 6F                  A  4930    	LD	L,A
0B1672 E5C1                A  4931    	LD	BC,HL
0B1674 D5E1                A  4932    	LD	HL,DE
0B1676 CD 5F 47 0B         A  4933    	CALL	__imuls
0B167A 01080000            A  4934    	LD	BC,8
0B167E CD 9B 47 0B         A  4935    	CALL	__idivs
0B1682 E5                  A  4936    	PUSH	HL
0B1683 CD C7 3D 0B         A  4937    	CALL	_malloc
0B1687 C1                  A  4938    	POP	BC
0B1688 DD2FE9              A  4939    	LD	(IX+%FFFFFFE9),HL
                           A  4940    ;  403				dst = (char * ) malloc(bmp.
                           A  4941    .LINE 403
                           A  4942    
0B168B 219DFBFF            A  4943    	LD	HL,-1123
0B168F DDE5C1              A  4944    	LD	BC,IX
0B1692 09                  A  4945    	ADD	HL,BC
0B1693 ED07                A  4946    	LD	BC,(HL)
0B1695 CD 9E 40 0B         A  4947    	CALL	__stoiu
0B1699 E5D1                A  4948    	LD	DE,HL
0B169B 21A1FBFF            A  4949    	LD	HL,-1119
0B169F DDE5C1              A  4950    	LD	BC,IX
0B16A2 09                  A  4951    	ADD	HL,BC
0B16A3 7E                  A  4952    	LD	A,(HL)
0B16A4 B7ED62              A  4953    	UEXT	HL
0B16A7 6F                  A  4954    	LD	L,A
0B16A8 E5C1                A  4955    	LD	BC,HL
0B16AA D5E1                A  4956    	LD	HL,DE
0B16AC CD 5F 47 0B         A  4957    	CALL	__imuls
0B16B0 01080000            A  4958    	LD	BC,8
0B16B4 CD 9B 47 0B         A  4959    	CALL	__idivs
0B16B8 E5                  A  4960    	PUSH	HL
0B16B9 CD C7 3D 0B         A  4961    	CALL	_malloc
0B16BD C1                  A  4962    	POP	BC
0B16BE DD2FE6              A  4963    	LD	(IX+%FFFFFFE6),HL
                           A  4964    ;  404				
                           A  4965    ;  405				mos_flseek(file, bmp.pixels
                           A  4966    .LINE 405
                           A  4967    
0B16C1 219FFBFF            A  4968    	LD	HL,-1121
0B16C5 DDE5C1              A  4969    	LD	BC,IX
0B16C8 09                  A  4970    	ADD	HL,BC
0B16C9 ED07                A  4971    	LD	BC,(HL)
0B16CB CD 9E 40 0B         A  4972    	CALL	__stoiu
0B16CF E5D1                A  4973    	LD	DE,HL
0B16D1 1B                  A  4974    	DEC	DE
0B16D2 DD07CC              A  4975    	LD	BC,(IX+%FFFFFFCC)
0B16D5 CD 9E 40 0B         A  4976    	CALL	__stoiu
0B16D9 E5C1                A  4977    	LD	BC,HL
0B16DB C5E1                A  4978    	LD	HL,BC
0B16DD 0191FBFF            A  4979    	LD	BC,-1135	; spill
0B16E1 CD D7 3E 0B         A  4980    	CALL	__istix
0B16E5 DD07CA              A  4981    	LD	BC,(IX+%FFFFFFCA)
0B16E8 CD 9E 40 0B         A  4982    	CALL	__stoiu
0B16EC 0191FBFF            A  4983    	LD	BC,-1135	; unspill
0B16F0 E5                  A  4984    	PUSH	HL
0B16F1 CD BE 4A 0B         A  4985    	CALL	__ildix
0B16F5 E5C1                A  4986    	LD	BC,HL
0B16F7 E1                  A  4987    	POP	HL
0B16F8 09                  A  4988    	ADD	HL,BC
0B16F9 E5C1                A  4989    	LD	BC,HL
0B16FB D5E1                A  4990    	LD	HL,DE
0B16FD CD 5F 47 0B         A  4991    	CALL	__imuls
0B1701 E5C1                A  4992    	LD	BC,HL
0B1703 CD D4 47 0B         A  4993    	CALL	__itol
0B1707 FD21A2FB FF         A  4994    	LD	IY,-1118
0B170C DDE5D1              A  4995    	LD	DE,IX
0B170F FD19                A  4996    	ADD	IY,DE
0B1711 FD2700              A  4997    	LD	HL,(IY)
0B1714 FD5E03              A  4998    	LD	E,(IY+%3)
0B1717 CD BC 3C 0B         A  4999    	CALL	__ladd
0B171B 4B                  A  5000    	LD	C,E
0B171C 0600                A  5001    	LD	B,%0
0B171E C5                  A  5002    	PUSH	BC
0B171F E5                  A  5003    	PUSH	HL
0B1720 DD4EFF              A  5004    	LD	C,(IX+%FFFFFFFF)
0B1723 C5                  A  5005    	PUSH	BC
0B1724 CD 78 3C 0B         A  5006    	CALL	_mos_flseek
0B1728 C1                  A  5007    	POP	BC
0B1729 C1                  A  5008    	POP	BC
0B172A C1                  A  5009    	POP	BC
                           A  5010    ;  406				//clear_buffer(slot);
                           A  5011    ;  407				
                           A  5012    ;  408				vdp_bitmapSelect(slot);
                           A  5013    .LINE 408
                           A  5014    
0B172B DD4E0C              A  5015    	LD	C,(IX+%C)
0B172E 0600                A  5016    	LD	B,%0
0B1730 C5                  A  5017    	PUSH	BC
0B1731 CD 58 31 0B         A  5018    	CALL	_vdp_bitmapSelect
0B1735 C1                  A  5019    	POP	BC
                           A  5020    ;  409				putch(23); // vdu_sys
                           A  5021    .LINE 409
                           A  5022    
0B1736 01170000            A  5023    	LD	BC,23
0B173A C5                  A  5024    	PUSH	BC
0B173B CD B9 38 0B         A  5025    	CALL	_putch
0B173F C1                  A  5026    	POP	BC
                           A  5027    ;  410				putch(27); // sprite comman
                           A  5028    .LINE 410
                           A  5029    
0B1740 011B0000            A  5030    	LD	BC,27
0B1744 C5                  A  5031    	PUSH	BC
0B1745 CD B9 38 0B         A  5032    	CALL	_putch
0B1749 C1                  A  5033    	POP	BC
                           A  5034    ;  411				putch(1); // send data to s
                           A  5035    .LINE 411
                           A  5036    
0B174A 01010000            A  5037    	LD	BC,1
0B174E C5                  A  5038    	PUSH	BC
0B174F CD B9 38 0B         A  5039    	CALL	_putch
0B1753 C1                  A  5040    	POP	BC
                           A  5041    ;  412	
                           A  5042    ;  413				write16bit(bmp.bmp_width);
                           A  5043    .LINE 413
                           A  5044    
0B1754 219DFBFF            A  5045    	LD	HL,-1123
0B1758 DDE5C1              A  5046    	LD	BC,IX
0B175B 09                  A  5047    	ADD	HL,BC
0B175C ED07                A  5048    	LD	BC,(HL)
0B175E C5                  A  5049    	PUSH	BC
0B175F CD F7 2C 0B         A  5050    	CALL	_write16bit
0B1763 C1                  A  5051    	POP	BC
                           A  5052    ;  414				write16bit(bmp.bmp_height);
                           A  5053    .LINE 414
                           A  5054    
0B1764 219FFBFF            A  5055    	LD	HL,-1121
0B1768 DDE5C1              A  5056    	LD	BC,IX
0B176B 09                  A  5057    	ADD	HL,BC
0B176C ED07                A  5058    	LD	BC,(HL)
0B176E C5                  A  5059    	PUSH	BC
0B176F CD F7 2C 0B         A  5060    	CALL	_write16bit
0B1773 C1                  A  5061    	POP	BC
                           A  5062    ;  415	
                           A  5063    ;  416				for (y = bmp.bmp_height - 1
                           A  5064    .LINE 416
                           A  5065    
0B1774 219FFBFF            A  5066    	LD	HL,-1121
0B1778 DDE5C1              A  5067    	LD	BC,IX
0B177B 09                  A  5068    	ADD	HL,BC
0B177C ED27                A  5069    	LD	HL,(HL)
0B177E 2B                  A  5070    	DEC	HL
0B177F DD75FA              A  5071    	LD	(IX+%FFFFFFFA),L
0B1782 DD74FB              A  5072    	LD	(IX+%FFFFFFFB),H
0B1785 C3 48 18 0B         A  5073    	JR	L_115
0B1789                     A  5074    L_113:
                           A  5075    ;  417	
                           A  5076    ;  418					//printf("Row: %u\r\n",
                           A  5077    ;  419					mos_fread(file, src, bm
                           A  5078    .LINE 419
                           A  5079    
0B1789 DD07CC              A  5080    	LD	BC,(IX+%FFFFFFCC)
0B178C CD 9E 40 0B         A  5081    	CALL	__stoiu
0B1790 E5                  A  5082    	PUSH	HL
0B1791 DD07E9              A  5083    	LD	BC,(IX+%FFFFFFE9)
0B1794 C5                  A  5084    	PUSH	BC
0B1795 DD4EFF              A  5085    	LD	C,(IX+%FFFFFFFF)
0B1798 0600                A  5086    	LD	B,%0
0B179A C5                  A  5087    	PUSH	BC
0B179B CD 3E 3C 0B         A  5088    	CALL	_mos_fread
0B179F C1                  A  5089    	POP	BC
0B17A0 C1                  A  5090    	POP	BC
0B17A1 C1                  A  5091    	POP	BC
                           A  5092    ;  420					generic8888_to_rgba8888
                           A  5093    .LINE 420
                           A  5094    
0B17A2 DD4EC9              A  5095    	LD	C,(IX+%FFFFFFC9)
0B17A5 0600                A  5096    	LD	B,%0
0B17A7 C5                  A  5097    	PUSH	BC
0B17A8 DD4EC8              A  5098    	LD	C,(IX+%FFFFFFC8)
0B17AB C5                  A  5099    	PUSH	BC
0B17AC DD4EC7              A  5100    	LD	C,(IX+%FFFFFFC7)
0B17AF C5                  A  5101    	PUSH	BC
0B17B0 DD4EC6              A  5102    	LD	C,(IX+%FFFFFFC6)
0B17B3 C5                  A  5103    	PUSH	BC
0B17B4 21A1FBFF            A  5104    	LD	HL,-1119
0B17B8 DDE5C1              A  5105    	LD	BC,IX
0B17BB 09                  A  5106    	ADD	HL,BC
0B17BC 7E                  A  5107    	LD	A,(HL)
0B17BD B7ED62              A  5108    	UEXT	HL
0B17C0 6F                  A  5109    	LD	L,A
0B17C1 01080000            A  5110    	LD	BC,8
0B17C5 CD 9B 47 0B         A  5111    	CALL	__idivs
0B17C9 4D                  A  5112    	LD	C,L
0B17CA 0600                A  5113    	LD	B,%0
0B17CC C5                  A  5114    	PUSH	BC
0B17CD 219DFBFF            A  5115    	LD	HL,-1123
0B17D1 DDE5C1              A  5116    	LD	BC,IX
0B17D4 09                  A  5117    	ADD	HL,BC
0B17D5 ED07                A  5118    	LD	BC,(HL)
0B17D7 CD 9E 40 0B         A  5119    	CALL	__stoiu
0B17DB E5                  A  5120    	PUSH	HL
0B17DC DD07E6              A  5121    	LD	BC,(IX+%FFFFFFE6)
0B17DF C5                  A  5122    	PUSH	BC
0B17E0 DD07E9              A  5123    	LD	BC,(IX+%FFFFFFE9)
0B17E3 C5                  A  5124    	PUSH	BC
0B17E4 CD B4 07 0B         A  5125    	CALL	_generic8888_to_rgba8888
0B17E8 FD211800 00         A  5126    	LD	IY,24
0B17ED FD39                A  5127    	ADD	IY,SP
0B17EF FDF9                A  5128    	LD	SP,IY
                           A  5129    ;  421					mos_puts(dst, bmp.non_p
                           A  5130    .LINE 421
                           A  5131    
0B17F1 01000000            A  5132    	LD	BC,0
0B17F5 C5                  A  5133    	PUSH	BC
0B17F6 DD07CC              A  5134    	LD	BC,(IX+%FFFFFFCC)
0B17F9 CD 9E 40 0B         A  5135    	CALL	__stoiu
0B17FD E5                  A  5136    	PUSH	HL
0B17FE DD07E6              A  5137    	LD	BC,(IX+%FFFFFFE6)
0B1801 C5                  A  5138    	PUSH	BC
0B1802 CD D1 38 0B         A  5139    	CALL	_mos_puts
0B1806 C1                  A  5140    	POP	BC
0B1807 C1                  A  5141    	POP	BC
0B1808 C1                  A  5142    	POP	BC
                           A  5143    ;  422					mos_flseek(file, fo -> 
                           A  5144    .LINE 422
                           A  5145    
0B1809 DD07CC              A  5146    	LD	BC,(IX+%FFFFFFCC)
0B180C CD 9E 40 0B         A  5147    	CALL	__stoiu
0B1810 29                  A  5148    	ADD	HL,HL
0B1811 E5D1                A  5149    	LD	DE,HL
0B1813 DD07CA              A  5150    	LD	BC,(IX+%FFFFFFCA)
0B1816 CD 9E 40 0B         A  5151    	CALL	__stoiu
0B181A 19                  A  5152    	ADD	HL,DE
0B181B E5C1                A  5153    	LD	BC,HL
0B181D CD D4 47 0B         A  5154    	CALL	__itol
0B1821 DD31EF              A  5155    	LD	IY,(IX+%FFFFFFEF)
0B1824 FD2711              A  5156    	LD	HL,(IY+%11)
0B1827 FD5E14              A  5157    	LD	E,(IY+%14)
0B182A CD C2 44 0B         A  5158    	CALL	__lsub
0B182E 4B                  A  5159    	LD	C,E
0B182F 0600                A  5160    	LD	B,%0
0B1831 C5                  A  5161    	PUSH	BC
0B1832 E5                  A  5162    	PUSH	HL
0B1833 DD4EFF              A  5163    	LD	C,(IX+%FFFFFFFF)
0B1836 C5                  A  5164    	PUSH	BC
0B1837 CD 78 3C 0B         A  5165    	CALL	_mos_flseek
0B183B C1                  A  5166    	POP	BC
0B183C C1                  A  5167    	POP	BC
0B183D C1                  A  5168    	POP	BC
0B183E DD27FA              A  5169    	LD	HL,(IX+%FFFFFFFA)
0B1841 2B                  A  5170    	DEC	HL
0B1842 DD75FA              A  5171    	LD	(IX+%FFFFFFFA),L
0B1845 DD74FB              A  5172    	LD	(IX+%FFFFFFFB),H
                           A  5173    ;  423	
                           A  5174    ;  424				}
0B1848                     A  5175    L_115:
                           A  5176    .LINE 424
                           A  5177    
0B1848 49010000            A  5178    	LD.LIS	BC,0
0B184C DD27FA              A  5179    	LD	HL,(IX+%FFFFFFFA)
0B184F B7                  A  5180    	OR	A,A
0B1850 40ED42              A  5181    	SBC.SIS	HL,BC
0B1853 F2 89 17 0B         A  5182    	JP	P,L_113
                           A  5183    ;  425				free(src);
                           A  5184    .LINE 425
                           A  5185    
0B1857 DD07E9              A  5186    	LD	BC,(IX+%FFFFFFE9)
0B185A C5                  A  5187    	PUSH	BC
0B185B CD C2 3C 0B         A  5188    	CALL	_free
0B185F C1                  A  5189    	POP	BC
                           A  5190    ;  426				
                           A  5191    ;  427			}
                           A  5192    ;  428			
                           A  5193    ;  429		} else if (bmp.compression == 0) {
                           A  5194    .LINE 429
                           A  5195    
0B1860 C3 B4 1C 0B         A  5196    	JR	L_143
0B1864                     A  5197    L_141:
0B1864 FD21AEFB FF         A  5198    	LD	IY,-1106
0B1869 DDE5C1              A  5199    	LD	BC,IX
0B186C FD09                A  5200    	ADD	IY,BC
0B186E FD2700              A  5201    	LD	HL,(IY)
0B1871 FD5E03              A  5202    	LD	E,(IY+%3)
0B1874 01000000            A  5203    	LD	BC,0
0B1878 AF                  A  5204    	XOR	A,A
0B1879 CD DB 47 0B         A  5205    	CALL	__lcmpu
0B187D C2 B4 1C 0B         A  5206    	JR	NZ,L_143
                           A  5207    ;  430	
                           A  5208    ;  431			if (bmp.bmp_bitdepth == 16) {
                           A  5209    .LINE 431
                           A  5210    
0B1881 21A1FBFF            A  5211    	LD	HL,-1119
0B1885 DDE5C1              A  5212    	LD	BC,IX
0B1888 09                  A  5213    	ADD	HL,BC
0B1889 7E                  A  5214    	LD	A,(HL)
0B188A FE10                A  5215    	CP	A,%10
0B188C 20 2D               A  5216    	JR	NZ,L_131
                           A  5217    ;  432				
                           A  5218    ;  433				printf("16-bit BMP files no
                           A  5219    .LINE 433
                           A  5220    
0B188E 01 A4 40 0B         A  5221    	LD	BC,___print_uputch
0B1892 ED43 1B 4B 0B       A  5222    	LD	(___print_xputch),BC
0B1897 01 3E 4D 0B         A  5223    	LD	BC,L__111
0B189B C5                  A  5224    	PUSH	BC
0B189C CD EC 3E 0B         A  5225    	CALL	___print_sendstring
0B18A0 C1                  A  5226    	POP	BC
                           A  5227    ;  434				return bmp;
                           A  5228    .LINE 434
                           A  5229    
0B18A1 ED2206              A  5230    	LEA	HL,IX+%6
0B18A4 ED17                A  5231    	LD	DE,(HL)
0B18A6 DDE5E1              A  5232    	LD	HL,IX
0B18A9 019DFBFF            A  5233    	LD	BC,-1123
0B18AD 09                  A  5234    	ADD	HL,BC
0B18AE 01310400            A  5235    	LD	BC,1073
0B18B2 EDB0                A  5236    	LDIR	
0B18B4 DD2706              A  5237    	LD	HL,(IX+%6)
0B18B7 C3 DE 1C 0B         A  5238    	JR	L_144
                           A  5239    ;  435				
                           A  5240    ;  436			} else if (bmp.bmp_bitdepth == 
0B18BB                     A  5241    L_131:
                           A  5242    .LINE 436
                           A  5243    
0B18BB 21A1FBFF            A  5244    	LD	HL,-1119
0B18BF 09                  A  5245    	ADD	HL,BC
0B18C0 7E                  A  5246    	LD	A,(HL)
0B18C1 FE08                A  5247    	CP	A,%8
0B18C3 C2 91 1A 0B         A  5248    	JR	NZ,L_138
                           A  5249    ;  437				
                           A  5250    ;  438				int16_t x,y;
                           A  5251    ;  439				uint8_t index, b, g, r;
                           A  5252    ;  440	
                           A  5253    ;  441				mos_flseek(file, bmp.pixels
                           A  5254    .LINE 441
                           A  5255    
0B18C7 219FFBFF            A  5256    	LD	HL,-1121
0B18CB 09                  A  5257    	ADD	HL,BC
0B18CC ED07                A  5258    	LD	BC,(HL)
0B18CE CD 9E 40 0B         A  5259    	CALL	__stoiu
0B18D2 E5D1                A  5260    	LD	DE,HL
0B18D4 1B                  A  5261    	DEC	DE
0B18D5 DD07CC              A  5262    	LD	BC,(IX+%FFFFFFCC)
0B18D8 CD 9E 40 0B         A  5263    	CALL	__stoiu
0B18DC E5C1                A  5264    	LD	BC,HL
0B18DE C5E1                A  5265    	LD	HL,BC
0B18E0 0194FBFF            A  5266    	LD	BC,-1132	; spill
0B18E4 CD D7 3E 0B         A  5267    	CALL	__istix
0B18E8 DD07CA              A  5268    	LD	BC,(IX+%FFFFFFCA)
0B18EB CD 9E 40 0B         A  5269    	CALL	__stoiu
0B18EF 0194FBFF            A  5270    	LD	BC,-1132	; unspill
0B18F3 E5                  A  5271    	PUSH	HL
0B18F4 CD BE 4A 0B         A  5272    	CALL	__ildix
0B18F8 E5C1                A  5273    	LD	BC,HL
0B18FA E1                  A  5274    	POP	HL
0B18FB 09                  A  5275    	ADD	HL,BC
0B18FC E5C1                A  5276    	LD	BC,HL
0B18FE D5E1                A  5277    	LD	HL,DE
0B1900 CD 5F 47 0B         A  5278    	CALL	__imuls
0B1904 E5C1                A  5279    	LD	BC,HL
0B1906 CD D4 47 0B         A  5280    	CALL	__itol
0B190A FD21A2FB FF         A  5281    	LD	IY,-1118
0B190F DDE5D1              A  5282    	LD	DE,IX
0B1912 FD19                A  5283    	ADD	IY,DE
0B1914 FD2700              A  5284    	LD	HL,(IY)
0B1917 FD5E03              A  5285    	LD	E,(IY+%3)
0B191A CD BC 3C 0B         A  5286    	CALL	__ladd
0B191E 4B                  A  5287    	LD	C,E
0B191F 0600                A  5288    	LD	B,%0
0B1921 C5                  A  5289    	PUSH	BC
0B1922 E5                  A  5290    	PUSH	HL
0B1923 DD4EFF              A  5291    	LD	C,(IX+%FFFFFFFF)
0B1926 C5                  A  5292    	PUSH	BC
0B1927 CD 78 3C 0B         A  5293    	CALL	_mos_flseek
0B192B C1                  A  5294    	POP	BC
0B192C C1                  A  5295    	POP	BC
0B192D C1                  A  5296    	POP	BC
                           A  5297    ;  442				//clear_buffer(slot);
                           A  5298    ;  443				vdp_bitmapSelect(slot);
                           A  5299    .LINE 443
                           A  5300    
0B192E DD4E0C              A  5301    	LD	C,(IX+%C)
0B1931 0600                A  5302    	LD	B,%0
0B1933 C5                  A  5303    	PUSH	BC
0B1934 CD 58 31 0B         A  5304    	CALL	_vdp_bitmapSelect
0B1938 C1                  A  5305    	POP	BC
                           A  5306    ;  444				putch(23); // vdu_sys
                           A  5307    .LINE 444
                           A  5308    
0B1939 01170000            A  5309    	LD	BC,23
0B193D C5                  A  5310    	PUSH	BC
0B193E CD B9 38 0B         A  5311    	CALL	_putch
0B1942 C1                  A  5312    	POP	BC
                           A  5313    ;  445				putch(27); // sprite comman
                           A  5314    .LINE 445
                           A  5315    
0B1943 011B0000            A  5316    	LD	BC,27
0B1947 C5                  A  5317    	PUSH	BC
0B1948 CD B9 38 0B         A  5318    	CALL	_putch
0B194C C1                  A  5319    	POP	BC
                           A  5320    ;  446				putch(1); // send data to s
                           A  5321    .LINE 446
                           A  5322    
0B194D 01010000            A  5323    	LD	BC,1
0B1951 C5                  A  5324    	PUSH	BC
0B1952 CD B9 38 0B         A  5325    	CALL	_putch
0B1956 C1                  A  5326    	POP	BC
                           A  5327    ;  447	
                           A  5328    ;  448				write16bit(bmp.bmp_width);
                           A  5329    .LINE 448
                           A  5330    
0B1957 219DFBFF            A  5331    	LD	HL,-1123
0B195B DDE5C1              A  5332    	LD	BC,IX
0B195E 09                  A  5333    	ADD	HL,BC
0B195F ED07                A  5334    	LD	BC,(HL)
0B1961 C5                  A  5335    	PUSH	BC
0B1962 CD F7 2C 0B         A  5336    	CALL	_write16bit
0B1966 C1                  A  5337    	POP	BC
                           A  5338    ;  449				write16bit(bmp.bmp_height);
                           A  5339    .LINE 449
                           A  5340    
0B1967 219FFBFF            A  5341    	LD	HL,-1121
0B196B DDE5C1              A  5342    	LD	BC,IX
0B196E 09                  A  5343    	ADD	HL,BC
0B196F ED07                A  5344    	LD	BC,(HL)
0B1971 C5                  A  5345    	PUSH	BC
0B1972 CD F7 2C 0B         A  5346    	CALL	_write16bit
0B1976 C1                  A  5347    	POP	BC
                           A  5348    ;  450				
                           A  5349    ;  451				for (y = bmp.bmp_height - 1
                           A  5350    .LINE 451
                           A  5351    
0B1977 219FFBFF            A  5352    	LD	HL,-1121
0B197B DDE5C1              A  5353    	LD	BC,IX
0B197E 09                  A  5354    	ADD	HL,BC
0B197F ED27                A  5355    	LD	HL,(HL)
0B1981 2B                  A  5356    	DEC	HL
0B1982 DD75F6              A  5357    	LD	(IX+%FFFFFFF6),L
0B1985 DD74F7              A  5358    	LD	(IX+%FFFFFFF7),H
0B1988 C3 78 1A 0B         A  5359    	JR	L_128
0B198C                     A  5360    L_126:
                           A  5361    ;  452					for (x = 0; x < bmp.bmp
                           A  5362    .LINE 452
                           A  5363    
0B198C DD36F800            A  5364    	LD	(IX+%FFFFFFF8),%0
0B1990 DD36F900            A  5365    	LD	(IX+%FFFFFFF9),%0
0B1994 18 7B               A  5366    	JR	L_124
0B1996                     A  5367    L_122:
                           A  5368    ;  453	
                           A  5369    ;  454						index = (char) mos_
                           A  5370    .LINE 454
                           A  5371    
0B1996 DD4EFF              A  5372    	LD	C,(IX+%FFFFFFFF)
0B1999 0600                A  5373    	LD	B,%0
0B199B C5                  A  5374    	PUSH	BC
0B199C CD 3E 3B 0B         A  5375    	CALL	_mos_fgetc
0B19A0 C1                  A  5376    	POP	BC
0B19A1 DD77F5              A  5377    	LD	(IX+%FFFFFFF5),A
                           A  5378    ;  455						//b = bmp.color_tab
                           A  5379    ;  456						//g = bmp.color_tab
                           A  5380    ;  457						//r = bmp.color_tab
                           A  5381    ;  458						
                           A  5382    ;  459						putch(bmp.color_tab
                           A  5383    .LINE 459
                           A  5384    
0B19A4 DDE5E1              A  5385    	LD	HL,IX
0B19A7 01C6FBFF            A  5386    	LD	BC,-1082
0B19AB 09                  A  5387    	ADD	HL,BC
0B19AC DD2FF2              A  5388    	LD	(IX+%FFFFFFF2),HL
0B19AF DD7EF5              A  5389    	LD	A,(IX+%FFFFFFF5)
0B19B2 B7ED62              A  5390    	UEXT	HL
0B19B5 6F                  A  5391    	LD	L,A
0B19B6 29                  A  5392    	ADD	HL,HL
0B19B7 29                  A  5393    	ADD	HL,HL
0B19B8 DD07F2              A  5394    	LD	BC,(IX+%FFFFFFF2)
0B19BB 09                  A  5395    	ADD	HL,BC
0B19BC 23                  A  5396    	INC	HL
0B19BD 23                  A  5397    	INC	HL
0B19BE 7E                  A  5398    	LD	A,(HL)
0B19BF 47                  A  5399    	LD	B,A
0B19C0 17ED62              A  5400    	SEXT	HL
0B19C3 68                  A  5401    	LD	L,B
0B19C4 E5                  A  5402    	PUSH	HL
0B19C5 CD B9 38 0B         A  5403    	CALL	_putch
0B19C9 C1                  A  5404    	POP	BC
                           A  5405    ;  460						putch(bmp.color_tab
                           A  5406    .LINE 460
                           A  5407    
0B19CA DD7EF5              A  5408    	LD	A,(IX+%FFFFFFF5)
0B19CD B7ED62              A  5409    	UEXT	HL
0B19D0 6F                  A  5410    	LD	L,A
0B19D1 29                  A  5411    	ADD	HL,HL
0B19D2 29                  A  5412    	ADD	HL,HL
0B19D3 DD07F2              A  5413    	LD	BC,(IX+%FFFFFFF2)
0B19D6 09                  A  5414    	ADD	HL,BC
0B19D7 23                  A  5415    	INC	HL
0B19D8 7E                  A  5416    	LD	A,(HL)
0B19D9 47                  A  5417    	LD	B,A
0B19DA 17ED62              A  5418    	SEXT	HL
0B19DD 68                  A  5419    	LD	L,B
0B19DE E5                  A  5420    	PUSH	HL
0B19DF CD B9 38 0B         A  5421    	CALL	_putch
0B19E3 C1                  A  5422    	POP	BC
                           A  5423    ;  461						putch(bmp.color_tab
                           A  5424    .LINE 461
                           A  5425    
0B19E4 DD7EF5              A  5426    	LD	A,(IX+%FFFFFFF5)
0B19E7 B7ED62              A  5427    	UEXT	HL
0B19EA 6F                  A  5428    	LD	L,A
0B19EB 29                  A  5429    	ADD	HL,HL
0B19EC 29                  A  5430    	ADD	HL,HL
0B19ED DD07F2              A  5431    	LD	BC,(IX+%FFFFFFF2)
0B19F0 09                  A  5432    	ADD	HL,BC
0B19F1 7E                  A  5433    	LD	A,(HL)
0B19F2 47                  A  5434    	LD	B,A
0B19F3 17ED62              A  5435    	SEXT	HL
0B19F6 68                  A  5436    	LD	L,B
0B19F7 E5                  A  5437    	PUSH	HL
0B19F8 CD B9 38 0B         A  5438    	CALL	_putch
0B19FC C1                  A  5439    	POP	BC
                           A  5440    ;  462						putch(0xFF);
                           A  5441    .LINE 462
                           A  5442    
0B19FD 01FF0000            A  5443    	LD	BC,255
0B1A01 C5                  A  5444    	PUSH	BC
0B1A02 CD B9 38 0B         A  5445    	CALL	_putch
0B1A06 C1                  A  5446    	POP	BC
0B1A07 DD27F8              A  5447    	LD	HL,(IX+%FFFFFFF8)
0B1A0A 23                  A  5448    	INC	HL
0B1A0B DD75F8              A  5449    	LD	(IX+%FFFFFFF8),L
0B1A0E DD74F9              A  5450    	LD	(IX+%FFFFFFF9),H
                           A  5451    ;  463	
                           A  5452    ;  464					}
0B1A11                     A  5453    L_124:
                           A  5454    .LINE 464
                           A  5455    
0B1A11 219DFBFF            A  5456    	LD	HL,-1123
0B1A15 DDE5C1              A  5457    	LD	BC,IX
0B1A18 09                  A  5458    	ADD	HL,BC
0B1A19 ED07                A  5459    	LD	BC,(HL)
0B1A1B CD 9E 40 0B         A  5460    	CALL	__stoiu
0B1A1F E5D1                A  5461    	LD	DE,HL
0B1A21 DD07F8              A  5462    	LD	BC,(IX+%FFFFFFF8)
0B1A24 CD 49 4A 0B         A  5463    	CALL	__stoi
0B1A28 B7                  A  5464    	OR	A,A
0B1A29 ED52                A  5465    	SBC	HL,DE
0B1A2B FA 35 1A 0B         A  5466    	JP	M,L__117
0B1A2F EA 96 19 0B         A  5467    	JP	PE,L_122
0B1A33 18 04               A  5468    	JR	L__118
0B1A35                     A  5469    L__117:
0B1A35 E2 96 19 0B         A  5470    	JP	PO,L_122
0B1A39                     A  5471    L__118:
                           A  5472    ;  465					
                           A  5473    ;  466					//add_stream_to_buffer(
                           A  5474    ;  467					//mos_puts(row_rgba2222
                           A  5475    ;  468					mos_flseek(file, fo -> 
                           A  5476    .LINE 468
                           A  5477    
0B1A39 DD07CC              A  5478    	LD	BC,(IX+%FFFFFFCC)
0B1A3C CD 9E 40 0B         A  5479    	CALL	__stoiu
0B1A40 29                  A  5480    	ADD	HL,HL
0B1A41 E5D1                A  5481    	LD	DE,HL
0B1A43 DD07CA              A  5482    	LD	BC,(IX+%FFFFFFCA)
0B1A46 CD 9E 40 0B         A  5483    	CALL	__stoiu
0B1A4A 19                  A  5484    	ADD	HL,DE
0B1A4B E5C1                A  5485    	LD	BC,HL
0B1A4D CD D4 47 0B         A  5486    	CALL	__itol
0B1A51 DD31EF              A  5487    	LD	IY,(IX+%FFFFFFEF)
0B1A54 FD2711              A  5488    	LD	HL,(IY+%11)
0B1A57 FD5E14              A  5489    	LD	E,(IY+%14)
0B1A5A CD C2 44 0B         A  5490    	CALL	__lsub
0B1A5E 4B                  A  5491    	LD	C,E
0B1A5F 0600                A  5492    	LD	B,%0
0B1A61 C5                  A  5493    	PUSH	BC
0B1A62 E5                  A  5494    	PUSH	HL
0B1A63 DD4EFF              A  5495    	LD	C,(IX+%FFFFFFFF)
0B1A66 C5                  A  5496    	PUSH	BC
0B1A67 CD 78 3C 0B         A  5497    	CALL	_mos_flseek
0B1A6B C1                  A  5498    	POP	BC
0B1A6C C1                  A  5499    	POP	BC
0B1A6D C1                  A  5500    	POP	BC
0B1A6E DD27F6              A  5501    	LD	HL,(IX+%FFFFFFF6)
0B1A71 2B                  A  5502    	DEC	HL
0B1A72 DD75F6              A  5503    	LD	(IX+%FFFFFFF6),L
0B1A75 DD74F7              A  5504    	LD	(IX+%FFFFFFF7),H
                           A  5505    ;  469	
                           A  5506    ;  470				}
0B1A78                     A  5507    L_128:
                           A  5508    .LINE 470
                           A  5509    
0B1A78 49010000            A  5510    	LD.LIS	BC,0
0B1A7C DD27F6              A  5511    	LD	HL,(IX+%FFFFFFF6)
0B1A7F B7                  A  5512    	OR	A,A
0B1A80 40ED42              A  5513    	SBC.SIS	HL,BC
0B1A83 F2 8D 1A 0B         A  5514    	JP	P,L__119
0B1A87 EA 8C 19 0B         A  5515    	JP	PE,L_126
0B1A8B 18 04               A  5516    	JR	L__120
0B1A8D                     A  5517    L__119:
0B1A8D E2 8C 19 0B         A  5518    	JP	PO,L_126
0B1A91                     A  5519    L__120:
                           A  5520    ;  471	
                           A  5521    ;  472			}
0B1A91                     A  5522    L_138:
                           A  5523    .LINE 472
                           A  5524    
                           A  5525    ;  473			
                           A  5526    ;  474			if (bmp.bmp_bitdepth == 24) {
                           A  5527    .LINE 474
                           A  5528    
0B1A91 21A1FBFF            A  5529    	LD	HL,-1119
0B1A95 DDE5C1              A  5530    	LD	BC,IX
0B1A98 09                  A  5531    	ADD	HL,BC
0B1A99 7E                  A  5532    	LD	A,(HL)
0B1A9A FE18                A  5533    	CP	A,%18
0B1A9C C2 B4 1C 0B         A  5534    	JR	NZ,L_143
                           A  5535    ;  475				char * src;
                           A  5536    ;  476				char * dst;
                           A  5537    ;  477				
                           A  5538    ;  478			    src = malloc(bmp.bmp_width 
                           A  5539    .LINE 478
                           A  5540    
0B1AA0 219DFBFF            A  5541    	LD	HL,-1123
0B1AA4 09                  A  5542    	ADD	HL,BC
0B1AA5 ED07                A  5543    	LD	BC,(HL)
0B1AA7 CD 9E 40 0B         A  5544    	CALL	__stoiu
0B1AAB E5D1                A  5545    	LD	DE,HL
0B1AAD 21A1FBFF            A  5546    	LD	HL,-1119
0B1AB1 DDE5C1              A  5547    	LD	BC,IX
0B1AB4 09                  A  5548    	ADD	HL,BC
0B1AB5 7E                  A  5549    	LD	A,(HL)
0B1AB6 B7ED62              A  5550    	UEXT	HL
0B1AB9 6F                  A  5551    	LD	L,A
0B1ABA E5C1                A  5552    	LD	BC,HL
0B1ABC D5E1                A  5553    	LD	HL,DE
0B1ABE CD 5F 47 0B         A  5554    	CALL	__imuls
0B1AC2 01080000            A  5555    	LD	BC,8
0B1AC6 CD 9B 47 0B         A  5556    	CALL	__idivs
0B1ACA E5                  A  5557    	PUSH	HL
0B1ACB CD C7 3D 0B         A  5558    	CALL	_malloc
0B1ACF C1                  A  5559    	POP	BC
0B1AD0 DD2FEC              A  5560    	LD	(IX+%FFFFFFEC),HL
                           A  5561    ;  479				dst = malloc(bmp.bmp_width 
                           A  5562    .LINE 479
                           A  5563    
0B1AD3 219DFBFF            A  5564    	LD	HL,-1123
0B1AD7 DDE5C1              A  5565    	LD	BC,IX
0B1ADA 09                  A  5566    	ADD	HL,BC
0B1ADB ED07                A  5567    	LD	BC,(HL)
0B1ADD CD 9E 40 0B         A  5568    	CALL	__stoiu
0B1AE1 E5D1                A  5569    	LD	DE,HL
0B1AE3 21A1FBFF            A  5570    	LD	HL,-1119
0B1AE7 DDE5C1              A  5571    	LD	BC,IX
0B1AEA 09                  A  5572    	ADD	HL,BC
0B1AEB 7E                  A  5573    	LD	A,(HL)
0B1AEC B7ED62              A  5574    	UEXT	HL
0B1AEF 6F                  A  5575    	LD	L,A
0B1AF0 E5C1                A  5576    	LD	BC,HL
0B1AF2 D5E1                A  5577    	LD	HL,DE
0B1AF4 CD 5F 47 0B         A  5578    	CALL	__imuls
0B1AF8 01080000            A  5579    	LD	BC,8
0B1AFC CD 9B 47 0B         A  5580    	CALL	__idivs
0B1B00 E5                  A  5581    	PUSH	HL
0B1B01 CD C7 3D 0B         A  5582    	CALL	_malloc
0B1B05 C1                  A  5583    	POP	BC
0B1B06 DD2FE0              A  5584    	LD	(IX+%FFFFFFE0),HL
                           A  5585    ;  480				mos_flseek(file, bmp.pixels
                           A  5586    .LINE 480
                           A  5587    
0B1B09 219FFBFF            A  5588    	LD	HL,-1121
0B1B0D DDE5C1              A  5589    	LD	BC,IX
0B1B10 09                  A  5590    	ADD	HL,BC
0B1B11 ED07                A  5591    	LD	BC,(HL)
0B1B13 CD 9E 40 0B         A  5592    	CALL	__stoiu
0B1B17 E5D1                A  5593    	LD	DE,HL
0B1B19 1B                  A  5594    	DEC	DE
0B1B1A DD07CC              A  5595    	LD	BC,(IX+%FFFFFFCC)
0B1B1D CD 9E 40 0B         A  5596    	CALL	__stoiu
0B1B21 E5C1                A  5597    	LD	BC,HL
0B1B23 C5E1                A  5598    	LD	HL,BC
0B1B25 0197FBFF            A  5599    	LD	BC,-1129	; spill
0B1B29 CD D7 3E 0B         A  5600    	CALL	__istix
0B1B2D DD07CA              A  5601    	LD	BC,(IX+%FFFFFFCA)
0B1B30 CD 9E 40 0B         A  5602    	CALL	__stoiu
0B1B34 0197FBFF            A  5603    	LD	BC,-1129	; unspill
0B1B38 E5                  A  5604    	PUSH	HL
0B1B39 CD BE 4A 0B         A  5605    	CALL	__ildix
0B1B3D E5C1                A  5606    	LD	BC,HL
0B1B3F E1                  A  5607    	POP	HL
0B1B40 09                  A  5608    	ADD	HL,BC
0B1B41 E5C1                A  5609    	LD	BC,HL
0B1B43 D5E1                A  5610    	LD	HL,DE
0B1B45 CD 5F 47 0B         A  5611    	CALL	__imuls
0B1B49 E5C1                A  5612    	LD	BC,HL
0B1B4B CD D4 47 0B         A  5613    	CALL	__itol
0B1B4F FD21A2FB FF         A  5614    	LD	IY,-1118
0B1B54 DDE5D1              A  5615    	LD	DE,IX
0B1B57 FD19                A  5616    	ADD	IY,DE
0B1B59 FD2700              A  5617    	LD	HL,(IY)
0B1B5C FD5E03              A  5618    	LD	E,(IY+%3)
0B1B5F CD BC 3C 0B         A  5619    	CALL	__ladd
0B1B63 4B                  A  5620    	LD	C,E
0B1B64 0600                A  5621    	LD	B,%0
0B1B66 C5                  A  5622    	PUSH	BC
0B1B67 E5                  A  5623    	PUSH	HL
0B1B68 DD4EFF              A  5624    	LD	C,(IX+%FFFFFFFF)
0B1B6B C5                  A  5625    	PUSH	BC
0B1B6C CD 78 3C 0B         A  5626    	CALL	_mos_flseek
0B1B70 C1                  A  5627    	POP	BC
0B1B71 C1                  A  5628    	POP	BC
0B1B72 C1                  A  5629    	POP	BC
                           A  5630    ;  481				
                           A  5631    ;  482				vdp_bitmapSelect(slot);
                           A  5632    .LINE 482
                           A  5633    
0B1B73 DD4E0C              A  5634    	LD	C,(IX+%C)
0B1B76 0600                A  5635    	LD	B,%0
0B1B78 C5                  A  5636    	PUSH	BC
0B1B79 CD 58 31 0B         A  5637    	CALL	_vdp_bitmapSelect
0B1B7D C1                  A  5638    	POP	BC
                           A  5639    ;  483				putch(23); // vdu_sys
                           A  5640    .LINE 483
                           A  5641    
0B1B7E 01170000            A  5642    	LD	BC,23
0B1B82 C5                  A  5643    	PUSH	BC
0B1B83 CD B9 38 0B         A  5644    	CALL	_putch
0B1B87 C1                  A  5645    	POP	BC
                           A  5646    ;  484				putch(27); // sprite comman
                           A  5647    .LINE 484
                           A  5648    
0B1B88 011B0000            A  5649    	LD	BC,27
0B1B8C C5                  A  5650    	PUSH	BC
0B1B8D CD B9 38 0B         A  5651    	CALL	_putch
0B1B91 C1                  A  5652    	POP	BC
                           A  5653    ;  485				putch(1); // send data to s
                           A  5654    .LINE 485
                           A  5655    
0B1B92 01010000            A  5656    	LD	BC,1
0B1B96 C5                  A  5657    	PUSH	BC
0B1B97 CD B9 38 0B         A  5658    	CALL	_putch
0B1B9B C1                  A  5659    	POP	BC
                           A  5660    ;  486	
                           A  5661    ;  487				write16bit(bmp.bmp_width);
                           A  5662    .LINE 487
                           A  5663    
0B1B9C 219DFBFF            A  5664    	LD	HL,-1123
0B1BA0 DDE5C1              A  5665    	LD	BC,IX
0B1BA3 09                  A  5666    	ADD	HL,BC
0B1BA4 ED07                A  5667    	LD	BC,(HL)
0B1BA6 C5                  A  5668    	PUSH	BC
0B1BA7 CD F7 2C 0B         A  5669    	CALL	_write16bit
0B1BAB C1                  A  5670    	POP	BC
                           A  5671    ;  488				write16bit(bmp.bmp_height);
                           A  5672    .LINE 488
                           A  5673    
0B1BAC 219FFBFF            A  5674    	LD	HL,-1121
0B1BB0 DDE5C1              A  5675    	LD	BC,IX
0B1BB3 09                  A  5676    	ADD	HL,BC
0B1BB4 ED07                A  5677    	LD	BC,(HL)
0B1BB6 C5                  A  5678    	PUSH	BC
0B1BB7 CD F7 2C 0B         A  5679    	CALL	_write16bit
0B1BBB C1                  A  5680    	POP	BC
                           A  5681    ;  489				
                           A  5682    ;  490				for (y = bmp.bmp_height - 1
                           A  5683    .LINE 490
                           A  5684    
0B1BBC 219FFBFF            A  5685    	LD	HL,-1121
0B1BC0 DDE5C1              A  5686    	LD	BC,IX
0B1BC3 09                  A  5687    	ADD	HL,BC
0B1BC4 ED27                A  5688    	LD	HL,(HL)
0B1BC6 2B                  A  5689    	DEC	HL
0B1BC7 DD75FA              A  5690    	LD	(IX+%FFFFFFFA),L
0B1BCA DD74FB              A  5691    	LD	(IX+%FFFFFFFB),H
0B1BCD C3 92 1C 0B         A  5692    	JR	L_135
0B1BD1                     A  5693    L_133:
                           A  5694    ;  491	
                           A  5695    ;  492					mos_fread(file, src, bm
                           A  5696    .LINE 492
                           A  5697    
0B1BD1 DD07CC              A  5698    	LD	BC,(IX+%FFFFFFCC)
0B1BD4 CD 9E 40 0B         A  5699    	CALL	__stoiu
0B1BD8 E5                  A  5700    	PUSH	HL
0B1BD9 DD07EC              A  5701    	LD	BC,(IX+%FFFFFFEC)
0B1BDC C5                  A  5702    	PUSH	BC
0B1BDD DD4EFF              A  5703    	LD	C,(IX+%FFFFFFFF)
0B1BE0 0600                A  5704    	LD	B,%0
0B1BE2 C5                  A  5705    	PUSH	BC
0B1BE3 CD 3E 3C 0B         A  5706    	CALL	_mos_fread
0B1BE7 C1                  A  5707    	POP	BC
0B1BE8 C1                  A  5708    	POP	BC
0B1BE9 C1                  A  5709    	POP	BC
                           A  5710    ;  493					generic8888_to_rgba8888
                           A  5711    .LINE 493
                           A  5712    
0B1BEA 01FFFFFF            A  5713    	LD	BC,16777215
0B1BEE C5                  A  5714    	PUSH	BC
0B1BEF 01000000            A  5715    	LD	BC,0
0B1BF3 C5                  A  5716    	PUSH	BC
0B1BF4 01010000            A  5717    	LD	BC,1
0B1BF8 C5                  A  5718    	PUSH	BC
0B1BF9 01020000            A  5719    	LD	BC,2
0B1BFD C5                  A  5720    	PUSH	BC
0B1BFE 21A1FBFF            A  5721    	LD	HL,-1119
0B1C02 DDE5C1              A  5722    	LD	BC,IX
0B1C05 09                  A  5723    	ADD	HL,BC
0B1C06 7E                  A  5724    	LD	A,(HL)
0B1C07 B7ED62              A  5725    	UEXT	HL
0B1C0A 6F                  A  5726    	LD	L,A
0B1C0B 01080000            A  5727    	LD	BC,8
0B1C0F CD 9B 47 0B         A  5728    	CALL	__idivs
0B1C13 4D                  A  5729    	LD	C,L
0B1C14 0600                A  5730    	LD	B,%0
0B1C16 C5                  A  5731    	PUSH	BC
0B1C17 219DFBFF            A  5732    	LD	HL,-1123
0B1C1B DDE5C1              A  5733    	LD	BC,IX
0B1C1E 09                  A  5734    	ADD	HL,BC
0B1C1F ED07                A  5735    	LD	BC,(HL)
0B1C21 CD 9E 40 0B         A  5736    	CALL	__stoiu
0B1C25 E5                  A  5737    	PUSH	HL
0B1C26 DD07E0              A  5738    	LD	BC,(IX+%FFFFFFE0)
0B1C29 C5                  A  5739    	PUSH	BC
0B1C2A DD07EC              A  5740    	LD	BC,(IX+%FFFFFFEC)
0B1C2D C5                  A  5741    	PUSH	BC
0B1C2E CD B4 07 0B         A  5742    	CALL	_generic8888_to_rgba8888
0B1C32 FD211800 00         A  5743    	LD	IY,24
0B1C37 FD39                A  5744    	ADD	IY,SP
0B1C39 FDF9                A  5745    	LD	SP,IY
                           A  5746    ;  494					//add_stream_to_buffer(
                           A  5747    ;  495					mos_puts(row_rgba2222, 
                           A  5748    .LINE 495
                           A  5749    
0B1C3B 01000000            A  5750    	LD	BC,0
0B1C3F C5                  A  5751    	PUSH	BC
0B1C40 DD07CC              A  5752    	LD	BC,(IX+%FFFFFFCC)
0B1C43 CD 9E 40 0B         A  5753    	CALL	__stoiu
0B1C47 E5                  A  5754    	PUSH	HL
0B1C48 DD07E3              A  5755    	LD	BC,(IX+%FFFFFFE3)
0B1C4B C5                  A  5756    	PUSH	BC
0B1C4C CD D1 38 0B         A  5757    	CALL	_mos_puts
0B1C50 C1                  A  5758    	POP	BC
0B1C51 C1                  A  5759    	POP	BC
0B1C52 C1                  A  5760    	POP	BC
                           A  5761    ;  496					mos_flseek(file, fo -> 
                           A  5762    .LINE 496
                           A  5763    
0B1C53 DD07CC              A  5764    	LD	BC,(IX+%FFFFFFCC)
0B1C56 CD 9E 40 0B         A  5765    	CALL	__stoiu
0B1C5A 29                  A  5766    	ADD	HL,HL
0B1C5B E5D1                A  5767    	LD	DE,HL
0B1C5D DD07CA              A  5768    	LD	BC,(IX+%FFFFFFCA)
0B1C60 CD 9E 40 0B         A  5769    	CALL	__stoiu
0B1C64 19                  A  5770    	ADD	HL,DE
0B1C65 E5C1                A  5771    	LD	BC,HL
0B1C67 CD D4 47 0B         A  5772    	CALL	__itol
0B1C6B DD31EF              A  5773    	LD	IY,(IX+%FFFFFFEF)
0B1C6E FD2711              A  5774    	LD	HL,(IY+%11)
0B1C71 FD5E14              A  5775    	LD	E,(IY+%14)
0B1C74 CD C2 44 0B         A  5776    	CALL	__lsub
0B1C78 4B                  A  5777    	LD	C,E
0B1C79 0600                A  5778    	LD	B,%0
0B1C7B C5                  A  5779    	PUSH	BC
0B1C7C E5                  A  5780    	PUSH	HL
0B1C7D DD4EFF              A  5781    	LD	C,(IX+%FFFFFFFF)
0B1C80 C5                  A  5782    	PUSH	BC
0B1C81 CD 78 3C 0B         A  5783    	CALL	_mos_flseek
0B1C85 C1                  A  5784    	POP	BC
0B1C86 C1                  A  5785    	POP	BC
0B1C87 C1                  A  5786    	POP	BC
0B1C88 DD27FA              A  5787    	LD	HL,(IX+%FFFFFFFA)
0B1C8B 2B                  A  5788    	DEC	HL
0B1C8C DD75FA              A  5789    	LD	(IX+%FFFFFFFA),L
0B1C8F DD74FB              A  5790    	LD	(IX+%FFFFFFFB),H
                           A  5791    ;  497	
                           A  5792    ;  498				}		
0B1C92                     A  5793    L_135:
                           A  5794    .LINE 498
                           A  5795    
0B1C92 49010000            A  5796    	LD.LIS	BC,0
0B1C96 DD27FA              A  5797    	LD	HL,(IX+%FFFFFFFA)
0B1C99 B7                  A  5798    	OR	A,A
0B1C9A 40ED42              A  5799    	SBC.SIS	HL,BC
0B1C9D F2 A7 1C 0B         A  5800    	JP	P,L__121
0B1CA1 EA D1 1B 0B         A  5801    	JP	PE,L_133
0B1CA5 18 04               A  5802    	JR	L__122
0B1CA7                     A  5803    L__121:
0B1CA7 E2 D1 1B 0B         A  5804    	JP	PO,L_133
0B1CAB                     A  5805    L__122:
                           A  5806    ;  499				free(src);
                           A  5807    .LINE 499
                           A  5808    
0B1CAB DD07EC              A  5809    	LD	BC,(IX+%FFFFFFEC)
0B1CAE C5                  A  5810    	PUSH	BC
0B1CAF CD C2 3C 0B         A  5811    	CALL	_free
0B1CB3 C1                  A  5812    	POP	BC
                           A  5813    ;  500			
                           A  5814    ;  501			}
                           A  5815    ;  502		}
0B1CB4                     A  5816    L_143:
                           A  5817    .LINE 502
                           A  5818    
                           A  5819    ;  503		
                           A  5820    ;  504		//assign_buffer_to_bitmap(slot,1,bm
                           A  5821    ;  505		free(row_rgba2222);
                           A  5822    .LINE 505
                           A  5823    
0B1CB4 DD07E3              A  5824    	LD	BC,(IX+%FFFFFFE3)
0B1CB7 C5                  A  5825    	PUSH	BC
0B1CB8 CD C2 3C 0B         A  5826    	CALL	_free
0B1CBC C1                  A  5827    	POP	BC
                           A  5828    ;  506		
                           A  5829    ;  507		mos_fclose(file);
                           A  5830    .LINE 507
                           A  5831    
0B1CBD DD4EFF              A  5832    	LD	C,(IX+%FFFFFFFF)
0B1CC0 0600                A  5833    	LD	B,%0
0B1CC2 C5                  A  5834    	PUSH	BC
0B1CC3 CD 29 3B 0B         A  5835    	CALL	_mos_fclose
0B1CC7 C1                  A  5836    	POP	BC
                           A  5837    ;  508		return bmp;
                           A  5838    .LINE 508
                           A  5839    
0B1CC8 ED2206              A  5840    	LEA	HL,IX+%6
0B1CCB ED17                A  5841    	LD	DE,(HL)
0B1CCD DDE5E1              A  5842    	LD	HL,IX
0B1CD0 019DFBFF            A  5843    	LD	BC,-1123
0B1CD4 09                  A  5844    	ADD	HL,BC
0B1CD5 01310400            A  5845    	LD	BC,1073
0B1CD9 EDB0                A  5846    	LDIR	
0B1CDB DD2706              A  5847    	LD	HL,(IX+%6)
                           A  5848    ;  509		
                           A  5849    ;  510	}
0B1CDE                     A  5850    L_144:
                           A  5851    .LINE 510
                           A  5852    
0B1CDE DDF9                A  5853    	LD	SP,IX
0B1CE0 DDE1                A  5854    	POP	IX
0B1CE2 C9                  A  5855    	RET	
                           A  5856    
                           A  5857    
                           A  5858    ;**************************** _load_bmp_clean *
                           A  5859    ;Name                         Addr/Register   S
                           A  5860    ;_mos_fclose                         IMPORT  --
                           A  5861    ;_mos_fgetc                          IMPORT  --
                           A  5862    ;_free                               IMPORT  --
                           A  5863    ;_mos_puts                           IMPORT  --
                           A  5864    ;_write16bit                         IMPORT  --
                           A  5865    ;_putch                              IMPORT  --
                           A  5866    ;_vdp_bitmapSelect                   IMPORT  --
                           A  5867    ;_mos_flseek                         IMPORT  --
                           A  5868    ;_malloc                             IMPORT  --
                           A  5869    ;_mos_fread                          IMPORT  --
                           A  5870    ;___print_sendstring                 IMPORT  --
                           A  5871    ;___print_xputch                     IMPORT    
                           A  5872    ;___print_uputch                     IMPORT  --
                           A  5873    ;_mos_getfil                         IMPORT  --
                           A  5874    ;_mos_fopen                          IMPORT  --
                           A  5875    ;_memset                             IMPORT  --
                           A  5876    ;bmp                                IX-1123   1
                           A  5877    ;initial_header                       IX-50    
                           A  5878    ;dst                                  IX-32    
                           A  5879    ;row_rgba2222                         IX-29    
                           A  5880    ;dst                                  IX-26    
                           A  5881    ;src                                  IX-23    
                           A  5882    ;src                                  IX-20    
                           A  5883    ;fo                                   IX-17    
                           A  5884    ;G_1                                  IX-14    
                           A  5885    ;index                                IX-11    
                           A  5886    ;y                                    IX-10    
                           A  5887    ;x                                     IX-8    
                           A  5888    ;y                                     IX-6    
                           A  5889    ;main_header                           IX-4    
                           A  5890    ;file                                  IX-1    
                           A  5891    ;slot                                 IX+12    
                           A  5892    ;filename                              IX+9    
                           A  5893    
                           A  5894    
                           A  5895    ; Stack Frame Size: 1150 (bytes)
                           A  5896    ;       Spill Code: -3 (instruction)
                           A  5897    
                           A  5898    
                           A  5899    .ENDFUNC "load_bmp_clean",510,"_load_bmp_clean"
                           A  5900    	SEGMENT STRSECT
0B4C9C                     A  5901    L__94:
0B4C9C 4572726F 723A2063   A  5902    	DB	"Error: could not open "
0B4CA4 6F756C64 206E6F74 
0B4CAC 206F7065 6E20 
0B4CB2 00                  A  5903    	DB	0
0B4CB3                     A  5904    L__95:
0B4CB3 2E                  A  5905    	DB	"."
0B4CB4 0D0A00              A  5906    	DB	13,10,0
0B4CB7                     A  5907    L__101:
0B4CB7 4E6F6E20 7374616E   A  5908    	DB	"Non standard BMP compression, exiting.
0B4CBF 64617264 20424D50 
0B4CC7 20636F6D 70726573 
0B4CCF 73696F6E 2C206578 
0B4CD7 6974696E 672E 
0B4CDD 0D0A00              A  5909    	DB	13,10,0
0B4CE0                     A  5910    L__106:
0B4CE0 31362D62 69742042   A  5911    	DB	"16-bit BMP files not supported, use 8-
0B4CE8 4D502066 696C6573 
0B4CF0 206E6F74 20737570 
0B4CF8 706F7274 65642C20 
0B4D00 75736520 382D6269 
0B4D08 74202873 6D616C6C 
0B4D10 292C2032 342D6269 
0B4D18 74202866 61737429 
0B4D20 206F7220 33322D62 
0B4D28 69742028 616C7068 
0B4D30 612D656E 61626C65 
0B4D38 64292E 
0B4D3B 0D0A00              A  5912    	DB	13,10,0
0B4D3E                     A  5913    L__111:
0B4D3E 31362D62 69742042   A  5914    	DB	"16-bit BMP files not supported, use 8-
0B4D46 4D502066 696C6573 
0B4D4E 206E6F74 20737570 
0B4D56 706F7274 65642C20 
0B4D5E 75736520 382D6269 
0B4D66 74202873 6D616C6C 
0B4D6E 292C2032 342D6269 
0B4D76 74202866 61737429 
0B4D7E 206F7220 33322D62 
0B4D86 69742028 616C7068 
0B4D8E 612D656E 61626C65 
0B4D96 64292E 
0B4D99 0D0A00              A  5915    	DB	13,10,0
                           A  5916    	SEGMENT CODE
                           A  5917    ;  511	
                           A  5918    ;  512	bmp_info load_bmp_big(const char * file
0B1CE3                     A  5919    _load_bmp_big:
                           A  5920    .DEFINE "_load_bmp_big"
                           A  5921    
                           A  5922    .VALUE _load_bmp_big
                           A  5923    
                           A  5924    .CLASS 2
                           A  5925    
                           A  5926    .TAG "NONAME6"
                           A  5927    
                           A  5928    .TYPE 72
                           A  5929    
                           A  5930    .ENDEF
                           A  5931    
                           A  5932    .BEGFUNC "load_bmp_big",512,"_load_bmp_big"
                           A  5933    
                           A  5934    .LINE 512
                           A  5935    
                           A  5936    .DEFINE "filename"
                           A  5937    
                           A  5938    .CLASS 65
                           A  5939    
                           A  5940    .VALUE 9
                           A  5941    
                           A  5942    .TYPE 194
                           A  5943    
                           A  5944    .ENDEF
                           A  5945    
                           A  5946    .DEFINE "slot"
                           A  5947    
                           A  5948    .CLASS 65
                           A  5949    
                           A  5950    .VALUE 12
                           A  5951    
                           A  5952    .TYPE 12
                           A  5953    
                           A  5954    .ENDEF
                           A  5955    
                           A  5956    .DEFINE "file"
                           A  5957    
                           A  5958    .CLASS 65
                           A  5959    
                           A  5960    .VALUE -1
                           A  5961    
                           A  5962    .TYPE 12
                           A  5963    
                           A  5964    .ENDEF
                           A  5965    
                           A  5966    .DEFINE "y"
                           A  5967    
                           A  5968    .CLASS 65
                           A  5969    
                           A  5970    .VALUE -5
                           A  5971    
                           A  5972    .TYPE 5
                           A  5973    
                           A  5974    .ENDEF
                           A  5975    
                           A  5976    .DEFINE "bit_depth"
                           A  5977    
                           A  5978    .CLASS 65
                           A  5979    
                           A  5980    .VALUE -9
                           A  5981    
                           A  5982    .TYPE 5
                           A  5983    
                           A  5984    .ENDEF
                           A  5985    
                           A  5986    .DEFINE "i"
                           A  5987    
                           A  5988    .CLASS 65
                           A  5989    
                           A  5990    .VALUE -13
                           A  5991    
                           A  5992    .TYPE 5
                           A  5993    
                           A  5994    .ENDEF
                           A  5995    
                           A  5996    .DEFINE "src"
                           A  5997    
                           A  5998    .CLASS 65
                           A  5999    
                           A  6000    .VALUE -16
                           A  6001    
                           A  6002    .TYPE 34
                           A  6003    
                           A  6004    .ENDEF
                           A  6005    
                           A  6006    .DEFINE "height"
                           A  6007    
                           A  6008    .CLASS 65
                           A  6009    
                           A  6010    .VALUE -20
                           A  6011    
                           A  6012    .TYPE 5
                           A  6013    
                           A  6014    .ENDEF
                           A  6015    
                           A  6016    .DEFINE "width"
                           A  6017    
                           A  6018    .CLASS 65
                           A  6019    
                           A  6020    .VALUE -24
                           A  6021    
                           A  6022    .TYPE 5
                           A  6023    
                           A  6024    .ENDEF
                           A  6025    
                           A  6026    .DEFINE "row_padding"
                           A  6027    
                           A  6028    .CLASS 65
                           A  6029    
                           A  6030    .VALUE -32
                           A  6031    
                           A  6032    .TYPE 5
                           A  6033    
                           A  6034    .ENDEF
                           A  6035    
                           A  6036    .DEFINE "b"
                           A  6037    
                           A  6038    .CLASS 65
                           A  6039    
                           A  6040    .VALUE -37
                           A  6041    
                           A  6042    .TYPE 12
                           A  6043    
                           A  6044    .ENDEF
                           A  6045    
                           A  6046    .DEFINE "index"
                           A  6047    
                           A  6048    .CLASS 65
                           A  6049    
                           A  6050    .VALUE -38
                           A  6051    
                           A  6052    .TYPE 12
                           A  6053    
                           A  6054    .ENDEF
                           A  6055    
                           A  6056    .DEFINE "color_table_size"
                           A  6057    
                           A  6058    .CLASS 65
                           A  6059    
                           A  6060    .VALUE -42
                           A  6061    
                           A  6062    .TYPE 15
                           A  6063    
                           A  6064    .ENDEF
                           A  6065    
                           A  6066    .DEFINE "biSize"
                           A  6067    
                           A  6068    .CLASS 65
                           A  6069    
                           A  6070    .VALUE -46
                           A  6071    
                           A  6072    .TYPE 15
                           A  6073    
                           A  6074    .ENDEF
                           A  6075    
                           A  6076    .DEFINE "fo"
                           A  6077    
                           A  6078    .CLASS 65
                           A  6079    
                           A  6080    .VALUE -49
                           A  6081    
                           A  6082    .TAG "NONAME5"
                           A  6083    
                           A  6084    .TYPE 40
                           A  6085    
                           A  6086    .ENDEF
                           A  6087    
                           A  6088    .DEFINE "x"
                           A  6089    
                           A  6090    .CLASS 65
                           A  6091    
                           A  6092    .VALUE -53
                           A  6093    
                           A  6094    .TYPE 5
                           A  6095    
                           A  6096    .ENDEF
                           A  6097    
                           A  6098    .DEFINE "r"
                           A  6099    
                           A  6100    .CLASS 65
                           A  6101    
                           A  6102    .VALUE -54
                           A  6103    
                           A  6104    .TYPE 12
                           A  6105    
                           A  6106    .ENDEF
                           A  6107    
                           A  6108    .DEFINE "g"
                           A  6109    
                           A  6110    .CLASS 65
                           A  6111    
                           A  6112    .VALUE -55
                           A  6113    
                           A  6114    .TYPE 12
                           A  6115    
                           A  6116    .ENDEF
                           A  6117    
                           A  6118    .DEFINE "non_pad_row"
                           A  6119    
                           A  6120    .CLASS 65
                           A  6121    
                           A  6122    .VALUE -58
                           A  6123    
                           A  6124    .TYPE 4
                           A  6125    
                           A  6126    .ENDEF
                           A  6127    
                           A  6128    .DEFINE "new_row_size"
                           A  6129    
                           A  6130    .CLASS 65
                           A  6131    
                           A  6132    .VALUE -60
                           A  6133    
                           A  6134    .TYPE 13
                           A  6135    
                           A  6136    .ENDEF
                           A  6137    
                           A  6138    .DEFINE "image_start"
                           A  6139    
                           A  6140    .CLASS 65
                           A  6141    
                           A  6142    .VALUE -64
                           A  6143    
                           A  6144    .TYPE 5
                           A  6145    
                           A  6146    .ENDEF
                           A  6147    
                           A  6148    .DEFINE "row_24bpp"
                           A  6149    
                           A  6150    .CLASS 65
                           A  6151    
                           A  6152    .VALUE -67
                           A  6153    
                           A  6154    .TYPE 34
                           A  6155    
                           A  6156    .ENDEF
                           A  6157    
                           A  6158    .DEFINE "image_buffer"
                           A  6159    
                           A  6160    .CLASS 65
                           A  6161    
                           A  6162    .VALUE -70
                           A  6163    
                           A  6164    .TYPE 34
                           A  6165    
                           A  6166    .ENDEF
                           A  6167    
                           A  6168    .DEFINE "greenMask"
                           A  6169    
                           A  6170    .CLASS 65
                           A  6171    
                           A  6172    .VALUE -74
                           A  6173    
                           A  6174    .DIM 4
                           A  6175    
                           A  6176    .TYPE 98
                           A  6177    
                           A  6178    .ENDEF
                           A  6179    
                           A  6180    .DEFINE "non_pad_row"
                           A  6181    
                           A  6182    .CLASS 65
                           A  6183    
                           A  6184    .VALUE -77
                           A  6185    
                           A  6186    .TYPE 4
                           A  6187    
                           A  6188    .ENDEF
                           A  6189    
                           A  6190    .DEFINE "blueMask"
                           A  6191    
                           A  6192    .CLASS 65
                           A  6193    
                           A  6194    .VALUE -81
                           A  6195    
                           A  6196    .DIM 4
                           A  6197    
                           A  6198    .TYPE 98
                           A  6199    
                           A  6200    .ENDEF
                           A  6201    
                           A  6202    .DEFINE "alphaMask"
                           A  6203    
                           A  6204    .CLASS 65
                           A  6205    
                           A  6206    .VALUE -85
                           A  6207    
                           A  6208    .DIM 4
                           A  6209    
                           A  6210    .TYPE 98
                           A  6211    
                           A  6212    .ENDEF
                           A  6213    
                           A  6214    .DEFINE "redMask"
                           A  6215    
                           A  6216    .CLASS 65
                           A  6217    
                           A  6218    .VALUE -89
                           A  6219    
                           A  6220    .DIM 4
                           A  6221    
                           A  6222    .TYPE 98
                           A  6223    
                           A  6224    .ENDEF
                           A  6225    
                           A  6226    .DEFINE "non_pad_row"
                           A  6227    
                           A  6228    .CLASS 65
                           A  6229    
                           A  6230    .VALUE -92
                           A  6231    
                           A  6232    .TYPE 4
                           A  6233    
                           A  6234    .ENDEF
                           A  6235    
                           A  6236    .DEFINE "header"
                           A  6237    
                           A  6238    .CLASS 65
                           A  6239    
                           A  6240    .VALUE -146
                           A  6241    
                           A  6242    .DIM 54
                           A  6243    
                           A  6244    .TYPE 98
                           A  6245    
                           A  6246    .ENDEF
                           A  6247    
                           A  6248    .DEFINE "color_table"
                           A  6249    
                           A  6250    .CLASS 65
                           A  6251    
                           A  6252    .VALUE -1170
                           A  6253    
                           A  6254    .DIM 1024
                           A  6255    
                           A  6256    .TYPE 98
                           A  6257    
                           A  6258    .ENDEF
                           A  6259    
                           A  6260    .DEFINE "return_info"
                           A  6261    
                           A  6262    .CLASS 65
                           A  6263    
                           A  6264    .VALUE -2243
                           A  6265    
                           A  6266    .TAG "NONAME6"
                           A  6267    
                           A  6268    .TYPE 8
                           A  6269    
                           A  6270    .ENDEF
                           A  6271    
0B1CE3 DDE5                A  6272    	PUSH	IX
0B1CE5 DD210000 00         A  6273    	LD	IX,0
0B1CEA DD39                A  6274    	ADD	IX,SP
0B1CEC 212AF7FF            A  6275    	LD	HL,-2262
0B1CF0 39                  A  6276    	ADD	HL,SP
0B1CF1 F9                  A  6277    	LD	SP,HL
                           A  6278    ;  513	
                           A  6279    ;  514	    int32_t image_start, width, height,
                           A  6280    ;  515		char* row_24bpp;
                           A  6281    ;  516	    uint8_t pixel[4], file, r, g, b, in
                           A  6282    ;  517	    char header[54], color_table[1024];
                           A  6283    ;  518	    uint32_t pixel_value, color_table_s
                           A  6284    ;  519	    uint32_t biSize;
                           A  6285    ;  520	    FIL * fo;
                           A  6286    ;  521		bmp_info return_info;
                           A  6287    ;  522	
                           A  6288    ;  523	    char * src;
                           A  6289    ;  524	    char * image_buffer;
                           A  6290    ;  525		
                           A  6291    ;  526		//if (game.vgm_file != NULL) parse_
                           A  6292    ;  527		
                           A  6293    ;  528		return_info.bmp_width = 0;
                           A  6294    .LINE 528
                           A  6295    
0B1CF2 213DF7FF            A  6296    	LD	HL,-2243
0B1CF6 DDE5C1              A  6297    	LD	BC,IX
0B1CF9 09                  A  6298    	ADD	HL,BC
0B1CFA 3600                A  6299    	LD	(HL),%0
0B1CFC 23                  A  6300    	INC	HL
0B1CFD 3600                A  6301    	LD	(HL),%0
                           A  6302    ;  529		return_info.bmp_height = 0;
                           A  6303    .LINE 529
                           A  6304    
0B1CFF 213FF7FF            A  6305    	LD	HL,-2241
0B1D03 DDE5C1              A  6306    	LD	BC,IX
0B1D06 09                  A  6307    	ADD	HL,BC
0B1D07 3600                A  6308    	LD	(HL),%0
0B1D09 23                  A  6309    	INC	HL
0B1D0A 3600                A  6310    	LD	(HL),%0
                           A  6311    ;  530		return_info.bmp_bitdepth = 0;	
                           A  6312    .LINE 530
                           A  6313    
0B1D0C 2141F7FF            A  6314    	LD	HL,-2239
0B1D10 DDE5C1              A  6315    	LD	BC,IX
0B1D13 09                  A  6316    	ADD	HL,BC
0B1D14 3600                A  6317    	LD	(HL),%0
                           A  6318    ;  531	
                           A  6319    ;  532	    file = mos_fopen(filename, fa_read)
                           A  6320    .LINE 532
                           A  6321    
0B1D16 01010000            A  6322    	LD	BC,1
0B1D1A C5                  A  6323    	PUSH	BC
0B1D1B DD0709              A  6324    	LD	BC,(IX+%9)
0B1D1E C5                  A  6325    	PUSH	BC
0B1D1F CD 11 3B 0B         A  6326    	CALL	_mos_fopen
0B1D23 C1                  A  6327    	POP	BC
0B1D24 C1                  A  6328    	POP	BC
0B1D25 DD77FF              A  6329    	LD	(IX+%FFFFFFFF),A
                           A  6330    ;  533	    if (!file) {
                           A  6331    .LINE 533
                           A  6332    
0B1D28 B7                  A  6333    	OR	A,A
0B1D29 20 40               A  6334    	JR	NZ,L_146
                           A  6335    ;  534	        printf("Error: could not open %
                           A  6336    .LINE 534
                           A  6337    
0B1D2B 01 A4 40 0B         A  6338    	LD	BC,___print_uputch
0B1D2F ED43 1B 4B 0B       A  6339    	LD	(___print_xputch),BC
0B1D34 01 9C 4D 0B         A  6340    	LD	BC,L__125
0B1D38 C5                  A  6341    	PUSH	BC
0B1D39 CD EC 3E 0B         A  6342    	CALL	___print_sendstring
0B1D3D C1                  A  6343    	POP	BC
0B1D3E DD0709              A  6344    	LD	BC,(IX+%9)
0B1D41 C5                  A  6345    	PUSH	BC
0B1D42 CD EC 3E 0B         A  6346    	CALL	___print_sendstring
0B1D46 C1                  A  6347    	POP	BC
0B1D47 01 B3 4D 0B         A  6348    	LD	BC,L__126
0B1D4B C5                  A  6349    	PUSH	BC
0B1D4C CD EC 3E 0B         A  6350    	CALL	___print_sendstring
0B1D50 C1                  A  6351    	POP	BC
                           A  6352    ;  535	        return return_info;
                           A  6353    .LINE 535
                           A  6354    
0B1D51 ED2206              A  6355    	LEA	HL,IX+%6
0B1D54 ED17                A  6356    	LD	DE,(HL)
0B1D56 DDE5E1              A  6357    	LD	HL,IX
0B1D59 013DF7FF            A  6358    	LD	BC,-2243
0B1D5D 09                  A  6359    	ADD	HL,BC
0B1D5E 01310400            A  6360    	LD	BC,1073
0B1D62 EDB0                A  6361    	LDIR	
0B1D64 DD2706              A  6362    	LD	HL,(IX+%6)
0B1D67 C3 16 27 0B         A  6363    	JR	L_196
                           A  6364    ;  536	    }
0B1D6B                     A  6365    L_146:
                           A  6366    .LINE 536
                           A  6367    
                           A  6368    ;  537	    fo = (FIL * ) mos_getfil(file);
                           A  6369    .LINE 537
                           A  6370    
0B1D6B DD4EFF              A  6371    	LD	C,(IX+%FFFFFFFF)
0B1D6E 0600                A  6372    	LD	B,%0
0B1D70 C5                  A  6373    	PUSH	BC
0B1D71 CD 97 3C 0B         A  6374    	CALL	_mos_getfil
0B1D75 C1                  A  6375    	POP	BC
0B1D76 DD2FCF              A  6376    	LD	(IX+%FFFFFFCF),HL
                           A  6377    ;  538	
                           A  6378    ;  539	    mos_fread(file, header, 54);
                           A  6379    .LINE 539
                           A  6380    
0B1D79 01360000            A  6381    	LD	BC,54
0B1D7D C5                  A  6382    	PUSH	BC
0B1D7E DDE5E1              A  6383    	LD	HL,IX
0B1D81 016EFFFF            A  6384    	LD	BC,-146
0B1D85 09                  A  6385    	ADD	HL,BC
0B1D86 E5C1                A  6386    	LD	BC,HL
0B1D88 C5                  A  6387    	PUSH	BC
0B1D89 DD4EFF              A  6388    	LD	C,(IX+%FFFFFFFF)
0B1D8C 0600                A  6389    	LD	B,%0
0B1D8E C5                  A  6390    	PUSH	BC
0B1D8F CD 3E 3C 0B         A  6391    	CALL	_mos_fread
0B1D93 C1                  A  6392    	POP	BC
0B1D94 C1                  A  6393    	POP	BC
0B1D95 C1                  A  6394    	POP	BC
                           A  6395    ;  540	
                           A  6396    ;  541		image_start = * (uint32_t * ) & hea
                           A  6397    .LINE 541
                           A  6398    
0B1D96 DDE5FDE1            A  6399    	LD	IY,IX
0B1D9A 016EFFFF            A  6400    	LD	BC,-146
0B1D9E FD09                A  6401    	ADD	IY,BC
0B1DA0 ED230A              A  6402    	LEA	HL,IY+%A
0B1DA3 ED07                A  6403    	LD	BC,(HL)
0B1DA5 23                  A  6404    	INC	HL
0B1DA6 23                  A  6405    	INC	HL
0B1DA7 23                  A  6406    	INC	HL
0B1DA8 7E                  A  6407    	LD	A,(HL)
0B1DA9 DD0FC0              A  6408    	LD	(IX+%FFFFFFC0),BC
0B1DAC DD77C3              A  6409    	LD	(IX+%FFFFFFC3),A
                           A  6410    ;  542	    biSize = * (uint32_t * ) & header[1
                           A  6411    .LINE 542
                           A  6412    
0B1DAF DDE5FDE1            A  6413    	LD	IY,IX
0B1DB3 016EFFFF            A  6414    	LD	BC,-146
0B1DB7 FD09                A  6415    	ADD	IY,BC
0B1DB9 ED230E              A  6416    	LEA	HL,IY+%E
0B1DBC ED07                A  6417    	LD	BC,(HL)
0B1DBE 23                  A  6418    	INC	HL
0B1DBF 23                  A  6419    	INC	HL
0B1DC0 23                  A  6420    	INC	HL
0B1DC1 7E                  A  6421    	LD	A,(HL)
0B1DC2 DD0FD2              A  6422    	LD	(IX+%FFFFFFD2),BC
0B1DC5 DD77D5              A  6423    	LD	(IX+%FFFFFFD5),A
                           A  6424    ;  543	    width = * (INT32 * ) & header[18];
                           A  6425    .LINE 543
                           A  6426    
0B1DC8 ED2280              A  6427    	LEA	HL,IX+%FFFFFF80
0B1DCB ED07                A  6428    	LD	BC,(HL)
0B1DCD 23                  A  6429    	INC	HL
0B1DCE 23                  A  6430    	INC	HL
0B1DCF 23                  A  6431    	INC	HL
0B1DD0 7E                  A  6432    	LD	A,(HL)
0B1DD1 DD0FE8              A  6433    	LD	(IX+%FFFFFFE8),BC
0B1DD4 DD77EB              A  6434    	LD	(IX+%FFFFFFEB),A
                           A  6435    ;  544	    height = * (INT32 * ) & header[22];
                           A  6436    .LINE 544
                           A  6437    
0B1DD7 ED2284              A  6438    	LEA	HL,IX+%FFFFFF84
0B1DDA ED07                A  6439    	LD	BC,(HL)
0B1DDC 23                  A  6440    	INC	HL
0B1DDD 23                  A  6441    	INC	HL
0B1DDE 23                  A  6442    	INC	HL
0B1DDF 7E                  A  6443    	LD	A,(HL)
0B1DE0 DD0FEC              A  6444    	LD	(IX+%FFFFFFEC),BC
0B1DE3 DD77EF              A  6445    	LD	(IX+%FFFFFFEF),A
                           A  6446    ;  545	    bit_depth = * (uint16_t * ) & heade
                           A  6447    .LINE 545
                           A  6448    
0B1DE6 ED228A              A  6449    	LEA	HL,IX+%FFFFFF8A
0B1DE9 ED07                A  6450    	LD	BC,(HL)
0B1DEB CD 9E 40 0B         A  6451    	CALL	__stoiu
0B1DEF E5C1                A  6452    	LD	BC,HL
0B1DF1 AF                  A  6453    	XOR	A,A
0B1DF2 DD0FF7              A  6454    	LD	(IX+%FFFFFFF7),BC
0B1DF5 DD77FA              A  6455    	LD	(IX+%FFFFFFFA),A
                           A  6456    ;  546	    color_table_size = * (uint32_t * ) 
                           A  6457    .LINE 546
                           A  6458    
0B1DF8 ED229C              A  6459    	LEA	HL,IX+%FFFFFF9C
0B1DFB ED17                A  6460    	LD	DE,(HL)
0B1DFD 23                  A  6461    	INC	HL
0B1DFE 23                  A  6462    	INC	HL
0B1DFF 23                  A  6463    	INC	HL
0B1E00 7E                  A  6464    	LD	A,(HL)
0B1E01 DD1FD6              A  6465    	LD	(IX+%FFFFFFD6),DE
0B1E04 DD77D9              A  6466    	LD	(IX+%FFFFFFD9),A
                           A  6467    ;  547		
                           A  6468    ;  548		
                           A  6469    ;  549	    image_buffer = (char * ) malloc(wid
                           A  6470    .LINE 549
                           A  6471    
0B1E07 DD27E8              A  6472    	LD	HL,(IX+%FFFFFFE8)
0B1E0A DD5EEB              A  6473    	LD	E,(IX+%FFFFFFEB)
0B1E0D DD7EFA              A  6474    	LD	A,(IX+%FFFFFFFA)
0B1E10 CD 51 4A 0B         A  6475    	CALL	__lmuls
0B1E14 01080000            A  6476    	LD	BC,8
0B1E18 AF                  A  6477    	XOR	A,A
0B1E19 CD 49 41 0B         A  6478    	CALL	__ldivs
0B1E1D E5                  A  6479    	PUSH	HL
0B1E1E CD C7 3D 0B         A  6480    	CALL	_malloc
0B1E22 C1                  A  6481    	POP	BC
0B1E23 DD2FBA              A  6482    	LD	(IX+%FFFFFFBA),HL
                           A  6483    ;  550	
                           A  6484    ;  551	    if (color_table_size == 0 && bit_de
                           A  6485    .LINE 551
                           A  6486    
0B1E26 DD27D6              A  6487    	LD	HL,(IX+%FFFFFFD6)
0B1E29 DD5ED9              A  6488    	LD	E,(IX+%FFFFFFD9)
0B1E2C 01000000            A  6489    	LD	BC,0
0B1E30 AF                  A  6490    	XOR	A,A
0B1E31 CD DB 47 0B         A  6491    	CALL	__lcmpu
0B1E35 20 1C               A  6492    	JR	NZ,L_150
0B1E37 DD27F7              A  6493    	LD	HL,(IX+%FFFFFFF7)
0B1E3A DD5EFA              A  6494    	LD	E,(IX+%FFFFFFFA)
0B1E3D 01080000            A  6495    	LD	BC,8
0B1E41 AF                  A  6496    	XOR	A,A
0B1E42 CD DB 47 0B         A  6497    	CALL	__lcmps
0B1E46 20 0B               A  6498    	JR	NZ,L_150
                           A  6499    ;  552	        color_table_size = 256;
                           A  6500    .LINE 552
                           A  6501    
0B1E48 01000100            A  6502    	LD	BC,256
0B1E4C AF                  A  6503    	XOR	A,A
0B1E4D DD0FD6              A  6504    	LD	(IX+%FFFFFFD6),BC
0B1E50 DD77D9              A  6505    	LD	(IX+%FFFFFFD9),A
                           A  6506    ;  553	    }
0B1E53                     A  6507    L_150:
                           A  6508    .LINE 553
                           A  6509    
                           A  6510    ;  554	
                           A  6511    ;  555	    if (color_table_size > 0) mos_fread
                           A  6512    .LINE 555
                           A  6513    
0B1E53 B7                  A  6514    	OR	A,A
0B1E54 ED62                A  6515    	SBC	HL,HL
0B1E56 1E00                A  6516    	LD	E,%0
0B1E58 DD07D6              A  6517    	LD	BC,(IX+%FFFFFFD6)
0B1E5B DD7ED9              A  6518    	LD	A,(IX+%FFFFFFD9)
0B1E5E CD DB 47 0B         A  6519    	CALL	__lcmpu
0B1E62 30 1E               A  6520    	JR	NC,L_167
0B1E64 DD27D6              A  6521    	LD	HL,(IX+%FFFFFFD6)
0B1E67 29                  A  6522    	ADD	HL,HL
0B1E68 29                  A  6523    	ADD	HL,HL
0B1E69 E5                  A  6524    	PUSH	HL
0B1E6A DDE5E1              A  6525    	LD	HL,IX
0B1E6D 016EFBFF            A  6526    	LD	BC,-1170
0B1E71 09                  A  6527    	ADD	HL,BC
0B1E72 E5C1                A  6528    	LD	BC,HL
0B1E74 C5                  A  6529    	PUSH	BC
0B1E75 DD4EFF              A  6530    	LD	C,(IX+%FFFFFFFF)
0B1E78 0600                A  6531    	LD	B,%0
0B1E7A C5                  A  6532    	PUSH	BC
0B1E7B CD 3E 3C 0B         A  6533    	CALL	_mos_fread
0B1E7F C1                  A  6534    	POP	BC
0B1E80 C1                  A  6535    	POP	BC
0B1E81 C1                  A  6536    	POP	BC
0B1E82                     A  6537    L_167:
                           A  6538    ;  556	
                           A  6539    ;  557	    // else if (biSize > 40) { //If for
                           A  6540    ;  558	
                           A  6541    ;  559	        // i = biSize - 40;
                           A  6542    ;  560	        // while (i--> 0) {
                           A  6543    ;  561	            // mos_fgetc(file);
                           A  6544    ;  562	        // }
                           A  6545    ;  563	
                           A  6546    ;  564	    // }
                           A  6547    ;  565		
                           A  6548    ;  566		if (biSize > 40) {
                           A  6549    .LINE 566
                           A  6550    
0B1E82 21280000            A  6551    	LD	HL,40
0B1E86 1E00                A  6552    	LD	E,%0
0B1E88 DD07D2              A  6553    	LD	BC,(IX+%FFFFFFD2)
0B1E8B DD7ED5              A  6554    	LD	A,(IX+%FFFFFFD5)
0B1E8E CD DB 47 0B         A  6555    	CALL	__lcmpu
0B1E92 D2 4D 20 0B         A  6556    	JR	NC,L_171
                           A  6557    ;  567			// If BITMAPV4HEADER or above, 
                           A  6558    ;  568			if (biSize >= 108) {
                           A  6559    .LINE 568
                           A  6560    
0B1E96 DD27D2              A  6561    	LD	HL,(IX+%FFFFFFD2)
0B1E99 DD5ED5              A  6562    	LD	E,(IX+%FFFFFFD5)
0B1E9C 016C0000            A  6563    	LD	BC,108
0B1EA0 AF                  A  6564    	XOR	A,A
0B1EA1 CD DB 47 0B         A  6565    	CALL	__lcmpu
0B1EA5 DA F7 1F 0B         A  6566    	JR	C,L_165
                           A  6567    ;  569				char redMask[4], greenMask[
                           A  6568    ;  570				mos_fread(file, redMask, 4)
                           A  6569    .LINE 570
                           A  6570    
0B1EA9 01040000            A  6571    	LD	BC,4
0B1EAD C5                  A  6572    	PUSH	BC
0B1EAE ED65A7              A  6573    	PEA	IX+%FFFFFFA7
0B1EB1 DD4EFF              A  6574    	LD	C,(IX+%FFFFFFFF)
0B1EB4 0600                A  6575    	LD	B,%0
0B1EB6 C5                  A  6576    	PUSH	BC
0B1EB7 CD 3E 3C 0B         A  6577    	CALL	_mos_fread
0B1EBB C1                  A  6578    	POP	BC
0B1EBC C1                  A  6579    	POP	BC
0B1EBD C1                  A  6580    	POP	BC
                           A  6581    ;  571				mos_fread(file, greenMask, 
                           A  6582    .LINE 571
                           A  6583    
0B1EBE 01040000            A  6584    	LD	BC,4
0B1EC2 C5                  A  6585    	PUSH	BC
0B1EC3 ED65B6              A  6586    	PEA	IX+%FFFFFFB6
0B1EC6 DD4EFF              A  6587    	LD	C,(IX+%FFFFFFFF)
0B1EC9 0600                A  6588    	LD	B,%0
0B1ECB C5                  A  6589    	PUSH	BC
0B1ECC CD 3E 3C 0B         A  6590    	CALL	_mos_fread
0B1ED0 C1                  A  6591    	POP	BC
0B1ED1 C1                  A  6592    	POP	BC
0B1ED2 C1                  A  6593    	POP	BC
                           A  6594    ;  572				mos_fread(file, blueMask, 4
                           A  6595    .LINE 572
                           A  6596    
0B1ED3 01040000            A  6597    	LD	BC,4
0B1ED7 C5                  A  6598    	PUSH	BC
0B1ED8 ED65AF              A  6599    	PEA	IX+%FFFFFFAF
0B1EDB DD4EFF              A  6600    	LD	C,(IX+%FFFFFFFF)
0B1EDE 0600                A  6601    	LD	B,%0
0B1EE0 C5                  A  6602    	PUSH	BC
0B1EE1 CD 3E 3C 0B         A  6603    	CALL	_mos_fread
0B1EE5 C1                  A  6604    	POP	BC
0B1EE6 C1                  A  6605    	POP	BC
0B1EE7 C1                  A  6606    	POP	BC
                           A  6607    ;  573				mos_fread(file, alphaMask, 
                           A  6608    .LINE 573
                           A  6609    
0B1EE8 01040000            A  6610    	LD	BC,4
0B1EEC C5                  A  6611    	PUSH	BC
0B1EED ED65AB              A  6612    	PEA	IX+%FFFFFFAB
0B1EF0 DD4EFF              A  6613    	LD	C,(IX+%FFFFFFFF)
0B1EF3 0600                A  6614    	LD	B,%0
0B1EF5 C5                  A  6615    	PUSH	BC
0B1EF6 CD 3E 3C 0B         A  6616    	CALL	_mos_fread
0B1EFA C1                  A  6617    	POP	BC
0B1EFB C1                  A  6618    	POP	BC
0B1EFC C1                  A  6619    	POP	BC
                           A  6620    ;  574					
                           A  6621    ;  575				if (!(memcmp(redMask, "\x00
                           A  6622    .LINE 575
                           A  6623    
0B1EFD 01040000            A  6624    	LD	BC,4
0B1F01 C5                  A  6625    	PUSH	BC
0B1F02 01 B7 4D 0B         A  6626    	LD	BC,L__132
0B1F06 C5                  A  6627    	PUSH	BC
0B1F07 ED65A7              A  6628    	PEA	IX+%FFFFFFA7
0B1F0A CD CE 44 0B         A  6629    	CALL	_memcmp
0B1F0E C1                  A  6630    	POP	BC
0B1F0F C1                  A  6631    	POP	BC
0B1F10 C1                  A  6632    	POP	BC
0B1F11 01000000            A  6633    	LD	BC,0
0B1F15 B7                  A  6634    	OR	A,A
0B1F16 ED42                A  6635    	SBC	HL,BC
0B1F18 20 57               A  6636    	JR	NZ,L_154
                           A  6637    ;  576					  memcmp(greenMask, "\x
                           A  6638    .LINE 576
                           A  6639    
0B1F1A 01040000            A  6640    	LD	BC,4
0B1F1E C5                  A  6641    	PUSH	BC
0B1F1F 01 BC 4D 0B         A  6642    	LD	BC,L__134
0B1F23 C5                  A  6643    	PUSH	BC
0B1F24 ED65B6              A  6644    	PEA	IX+%FFFFFFB6
0B1F27 CD CE 44 0B         A  6645    	CALL	_memcmp
0B1F2B C1                  A  6646    	POP	BC
0B1F2C C1                  A  6647    	POP	BC
0B1F2D C1                  A  6648    	POP	BC
0B1F2E 01000000            A  6649    	LD	BC,0
0B1F32 B7                  A  6650    	OR	A,A
0B1F33 ED42                A  6651    	SBC	HL,BC
0B1F35 20 3A               A  6652    	JR	NZ,L_154
                           A  6653    ;  577					  memcmp(blueMask, "\xF
                           A  6654    .LINE 577
                           A  6655    
0B1F37 01040000            A  6656    	LD	BC,4
0B1F3B C5                  A  6657    	PUSH	BC
0B1F3C 01 C1 4D 0B         A  6658    	LD	BC,L__136
0B1F40 C5                  A  6659    	PUSH	BC
0B1F41 ED65AF              A  6660    	PEA	IX+%FFFFFFAF
0B1F44 CD CE 44 0B         A  6661    	CALL	_memcmp
0B1F48 C1                  A  6662    	POP	BC
0B1F49 C1                  A  6663    	POP	BC
0B1F4A C1                  A  6664    	POP	BC
0B1F4B 01000000            A  6665    	LD	BC,0
0B1F4F B7                  A  6666    	OR	A,A
0B1F50 ED42                A  6667    	SBC	HL,BC
0B1F52 20 1D               A  6668    	JR	NZ,L_154
                           A  6669    ;  578					  memcmp(alphaMask, "\x
                           A  6670    .LINE 578
                           A  6671    
0B1F54 01040000            A  6672    	LD	BC,4
0B1F58 C5                  A  6673    	PUSH	BC
0B1F59 01 C6 4D 0B         A  6674    	LD	BC,L__138
0B1F5D C5                  A  6675    	PUSH	BC
0B1F5E ED65AB              A  6676    	PEA	IX+%FFFFFFAB
0B1F61 CD CE 44 0B         A  6677    	CALL	_memcmp
0B1F65 C1                  A  6678    	POP	BC
0B1F66 C1                  A  6679    	POP	BC
0B1F67 C1                  A  6680    	POP	BC
0B1F68 01000000            A  6681    	LD	BC,0
0B1F6C B7                  A  6682    	OR	A,A
0B1F6D ED42                A  6683    	SBC	HL,BC
0B1F6F 28 38               A  6684    	JR	Z,L_159
0B1F71                     A  6685    L_154:
                           A  6686    ;  579					printf("Error: Pixel fo
                           A  6687    .LINE 579
                           A  6688    
0B1F71 01 A4 40 0B         A  6689    	LD	BC,___print_uputch
0B1F75 ED43 1B 4B 0B       A  6690    	LD	(___print_xputch),BC
0B1F7A 01 CB 4D 0B         A  6691    	LD	BC,L__140
0B1F7E C5                  A  6692    	PUSH	BC
0B1F7F CD EC 3E 0B         A  6693    	CALL	___print_sendstring
0B1F83 C1                  A  6694    	POP	BC
                           A  6695    ;  580					mos_fclose(file);
                           A  6696    .LINE 580
                           A  6697    
0B1F84 DD4EFF              A  6698    	LD	C,(IX+%FFFFFFFF)
0B1F87 0600                A  6699    	LD	B,%0
0B1F89 C5                  A  6700    	PUSH	BC
0B1F8A CD 29 3B 0B         A  6701    	CALL	_mos_fclose
0B1F8E C1                  A  6702    	POP	BC
                           A  6703    ;  581					return return_info;
                           A  6704    .LINE 581
                           A  6705    
0B1F8F ED2206              A  6706    	LEA	HL,IX+%6
0B1F92 ED17                A  6707    	LD	DE,(HL)
0B1F94 DDE5E1              A  6708    	LD	HL,IX
0B1F97 013DF7FF            A  6709    	LD	BC,-2243
0B1F9B 09                  A  6710    	ADD	HL,BC
0B1F9C 01310400            A  6711    	LD	BC,1073
0B1FA0 EDB0                A  6712    	LDIR	
0B1FA2 DD2706              A  6713    	LD	HL,(IX+%6)
0B1FA5 C3 16 27 0B         A  6714    	JR	L_196
                           A  6715    ;  582				}
0B1FA9                     A  6716    L_159:
                           A  6717    .LINE 582
                           A  6718    
                           A  6719    ;  583					
                           A  6720    ;  584					// Skip remaining extra
                           A  6721    ;  585					for (i = biSize - 108; 
                           A  6722    .LINE 585
                           A  6723    
0B1FA9 DD27D2              A  6724    	LD	HL,(IX+%FFFFFFD2)
0B1FAC DD5ED5              A  6725    	LD	E,(IX+%FFFFFFD5)
0B1FAF 0194FFFF            A  6726    	LD	BC,16777108
0B1FB3 3EFF                A  6727    	LD	A,%FF
0B1FB5 CD BC 3C 0B         A  6728    	CALL	__ladd
0B1FB9 DD2FF3              A  6729    	LD	(IX+%FFFFFFF3),HL
0B1FBC DD73F6              A  6730    	LD	(IX+%FFFFFFF6),E
0B1FBF 18 21               A  6731    	JR	L_158
0B1FC1                     A  6732    L_156:
                           A  6733    ;  586						mos_fgetc(file);
                           A  6734    .LINE 586
                           A  6735    
0B1FC1 DD4EFF              A  6736    	LD	C,(IX+%FFFFFFFF)
0B1FC4 0600                A  6737    	LD	B,%0
0B1FC6 C5                  A  6738    	PUSH	BC
0B1FC7 CD 3E 3B 0B         A  6739    	CALL	_mos_fgetc
0B1FCB C1                  A  6740    	POP	BC
0B1FCC DD27F3              A  6741    	LD	HL,(IX+%FFFFFFF3)
0B1FCF DD5EF6              A  6742    	LD	E,(IX+%FFFFFFF6)
0B1FD2 01FFFFFF            A  6743    	LD	BC,16777215
0B1FD6 3EFF                A  6744    	LD	A,%FF
0B1FD8 CD BC 3C 0B         A  6745    	CALL	__ladd
0B1FDC DD2FF3              A  6746    	LD	(IX+%FFFFFFF3),HL
0B1FDF DD73F6              A  6747    	LD	(IX+%FFFFFFF6),E
                           A  6748    ;  587					}
0B1FE2                     A  6749    L_158:
                           A  6750    .LINE 587
                           A  6751    
0B1FE2 B7                  A  6752    	OR	A,A
0B1FE3 ED62                A  6753    	SBC	HL,HL
0B1FE5 1E00                A  6754    	LD	E,%0
0B1FE7 DD07F3              A  6755    	LD	BC,(IX+%FFFFFFF3)
0B1FEA DD7EF6              A  6756    	LD	A,(IX+%FFFFFFF6)
0B1FED CD DB 47 0B         A  6757    	CALL	__lcmps
0B1FF1 FA C1 1F 0B         A  6758    	JP	M,L_156
0B1FF5 18 56               A  6759    	JR	L_171
                           A  6760    ;  588			} else {
0B1FF7                     A  6761    L_165:
                           A  6762    .LINE 588
                           A  6763    
                           A  6764    ;  589				// Skip all extra header by
                           A  6765    ;  590				for (i = biSize - 40; i > 0
                           A  6766    .LINE 590
                           A  6767    
0B1FF7 DD27D2              A  6768    	LD	HL,(IX+%FFFFFFD2)
0B1FFA DD5ED5              A  6769    	LD	E,(IX+%FFFFFFD5)
0B1FFD 01D8FFFF            A  6770    	LD	BC,16777176
0B2001 3EFF                A  6771    	LD	A,%FF
0B2003 CD BC 3C 0B         A  6772    	CALL	__ladd
0B2007 DD2FF3              A  6773    	LD	(IX+%FFFFFFF3),HL
0B200A DD73F6              A  6774    	LD	(IX+%FFFFFFF6),E
0B200D 18 21               A  6775    	JR	L_163
0B200F                     A  6776    L_161:
                           A  6777    ;  591					mos_fgetc(file);
                           A  6778    .LINE 591
                           A  6779    
0B200F DD4EFF              A  6780    	LD	C,(IX+%FFFFFFFF)
0B2012 0600                A  6781    	LD	B,%0
0B2014 C5                  A  6782    	PUSH	BC
0B2015 CD 3E 3B 0B         A  6783    	CALL	_mos_fgetc
0B2019 C1                  A  6784    	POP	BC
0B201A DD27F3              A  6785    	LD	HL,(IX+%FFFFFFF3)
0B201D DD5EF6              A  6786    	LD	E,(IX+%FFFFFFF6)
0B2020 01FFFFFF            A  6787    	LD	BC,16777215
0B2024 3EFF                A  6788    	LD	A,%FF
0B2026 CD BC 3C 0B         A  6789    	CALL	__ladd
0B202A DD2FF3              A  6790    	LD	(IX+%FFFFFFF3),HL
0B202D DD73F6              A  6791    	LD	(IX+%FFFFFFF6),E
                           A  6792    ;  592				}
0B2030                     A  6793    L_163:
                           A  6794    .LINE 592
                           A  6795    
0B2030 B7                  A  6796    	OR	A,A
0B2031 ED62                A  6797    	SBC	HL,HL
0B2033 1E00                A  6798    	LD	E,%0
0B2035 DD07F3              A  6799    	LD	BC,(IX+%FFFFFFF3)
0B2038 DD7EF6              A  6800    	LD	A,(IX+%FFFFFFF6)
0B203B CD DB 47 0B         A  6801    	CALL	__lcmps
0B203F FA 49 20 0B         A  6802    	JP	M,L__154
0B2043 EA 0F 20 0B         A  6803    	JP	PE,L_161
0B2047 18 04               A  6804    	JR	L__155
0B2049                     A  6805    L__154:
0B2049 E2 0F 20 0B         A  6806    	JP	PO,L_161
0B204D                     A  6807    L__155:
                           A  6808    ;  593			}
                           A  6809    ;  594		}	
0B204D                     A  6810    L_171:
                           A  6811    .LINE 594
                           A  6812    
                           A  6813    ;  595	
                           A  6814    ;  596	    if ((bit_depth != 32) && (bit_depth
                           A  6815    .LINE 596
                           A  6816    
0B204D DD27F7              A  6817    	LD	HL,(IX+%FFFFFFF7)
0B2050 DD5EFA              A  6818    	LD	E,(IX+%FFFFFFFA)
0B2053 01200000            A  6819    	LD	BC,32
0B2057 AF                  A  6820    	XOR	A,A
0B2058 CD DB 47 0B         A  6821    	CALL	__lcmps
0B205C 28 5A               A  6822    	JR	Z,L_172
0B205E DD27F7              A  6823    	LD	HL,(IX+%FFFFFFF7)
0B2061 DD5EFA              A  6824    	LD	E,(IX+%FFFFFFFA)
0B2064 01180000            A  6825    	LD	BC,24
0B2068 AF                  A  6826    	XOR	A,A
0B2069 CD DB 47 0B         A  6827    	CALL	__lcmps
0B206D 28 49               A  6828    	JR	Z,L_172
0B206F DD27F7              A  6829    	LD	HL,(IX+%FFFFFFF7)
0B2072 DD5EFA              A  6830    	LD	E,(IX+%FFFFFFFA)
0B2075 01080000            A  6831    	LD	BC,8
0B2079 AF                  A  6832    	XOR	A,A
0B207A CD DB 47 0B         A  6833    	CALL	__lcmps
0B207E 28 38               A  6834    	JR	Z,L_172
                           A  6835    ;  597	        printf("Error: unsupported bit 
                           A  6836    .LINE 597
                           A  6837    
0B2080 01 A4 40 0B         A  6838    	LD	BC,___print_uputch
0B2084 ED43 1B 4B 0B       A  6839    	LD	(___print_xputch),BC
0B2089 01 FF 4D 0B         A  6840    	LD	BC,L__146
0B208D C5                  A  6841    	PUSH	BC
0B208E CD EC 3E 0B         A  6842    	CALL	___print_sendstring
0B2092 C1                  A  6843    	POP	BC
                           A  6844    ;  598	        mos_fclose(file);
                           A  6845    .LINE 598
                           A  6846    
0B2093 DD4EFF              A  6847    	LD	C,(IX+%FFFFFFFF)
0B2096 0600                A  6848    	LD	B,%0
0B2098 C5                  A  6849    	PUSH	BC
0B2099 CD 29 3B 0B         A  6850    	CALL	_mos_fclose
0B209D C1                  A  6851    	POP	BC
                           A  6852    ;  599	        return return_info;
                           A  6853    .LINE 599
                           A  6854    
0B209E ED2206              A  6855    	LEA	HL,IX+%6
0B20A1 ED17                A  6856    	LD	DE,(HL)
0B20A3 DDE5E1              A  6857    	LD	HL,IX
0B20A6 013DF7FF            A  6858    	LD	BC,-2243
0B20AA 09                  A  6859    	ADD	HL,BC
0B20AB 01310400            A  6860    	LD	BC,1073
0B20AF EDB0                A  6861    	LDIR	
0B20B1 DD2706              A  6862    	LD	HL,(IX+%6)
0B20B4 C3 16 27 0B         A  6863    	JR	L_196
                           A  6864    ;  600	    }
0B20B8                     A  6865    L_172:
                           A  6866    .LINE 600
                           A  6867    
                           A  6868    ;  601	
                           A  6869    ;  602	    row_padding = (4 - (width * (bit_de
                           A  6870    .LINE 602
                           A  6871    
0B20B8 DD27F7              A  6872    	LD	HL,(IX+%FFFFFFF7)
0B20BB DD5EFA              A  6873    	LD	E,(IX+%FFFFFFFA)
0B20BE 01080000            A  6874    	LD	BC,8
0B20C2 AF                  A  6875    	XOR	A,A
0B20C3 CD 49 41 0B         A  6876    	CALL	__ldivs
0B20C7 DD07E8              A  6877    	LD	BC,(IX+%FFFFFFE8)
0B20CA DD7EEB              A  6878    	LD	A,(IX+%FFFFFFEB)
0B20CD CD 51 4A 0B         A  6879    	CALL	__lmuls
0B20D1 01040000            A  6880    	LD	BC,4
0B20D5 AF                  A  6881    	XOR	A,A
0B20D6 CD 34 48 0B         A  6882    	CALL	__lrems
0B20DA 7B                  A  6883    	LD	A,E
0B20DB E5C1                A  6884    	LD	BC,HL
0B20DD 21040000            A  6885    	LD	HL,4
0B20E1 1E00                A  6886    	LD	E,%0
0B20E3 CD C2 44 0B         A  6887    	CALL	__lsub
0B20E7 01040000            A  6888    	LD	BC,4
0B20EB AF                  A  6889    	XOR	A,A
0B20EC CD 34 48 0B         A  6890    	CALL	__lrems
0B20F0 DD2FE0              A  6891    	LD	(IX+%FFFFFFE0),HL
0B20F3 DD73E3              A  6892    	LD	(IX+%FFFFFFE3),E
                           A  6893    ;  603	
                           A  6894    ;  604		//clear_buffer(slot);
                           A  6895    ;  605		
                           A  6896    ;  606	    vdp_bitmapSelect(slot);
                           A  6897    .LINE 606
                           A  6898    
0B20F6 DD4E0C              A  6899    	LD	C,(IX+%C)
0B20F9 0600                A  6900    	LD	B,%0
0B20FB C5                  A  6901    	PUSH	BC
0B20FC CD 58 31 0B         A  6902    	CALL	_vdp_bitmapSelect
0B2100 C1                  A  6903    	POP	BC
                           A  6904    ;  607	    putch(23); // vdu_sys
                           A  6905    .LINE 607
                           A  6906    
0B2101 01170000            A  6907    	LD	BC,23
0B2105 C5                  A  6908    	PUSH	BC
0B2106 CD B9 38 0B         A  6909    	CALL	_putch
0B210A C1                  A  6910    	POP	BC
                           A  6911    ;  608	    putch(27); // sprite command
                           A  6912    .LINE 608
                           A  6913    
0B210B 011B0000            A  6914    	LD	BC,27
0B210F C5                  A  6915    	PUSH	BC
0B2110 CD B9 38 0B         A  6916    	CALL	_putch
0B2114 C1                  A  6917    	POP	BC
                           A  6918    ;  609	    putch(1); // send data to selected 
                           A  6919    .LINE 609
                           A  6920    
0B2115 01010000            A  6921    	LD	BC,1
0B2119 C5                  A  6922    	PUSH	BC
0B211A CD B9 38 0B         A  6923    	CALL	_putch
0B211E C1                  A  6924    	POP	BC
                           A  6925    ;  610	
                           A  6926    ;  611	    write16bit(width);
                           A  6927    .LINE 611
                           A  6928    
0B211F DD07E8              A  6929    	LD	BC,(IX+%FFFFFFE8)
0B2122 C5                  A  6930    	PUSH	BC
0B2123 CD F7 2C 0B         A  6931    	CALL	_write16bit
0B2127 C1                  A  6932    	POP	BC
                           A  6933    ;  612	    write16bit(height);
                           A  6934    .LINE 612
                           A  6935    
0B2128 DD07EC              A  6936    	LD	BC,(IX+%FFFFFFEC)
0B212B C5                  A  6937    	PUSH	BC
0B212C CD F7 2C 0B         A  6938    	CALL	_write16bit
0B2130 C1                  A  6939    	POP	BC
                           A  6940    ;  613		
                           A  6941    ;  614	    if (bit_depth == 8) {
                           A  6942    .LINE 614
                           A  6943    
0B2131 DD27F7              A  6944    	LD	HL,(IX+%FFFFFFF7)
0B2134 DD5EFA              A  6945    	LD	E,(IX+%FFFFFFFA)
0B2137 01080000            A  6946    	LD	BC,8
0B213B AF                  A  6947    	XOR	A,A
0B213C CD DB 47 0B         A  6948    	CALL	__lcmps
0B2140 C2 53 23 0B         A  6949    	JR	NZ,L_194
                           A  6950    ;  615			uint8_t a = 0xFF;
                           A  6951    ;  616			int non_pad_row = width * bit_d
                           A  6952    .LINE 616
                           A  6953    
0B2144 DD27E8              A  6954    	LD	HL,(IX+%FFFFFFE8)
0B2147 DD5EEB              A  6955    	LD	E,(IX+%FFFFFFEB)
0B214A DD07F7              A  6956    	LD	BC,(IX+%FFFFFFF7)
0B214D DD7EFA              A  6957    	LD	A,(IX+%FFFFFFFA)
0B2150 CD 51 4A 0B         A  6958    	CALL	__lmuls
0B2154 01080000            A  6959    	LD	BC,8
0B2158 AF                  A  6960    	XOR	A,A
0B2159 CD 49 41 0B         A  6961    	CALL	__ldivs
0B215D DD2FC6              A  6962    	LD	(IX+%FFFFFFC6),HL
                           A  6963    ;  617			mos_flseek(file, image_start + 
                           A  6964    .LINE 617
                           A  6965    
0B2160 E5C1                A  6966    	LD	BC,HL
0B2162 CD D4 47 0B         A  6967    	CALL	__itol
0B2166 DD27E0              A  6968    	LD	HL,(IX+%FFFFFFE0)
0B2169 DD5EE3              A  6969    	LD	E,(IX+%FFFFFFE3)
0B216C CD BC 3C 0B         A  6970    	CALL	__ladd
0B2170 7B                  A  6971    	LD	A,E
0B2171 FD212DF7 FF         A  6972    	LD	IY,-2259	; spill
0B2176 DDE5C1              A  6973    	LD	BC,IX	; spill
0B2179 FD09                A  6974    	ADD	IY,BC
0B217B FD7700              A  6975    	LD	(IY),A
0B217E 012AF7FF            A  6976    	LD	BC,-2262	; spill
0B2182 CD D7 3E 0B         A  6977    	CALL	__istix
0B2186 DD27EC              A  6978    	LD	HL,(IX+%FFFFFFEC)
0B2189 DD5EEF              A  6979    	LD	E,(IX+%FFFFFFEF)
0B218C 01010000            A  6980    	LD	BC,1
0B2190 AF                  A  6981    	XOR	A,A
0B2191 CD C2 44 0B         A  6982    	CALL	__lsub
0B2195 7B                  A  6983    	LD	A,E
0B2196 E5C1                A  6984    	LD	BC,HL
0B2198 C5                  A  6985    	PUSH	BC
0B2199 FD2139F7 FF         A  6986    	LD	IY,-2247	; spill
0B219E DDE5C1              A  6987    	LD	BC,IX	; spill
0B21A1 FD09                A  6988    	ADD	IY,BC
0B21A3 FD7700              A  6989    	LD	(IY),A
0B21A6 FD212DF7 FF         A  6990    	LD	IY,-2259	; unspill
0B21AB DDE5C1              A  6991    	LD	BC,IX	; unspill
0B21AE FD09                A  6992    	ADD	IY,BC
0B21B0 FD7E00              A  6993    	LD	A,(IY)
0B21B3 C1                  A  6994    	POP	BC
0B21B4 5F                  A  6995    	LD	E,A
0B21B5 C5                  A  6996    	PUSH	BC
0B21B6 FD2139F7 FF         A  6997    	LD	IY,-2247	; unspill
0B21BB DDE5C1              A  6998    	LD	BC,IX	; unspill
0B21BE FD09                A  6999    	ADD	IY,BC
0B21C0 FD7E00              A  7000    	LD	A,(IY)
0B21C3 C1                  A  7001    	POP	BC
0B21C4 C5E1                A  7002    	LD	HL,BC
0B21C6 0135F7FF            A  7003    	LD	BC,-2251	; spill
0B21CA CD D7 3E 0B         A  7004    	CALL	__istix
0B21CE 012AF7FF            A  7005    	LD	BC,-2262	; unspill
0B21D2 CD BE 4A 0B         A  7006    	CALL	__ildix
0B21D6 E5C1                A  7007    	LD	BC,HL
0B21D8 C5E1                A  7008    	LD	HL,BC
0B21DA 0135F7FF            A  7009    	LD	BC,-2251	; unspill
0B21DE E5                  A  7010    	PUSH	HL
0B21DF CD BE 4A 0B         A  7011    	CALL	__ildix
0B21E3 E5C1                A  7012    	LD	BC,HL
0B21E5 E1                  A  7013    	POP	HL
0B21E6 CD 51 4A 0B         A  7014    	CALL	__lmulu
0B21EA DD07C0              A  7015    	LD	BC,(IX+%FFFFFFC0)
0B21ED DD7EC3              A  7016    	LD	A,(IX+%FFFFFFC3)
0B21F0 CD BC 3C 0B         A  7017    	CALL	__ladd
0B21F4 4B                  A  7018    	LD	C,E
0B21F5 0600                A  7019    	LD	B,%0
0B21F7 C5                  A  7020    	PUSH	BC
0B21F8 E5                  A  7021    	PUSH	HL
0B21F9 DD4EFF              A  7022    	LD	C,(IX+%FFFFFFFF)
0B21FC C5                  A  7023    	PUSH	BC
0B21FD CD 78 3C 0B         A  7024    	CALL	_mos_flseek
0B2201 C1                  A  7025    	POP	BC
0B2202 C1                  A  7026    	POP	BC
0B2203 C1                  A  7027    	POP	BC
                           A  7028    ;  618			
                           A  7029    ;  619	        for (y = height - 1; y >= 0; y-
                           A  7030    .LINE 619
                           A  7031    
0B2204 DD27EC              A  7032    	LD	HL,(IX+%FFFFFFEC)
0B2207 DD5EEF              A  7033    	LD	E,(IX+%FFFFFFEF)
0B220A 01FFFFFF            A  7034    	LD	BC,16777215
0B220E 3EFF                A  7035    	LD	A,%FF
0B2210 CD BC 3C 0B         A  7036    	CALL	__ladd
0B2214 DD2FFB              A  7037    	LD	(IX+%FFFFFFFB),HL
0B2217 DD73FE              A  7038    	LD	(IX+%FFFFFFFE),E
0B221A C3 32 23 0B         A  7039    	JR	L_181
0B221E                     A  7040    L_179:
                           A  7041    ;  620	            for (x = 0; x < width; x++)
                           A  7042    .LINE 620
                           A  7043    
0B221E 01000000            A  7044    	LD	BC,0
0B2222 AF                  A  7045    	XOR	A,A
0B2223 DD0FCB              A  7046    	LD	(IX+%FFFFFFCB),BC
0B2226 DD77CE              A  7047    	LD	(IX+%FFFFFFCE),A
0B2229 C3 C7 22 0B         A  7048    	JR	L_177
0B222D                     A  7049    L_175:
                           A  7050    ;  621	
                           A  7051    ;  622	                index = (char) mos_fget
                           A  7052    .LINE 622
                           A  7053    
0B222D DD4EFF              A  7054    	LD	C,(IX+%FFFFFFFF)
0B2230 0600                A  7055    	LD	B,%0
0B2232 C5                  A  7056    	PUSH	BC
0B2233 CD 3E 3B 0B         A  7057    	CALL	_mos_fgetc
0B2237 C1                  A  7058    	POP	BC
0B2238 DD77DA              A  7059    	LD	(IX+%FFFFFFDA),A
                           A  7060    ;  623	                b = color_table[index *
                           A  7061    .LINE 623
                           A  7062    
0B223B B7ED62              A  7063    	UEXT	HL
0B223E 6F                  A  7064    	LD	L,A
0B223F 29                  A  7065    	ADD	HL,HL
0B2240 29                  A  7066    	ADD	HL,HL
0B2241 E5C1                A  7067    	LD	BC,HL
0B2243 DDE5E1              A  7068    	LD	HL,IX
0B2246 116EFBFF            A  7069    	LD	DE,-1170
0B224A 19                  A  7070    	ADD	HL,DE
0B224B 09                  A  7071    	ADD	HL,BC
0B224C FD213AF7 FF         A  7072    	LD	IY,-2246
0B2251 DDE5C1              A  7073    	LD	BC,IX
0B2254 FD09                A  7074    	ADD	IY,BC
0B2256 FD2F00              A  7075    	LD	(IY),HL
0B2259 213AF7FF            A  7076    	LD	HL,-2246
0B225D DDE5C1              A  7077    	LD	BC,IX
0B2260 09                  A  7078    	ADD	HL,BC
0B2261 ED27                A  7079    	LD	HL,(HL)
0B2263 7E                  A  7080    	LD	A,(HL)
0B2264 DD77DB              A  7081    	LD	(IX+%FFFFFFDB),A
                           A  7082    ;  624	                g = color_table[index *
                           A  7083    .LINE 624
                           A  7084    
0B2267 213AF7FF            A  7085    	LD	HL,-2246
0B226B DDE5C1              A  7086    	LD	BC,IX
0B226E 09                  A  7087    	ADD	HL,BC
0B226F ED27                A  7088    	LD	HL,(HL)
0B2271 23                  A  7089    	INC	HL
0B2272 7E                  A  7090    	LD	A,(HL)
0B2273 DD77C9              A  7091    	LD	(IX+%FFFFFFC9),A
                           A  7092    ;  625	                r = color_table[index *
                           A  7093    .LINE 625
                           A  7094    
0B2276 213AF7FF            A  7095    	LD	HL,-2246
0B227A DDE5C1              A  7096    	LD	BC,IX
0B227D 09                  A  7097    	ADD	HL,BC
0B227E ED31                A  7098    	LD	IY,(HL)
0B2280 ED2302              A  7099    	LEA	HL,IY+%2
0B2283 7E                  A  7100    	LD	A,(HL)
0B2284 DD77CA              A  7101    	LD	(IX+%FFFFFFCA),A
                           A  7102    ;  626					
                           A  7103    ;  627					putch(r);
                           A  7104    .LINE 627
                           A  7105    
0B2287 B7ED62              A  7106    	UEXT	HL
0B228A 6F                  A  7107    	LD	L,A
0B228B E5                  A  7108    	PUSH	HL
0B228C CD B9 38 0B         A  7109    	CALL	_putch
0B2290 C1                  A  7110    	POP	BC
                           A  7111    ;  628					putch(g);
                           A  7112    .LINE 628
                           A  7113    
0B2291 DD7EC9              A  7114    	LD	A,(IX+%FFFFFFC9)
0B2294 B7ED62              A  7115    	UEXT	HL
0B2297 6F                  A  7116    	LD	L,A
0B2298 E5                  A  7117    	PUSH	HL
0B2299 CD B9 38 0B         A  7118    	CALL	_putch
0B229D C1                  A  7119    	POP	BC
                           A  7120    ;  629					putch(b);
                           A  7121    .LINE 629
                           A  7122    
0B229E DD7EDB              A  7123    	LD	A,(IX+%FFFFFFDB)
0B22A1 B7ED62              A  7124    	UEXT	HL
0B22A4 6F                  A  7125    	LD	L,A
0B22A5 E5                  A  7126    	PUSH	HL
0B22A6 CD B9 38 0B         A  7127    	CALL	_putch
0B22AA C1                  A  7128    	POP	BC
                           A  7129    ;  630					putch(0xFF);
                           A  7130    .LINE 630
                           A  7131    
0B22AB 01FF0000            A  7132    	LD	BC,255
0B22AF C5                  A  7133    	PUSH	BC
0B22B0 CD B9 38 0B         A  7134    	CALL	_putch
0B22B4 C1                  A  7135    	POP	BC
0B22B5 DD27CB              A  7136    	LD	HL,(IX+%FFFFFFCB)
0B22B8 DD5ECE              A  7137    	LD	E,(IX+%FFFFFFCE)
0B22BB 3E01                A  7138    	LD	A,%1
0B22BD CD AD 3C 0B         A  7139    	CALL	__ladd_b
0B22C1 DD2FCB              A  7140    	LD	(IX+%FFFFFFCB),HL
0B22C4 DD73CE              A  7141    	LD	(IX+%FFFFFFCE),E
                           A  7142    ;  631					
                           A  7143    ;  632	
                           A  7144    ;  633	            }
0B22C7                     A  7145    L_177:
                           A  7146    .LINE 633
                           A  7147    
0B22C7 DD27CB              A  7148    	LD	HL,(IX+%FFFFFFCB)
0B22CA DD5ECE              A  7149    	LD	E,(IX+%FFFFFFCE)
0B22CD DD07E8              A  7150    	LD	BC,(IX+%FFFFFFE8)
0B22D0 DD7EEB              A  7151    	LD	A,(IX+%FFFFFFEB)
0B22D3 CD DB 47 0B         A  7152    	CALL	__lcmps
0B22D7 FA E1 22 0B         A  7153    	JP	M,L__156
0B22DB EA 2D 22 0B         A  7154    	JP	PE,L_175
0B22DF 18 04               A  7155    	JR	L__157
0B22E1                     A  7156    L__156:
0B22E1 E2 2D 22 0B         A  7157    	JP	PO,L_175
0B22E5                     A  7158    L__157:
                           A  7159    ;  634				
                           A  7160    ;  635				//add_stream_to_buffer(slot
                           A  7161    ;  636				mos_flseek(file, fo -> fptr
                           A  7162    .LINE 636
                           A  7163    
0B22E5 DD27C6              A  7164    	LD	HL,(IX+%FFFFFFC6)
0B22E8 29                  A  7165    	ADD	HL,HL
0B22E9 E5C1                A  7166    	LD	BC,HL
0B22EB CD D4 47 0B         A  7167    	CALL	__itol
0B22EF 5F                  A  7168    	LD	E,A
0B22F0 C5E1                A  7169    	LD	HL,BC
0B22F2 DD07E0              A  7170    	LD	BC,(IX+%FFFFFFE0)
0B22F5 DD7EE3              A  7171    	LD	A,(IX+%FFFFFFE3)
0B22F8 CD BC 3C 0B         A  7172    	CALL	__ladd
0B22FC 7B                  A  7173    	LD	A,E
0B22FD E5C1                A  7174    	LD	BC,HL
0B22FF DD31CF              A  7175    	LD	IY,(IX+%FFFFFFCF)
0B2302 FD2711              A  7176    	LD	HL,(IY+%11)
0B2305 FD5E14              A  7177    	LD	E,(IY+%14)
0B2308 CD C2 44 0B         A  7178    	CALL	__lsub
0B230C 4B                  A  7179    	LD	C,E
0B230D 0600                A  7180    	LD	B,%0
0B230F C5                  A  7181    	PUSH	BC
0B2310 E5                  A  7182    	PUSH	HL
0B2311 DD4EFF              A  7183    	LD	C,(IX+%FFFFFFFF)
0B2314 C5                  A  7184    	PUSH	BC
0B2315 CD 78 3C 0B         A  7185    	CALL	_mos_flseek
0B2319 C1                  A  7186    	POP	BC
0B231A C1                  A  7187    	POP	BC
0B231B C1                  A  7188    	POP	BC
0B231C DD27FB              A  7189    	LD	HL,(IX+%FFFFFFFB)
0B231F DD5EFE              A  7190    	LD	E,(IX+%FFFFFFFE)
0B2322 01FFFFFF            A  7191    	LD	BC,16777215
0B2326 3EFF                A  7192    	LD	A,%FF
0B2328 CD BC 3C 0B         A  7193    	CALL	__ladd
0B232C DD2FFB              A  7194    	LD	(IX+%FFFFFFFB),HL
0B232F DD73FE              A  7195    	LD	(IX+%FFFFFFFE),E
                           A  7196    ;  637	            // for (i = 0; i < row_padd
                           A  7197    ;  638	                // mos_fgetc(file);
                           A  7198    ;  639	            // }
                           A  7199    ;  640	
                           A  7200    ;  641	        }
0B2332                     A  7201    L_181:
                           A  7202    .LINE 641
                           A  7203    
0B2332 DD27FB              A  7204    	LD	HL,(IX+%FFFFFFFB)
0B2335 DD5EFE              A  7205    	LD	E,(IX+%FFFFFFFE)
0B2338 01000000            A  7206    	LD	BC,0
0B233C AF                  A  7207    	XOR	A,A
0B233D CD DB 47 0B         A  7208    	CALL	__lcmps
0B2341 F2 4B 23 0B         A  7209    	JP	P,L__158
0B2345 EA 1E 22 0B         A  7210    	JP	PE,L_179
0B2349 18 04               A  7211    	JR	L__159
0B234B                     A  7212    L__158:
0B234B E2 1E 22 0B         A  7213    	JP	PO,L_179
0B234F                     A  7214    L__159:
0B234F C3 C4 26 0B         A  7215    	JR	L_195
                           A  7216    ;  642	
                           A  7217    ;  643	    } else if (bit_depth == 32) {
0B2353                     A  7218    L_194:
                           A  7219    .LINE 643
                           A  7220    
0B2353 DD27F7              A  7221    	LD	HL,(IX+%FFFFFFF7)
0B2356 DD5EFA              A  7222    	LD	E,(IX+%FFFFFFFA)
0B2359 01200000            A  7223    	LD	BC,32
0B235D AF                  A  7224    	XOR	A,A
0B235E CD DB 47 0B         A  7225    	CALL	__lcmps
0B2362 C2 00 25 0B         A  7226    	JR	NZ,L_192
                           A  7227    ;  644	        
                           A  7228    ;  645			int non_pad_row = width * bit_d
                           A  7229    .LINE 645
                           A  7230    
0B2366 DD27E8              A  7231    	LD	HL,(IX+%FFFFFFE8)
0B2369 DD5EEB              A  7232    	LD	E,(IX+%FFFFFFEB)
0B236C DD07F7              A  7233    	LD	BC,(IX+%FFFFFFF7)
0B236F DD7EFA              A  7234    	LD	A,(IX+%FFFFFFFA)
0B2372 CD 51 4A 0B         A  7235    	CALL	__lmuls
0B2376 01080000            A  7236    	LD	BC,8
0B237A AF                  A  7237    	XOR	A,A
0B237B CD 49 41 0B         A  7238    	CALL	__ldivs
0B237F DD2FE4              A  7239    	LD	(IX+%FFFFFFE4),HL
0B2382 DD73E7              A  7240    	LD	(IX+%FFFFFFE7),E
0B2385 DD2FA4              A  7241    	LD	(IX+%FFFFFFA4),HL
                           A  7242    ;  646	        src = (char * ) malloc(width * 
                           A  7243    .LINE 646
                           A  7244    
0B2388 E5C1                A  7245    	LD	BC,HL
0B238A C5                  A  7246    	PUSH	BC
0B238B CD C7 3D 0B         A  7247    	CALL	_malloc
0B238F C1                  A  7248    	POP	BC
0B2390 DD2FF0              A  7249    	LD	(IX+%FFFFFFF0),HL
                           A  7250    ;  647			mos_flseek(file, image_start + 
                           A  7251    .LINE 647
                           A  7252    
0B2393 DD07E4              A  7253    	LD	BC,(IX+%FFFFFFE4)
0B2396 CD D4 47 0B         A  7254    	CALL	__itol
0B239A DD27E0              A  7255    	LD	HL,(IX+%FFFFFFE0)
0B239D DD5EE3              A  7256    	LD	E,(IX+%FFFFFFE3)
0B23A0 CD BC 3C 0B         A  7257    	CALL	__ladd
0B23A4 7B                  A  7258    	LD	A,E
0B23A5 FD2131F7 FF         A  7259    	LD	IY,-2255	; spill
0B23AA DDE5C1              A  7260    	LD	BC,IX	; spill
0B23AD FD09                A  7261    	ADD	IY,BC
0B23AF FD7700              A  7262    	LD	(IY),A
0B23B2 012EF7FF            A  7263    	LD	BC,-2258	; spill
0B23B6 CD D7 3E 0B         A  7264    	CALL	__istix
0B23BA DD27EC              A  7265    	LD	HL,(IX+%FFFFFFEC)
0B23BD DD5EEF              A  7266    	LD	E,(IX+%FFFFFFEF)
0B23C0 01010000            A  7267    	LD	BC,1
0B23C4 AF                  A  7268    	XOR	A,A
0B23C5 CD C2 44 0B         A  7269    	CALL	__lsub
0B23C9 7B                  A  7270    	LD	A,E
0B23CA E5C1                A  7271    	LD	BC,HL
0B23CC C5                  A  7272    	PUSH	BC
0B23CD FD2139F7 FF         A  7273    	LD	IY,-2247	; spill
0B23D2 DDE5C1              A  7274    	LD	BC,IX	; spill
0B23D5 FD09                A  7275    	ADD	IY,BC
0B23D7 FD7700              A  7276    	LD	(IY),A
0B23DA FD2131F7 FF         A  7277    	LD	IY,-2255	; unspill
0B23DF DDE5C1              A  7278    	LD	BC,IX	; unspill
0B23E2 FD09                A  7279    	ADD	IY,BC
0B23E4 FD7E00              A  7280    	LD	A,(IY)
0B23E7 C1                  A  7281    	POP	BC
0B23E8 5F                  A  7282    	LD	E,A
0B23E9 C5                  A  7283    	PUSH	BC
0B23EA FD2139F7 FF         A  7284    	LD	IY,-2247	; unspill
0B23EF DDE5C1              A  7285    	LD	BC,IX	; unspill
0B23F2 FD09                A  7286    	ADD	IY,BC
0B23F4 FD7E00              A  7287    	LD	A,(IY)
0B23F7 C1                  A  7288    	POP	BC
0B23F8 C5E1                A  7289    	LD	HL,BC
0B23FA 0135F7FF            A  7290    	LD	BC,-2251	; spill
0B23FE CD D7 3E 0B         A  7291    	CALL	__istix
0B2402 012EF7FF            A  7292    	LD	BC,-2258	; unspill
0B2406 CD BE 4A 0B         A  7293    	CALL	__ildix
0B240A E5C1                A  7294    	LD	BC,HL
0B240C C5E1                A  7295    	LD	HL,BC
0B240E 0135F7FF            A  7296    	LD	BC,-2251	; unspill
0B2412 E5                  A  7297    	PUSH	HL
0B2413 CD BE 4A 0B         A  7298    	CALL	__ildix
0B2417 E5C1                A  7299    	LD	BC,HL
0B2419 E1                  A  7300    	POP	HL
0B241A CD 51 4A 0B         A  7301    	CALL	__lmulu
0B241E DD07C0              A  7302    	LD	BC,(IX+%FFFFFFC0)
0B2421 DD7EC3              A  7303    	LD	A,(IX+%FFFFFFC3)
0B2424 CD BC 3C 0B         A  7304    	CALL	__ladd
0B2428 4B                  A  7305    	LD	C,E
0B2429 0600                A  7306    	LD	B,%0
0B242B C5                  A  7307    	PUSH	BC
0B242C E5                  A  7308    	PUSH	HL
0B242D DD4EFF              A  7309    	LD	C,(IX+%FFFFFFFF)
0B2430 C5                  A  7310    	PUSH	BC
0B2431 CD 78 3C 0B         A  7311    	CALL	_mos_flseek
0B2435 C1                  A  7312    	POP	BC
0B2436 C1                  A  7313    	POP	BC
0B2437 C1                  A  7314    	POP	BC
                           A  7315    ;  648	
                           A  7316    ;  649	        for (y = height - 1; y >= 0; y-
                           A  7317    .LINE 649
                           A  7318    
0B2438 DD27EC              A  7319    	LD	HL,(IX+%FFFFFFEC)
0B243B DD5EEF              A  7320    	LD	E,(IX+%FFFFFFEF)
0B243E 01FFFFFF            A  7321    	LD	BC,16777215
0B2442 3EFF                A  7322    	LD	A,%FF
0B2444 CD BC 3C 0B         A  7323    	CALL	__ladd
0B2448 DD2FFB              A  7324    	LD	(IX+%FFFFFFFB),HL
0B244B DD73FE              A  7325    	LD	(IX+%FFFFFFFE),E
0B244E C3 DF 24 0B         A  7326    	JR	L_185
0B2452                     A  7327    L_183:
                           A  7328    ;  650	
                           A  7329    ;  651	            mos_fread(file, src, non_pa
                           A  7330    .LINE 651
                           A  7331    
0B2452 DD07E4              A  7332    	LD	BC,(IX+%FFFFFFE4)
0B2455 C5                  A  7333    	PUSH	BC
0B2456 DD07F0              A  7334    	LD	BC,(IX+%FFFFFFF0)
0B2459 C5                  A  7335    	PUSH	BC
0B245A DD4EFF              A  7336    	LD	C,(IX+%FFFFFFFF)
0B245D 0600                A  7337    	LD	B,%0
0B245F C5                  A  7338    	PUSH	BC
0B2460 CD 3E 3C 0B         A  7339    	CALL	_mos_fread
0B2464 C1                  A  7340    	POP	BC
0B2465 C1                  A  7341    	POP	BC
0B2466 C1                  A  7342    	POP	BC
                           A  7343    ;  652				reorder(src, non_pad_row);
                           A  7344    .LINE 652
                           A  7345    
0B2467 DD07E4              A  7346    	LD	BC,(IX+%FFFFFFE4)
0B246A C5                  A  7347    	PUSH	BC
0B246B DD07F0              A  7348    	LD	BC,(IX+%FFFFFFF0)
0B246E C5                  A  7349    	PUSH	BC
0B246F CD 9A 04 0B         A  7350    	CALL	_reorder
0B2473 C1                  A  7351    	POP	BC
0B2474 C1                  A  7352    	POP	BC
                           A  7353    ;  653	            mos_puts(src, non_pad_row, 
                           A  7354    .LINE 653
                           A  7355    
0B2475 01000000            A  7356    	LD	BC,0
0B2479 C5                  A  7357    	PUSH	BC
0B247A DD07E4              A  7358    	LD	BC,(IX+%FFFFFFE4)
0B247D C5                  A  7359    	PUSH	BC
0B247E DD07F0              A  7360    	LD	BC,(IX+%FFFFFFF0)
0B2481 C5                  A  7361    	PUSH	BC
0B2482 CD D1 38 0B         A  7362    	CALL	_mos_puts
0B2486 C1                  A  7363    	POP	BC
0B2487 C1                  A  7364    	POP	BC
0B2488 C1                  A  7365    	POP	BC
                           A  7366    ;  654				//add_stream_to_buffer(slot
                           A  7367    ;  655	            mos_flseek(file, fo -> fptr
                           A  7368    .LINE 655
                           A  7369    
0B2489 DD27E4              A  7370    	LD	HL,(IX+%FFFFFFE4)
0B248C 29                  A  7371    	ADD	HL,HL
0B248D E5C1                A  7372    	LD	BC,HL
0B248F CD D4 47 0B         A  7373    	CALL	__itol
0B2493 5F                  A  7374    	LD	E,A
0B2494 C5E1                A  7375    	LD	HL,BC
0B2496 DD07E0              A  7376    	LD	BC,(IX+%FFFFFFE0)
0B2499 DD7EE3              A  7377    	LD	A,(IX+%FFFFFFE3)
0B249C CD BC 3C 0B         A  7378    	CALL	__ladd
0B24A0 7B                  A  7379    	LD	A,E
0B24A1 E5C1                A  7380    	LD	BC,HL
0B24A3 DD31CF              A  7381    	LD	IY,(IX+%FFFFFFCF)
0B24A6 FD2711              A  7382    	LD	HL,(IY+%11)
0B24A9 FD5E14              A  7383    	LD	E,(IY+%14)
0B24AC CD C2 44 0B         A  7384    	CALL	__lsub
0B24B0 4B                  A  7385    	LD	C,E
0B24B1 0600                A  7386    	LD	B,%0
0B24B3 C5                  A  7387    	PUSH	BC
0B24B4 E5                  A  7388    	PUSH	HL
0B24B5 DD4EFF              A  7389    	LD	C,(IX+%FFFFFFFF)
0B24B8 C5                  A  7390    	PUSH	BC
0B24B9 CD 78 3C 0B         A  7391    	CALL	_mos_flseek
0B24BD C1                  A  7392    	POP	BC
0B24BE C1                  A  7393    	POP	BC
0B24BF C1                  A  7394    	POP	BC
                           A  7395    ;  656				free(src);			
                           A  7396    .LINE 656
                           A  7397    
0B24C0 DD07F0              A  7398    	LD	BC,(IX+%FFFFFFF0)
0B24C3 C5                  A  7399    	PUSH	BC
0B24C4 CD C2 3C 0B         A  7400    	CALL	_free
0B24C8 C1                  A  7401    	POP	BC
0B24C9 DD27FB              A  7402    	LD	HL,(IX+%FFFFFFFB)
0B24CC DD5EFE              A  7403    	LD	E,(IX+%FFFFFFFE)
0B24CF 01FFFFFF            A  7404    	LD	BC,16777215
0B24D3 3EFF                A  7405    	LD	A,%FF
0B24D5 CD BC 3C 0B         A  7406    	CALL	__ladd
0B24D9 DD2FFB              A  7407    	LD	(IX+%FFFFFFFB),HL
0B24DC DD73FE              A  7408    	LD	(IX+%FFFFFFFE),E
                           A  7409    ;  657	
                           A  7410    ;  658	        }
0B24DF                     A  7411    L_185:
                           A  7412    .LINE 658
                           A  7413    
0B24DF DD27FB              A  7414    	LD	HL,(IX+%FFFFFFFB)
0B24E2 DD5EFE              A  7415    	LD	E,(IX+%FFFFFFFE)
0B24E5 01000000            A  7416    	LD	BC,0
0B24E9 AF                  A  7417    	XOR	A,A
0B24EA CD DB 47 0B         A  7418    	CALL	__lcmps
0B24EE F2 F8 24 0B         A  7419    	JP	P,L__160
0B24F2 EA 52 24 0B         A  7420    	JP	PE,L_183
0B24F6 18 04               A  7421    	JR	L__161
0B24F8                     A  7422    L__160:
0B24F8 E2 52 24 0B         A  7423    	JP	PO,L_183
0B24FC                     A  7424    L__161:
0B24FC C3 C4 26 0B         A  7425    	JR	L_195
                           A  7426    ;  659	
                           A  7427    ;  660	    } else if (bit_depth == 24) {
0B2500                     A  7428    L_192:
                           A  7429    .LINE 660
                           A  7430    
0B2500 DD27F7              A  7431    	LD	HL,(IX+%FFFFFFF7)
0B2503 DD5EFA              A  7432    	LD	E,(IX+%FFFFFFFA)
0B2506 01180000            A  7433    	LD	BC,24
0B250A AF                  A  7434    	XOR	A,A
0B250B CD DB 47 0B         A  7435    	CALL	__lcmps
0B250F C2 C4 26 0B         A  7436    	JR	NZ,L_195
                           A  7437    ;  661			
                           A  7438    ;  662			uint16_t new_row_size;
                           A  7439    ;  663			int non_pad_row = width * bit_d
                           A  7440    .LINE 663
                           A  7441    
0B2513 DD27E8              A  7442    	LD	HL,(IX+%FFFFFFE8)
0B2516 DD5EEB              A  7443    	LD	E,(IX+%FFFFFFEB)
0B2519 DD07F7              A  7444    	LD	BC,(IX+%FFFFFFF7)
0B251C DD7EFA              A  7445    	LD	A,(IX+%FFFFFFFA)
0B251F CD 51 4A 0B         A  7446    	CALL	__lmuls
0B2523 01080000            A  7447    	LD	BC,8
0B2527 AF                  A  7448    	XOR	A,A
0B2528 CD 49 41 0B         A  7449    	CALL	__ldivs
0B252C DD2FDC              A  7450    	LD	(IX+%FFFFFFDC),HL
0B252F DD73DF              A  7451    	LD	(IX+%FFFFFFDF),E
0B2532 DD2FB3              A  7452    	LD	(IX+%FFFFFFB3),HL
                           A  7453    ;  664			
                           A  7454    ;  665	        src = (char * ) malloc(width * 
                           A  7455    .LINE 665
                           A  7456    
0B2535 E5C1                A  7457    	LD	BC,HL
0B2537 C5                  A  7458    	PUSH	BC
0B2538 CD C7 3D 0B         A  7459    	CALL	_malloc
0B253C C1                  A  7460    	POP	BC
0B253D DD2FF0              A  7461    	LD	(IX+%FFFFFFF0),HL
                           A  7462    ;  666			mos_flseek(file, image_start + 
                           A  7463    .LINE 666
                           A  7464    
0B2540 DD07DC              A  7465    	LD	BC,(IX+%FFFFFFDC)
0B2543 CD D4 47 0B         A  7466    	CALL	__itol
0B2547 DD27E0              A  7467    	LD	HL,(IX+%FFFFFFE0)
0B254A DD5EE3              A  7468    	LD	E,(IX+%FFFFFFE3)
0B254D CD BC 3C 0B         A  7469    	CALL	__ladd
0B2551 7B                  A  7470    	LD	A,E
0B2552 FD2138F7 FF         A  7471    	LD	IY,-2248	; spill
0B2557 DDE5C1              A  7472    	LD	BC,IX	; spill
0B255A FD09                A  7473    	ADD	IY,BC
0B255C FD7700              A  7474    	LD	(IY),A
0B255F 0132F7FF            A  7475    	LD	BC,-2254	; spill
0B2563 CD D7 3E 0B         A  7476    	CALL	__istix
0B2567 DD27EC              A  7477    	LD	HL,(IX+%FFFFFFEC)
0B256A DD5EEF              A  7478    	LD	E,(IX+%FFFFFFEF)
0B256D 01010000            A  7479    	LD	BC,1
0B2571 AF                  A  7480    	XOR	A,A
0B2572 CD C2 44 0B         A  7481    	CALL	__lsub
0B2576 7B                  A  7482    	LD	A,E
0B2577 E5C1                A  7483    	LD	BC,HL
0B2579 C5                  A  7484    	PUSH	BC
0B257A FD2139F7 FF         A  7485    	LD	IY,-2247	; spill
0B257F DDE5C1              A  7486    	LD	BC,IX	; spill
0B2582 FD09                A  7487    	ADD	IY,BC
0B2584 FD7700              A  7488    	LD	(IY),A
0B2587 FD2138F7 FF         A  7489    	LD	IY,-2248	; unspill
0B258C DDE5C1              A  7490    	LD	BC,IX	; unspill
0B258F FD09                A  7491    	ADD	IY,BC
0B2591 FD7E00              A  7492    	LD	A,(IY)
0B2594 C1                  A  7493    	POP	BC
0B2595 5F                  A  7494    	LD	E,A
0B2596 C5                  A  7495    	PUSH	BC
0B2597 FD2139F7 FF         A  7496    	LD	IY,-2247	; unspill
0B259C DDE5C1              A  7497    	LD	BC,IX	; unspill
0B259F FD09                A  7498    	ADD	IY,BC
0B25A1 FD7E00              A  7499    	LD	A,(IY)
0B25A4 C1                  A  7500    	POP	BC
0B25A5 C5E1                A  7501    	LD	HL,BC
0B25A7 0135F7FF            A  7502    	LD	BC,-2251	; spill
0B25AB CD D7 3E 0B         A  7503    	CALL	__istix
0B25AF 0132F7FF            A  7504    	LD	BC,-2254	; unspill
0B25B3 CD BE 4A 0B         A  7505    	CALL	__ildix
0B25B7 E5C1                A  7506    	LD	BC,HL
0B25B9 C5E1                A  7507    	LD	HL,BC
0B25BB 0135F7FF            A  7508    	LD	BC,-2251	; unspill
0B25BF E5                  A  7509    	PUSH	HL
0B25C0 CD BE 4A 0B         A  7510    	CALL	__ildix
0B25C4 E5C1                A  7511    	LD	BC,HL
0B25C6 E1                  A  7512    	POP	HL
0B25C7 CD 51 4A 0B         A  7513    	CALL	__lmulu
0B25CB DD07C0              A  7514    	LD	BC,(IX+%FFFFFFC0)
0B25CE DD7EC3              A  7515    	LD	A,(IX+%FFFFFFC3)
0B25D1 CD BC 3C 0B         A  7516    	CALL	__ladd
0B25D5 4B                  A  7517    	LD	C,E
0B25D6 0600                A  7518    	LD	B,%0
0B25D8 C5                  A  7519    	PUSH	BC
0B25D9 E5                  A  7520    	PUSH	HL
0B25DA DD4EFF              A  7521    	LD	C,(IX+%FFFFFFFF)
0B25DD C5                  A  7522    	PUSH	BC
0B25DE CD 78 3C 0B         A  7523    	CALL	_mos_flseek
0B25E2 C1                  A  7524    	POP	BC
0B25E3 C1                  A  7525    	POP	BC
0B25E4 C1                  A  7526    	POP	BC
                           A  7527    ;  667			
                           A  7528    ;  668	        for (y = height - 1; y >= 0; y-
                           A  7529    .LINE 668
                           A  7530    
0B25E5 DD27EC              A  7531    	LD	HL,(IX+%FFFFFFEC)
0B25E8 DD5EEF              A  7532    	LD	E,(IX+%FFFFFFEF)
0B25EB 01FFFFFF            A  7533    	LD	BC,16777215
0B25EF 3EFF                A  7534    	LD	A,%FF
0B25F1 CD BC 3C 0B         A  7535    	CALL	__ladd
0B25F5 DD2FFB              A  7536    	LD	(IX+%FFFFFFFB),HL
0B25F8 DD73FE              A  7537    	LD	(IX+%FFFFFFFE),E
0B25FB C3 A7 26 0B         A  7538    	JR	L_189
0B25FF                     A  7539    L_187:
                           A  7540    ;  669	
                           A  7541    ;  670	            mos_fread(file, src, non_pa
                           A  7542    .LINE 670
                           A  7543    
0B25FF DD07DC              A  7544    	LD	BC,(IX+%FFFFFFDC)
0B2602 C5                  A  7545    	PUSH	BC
0B2603 DD07F0              A  7546    	LD	BC,(IX+%FFFFFFF0)
0B2606 C5                  A  7547    	PUSH	BC
0B2607 DD4EFF              A  7548    	LD	C,(IX+%FFFFFFFF)
0B260A 0600                A  7549    	LD	B,%0
0B260C C5                  A  7550    	PUSH	BC
0B260D CD 3E 3C 0B         A  7551    	CALL	_mos_fread
0B2611 C1                  A  7552    	POP	BC
0B2612 C1                  A  7553    	POP	BC
0B2613 C1                  A  7554    	POP	BC
                           A  7555    ;  671				reorder_and_insert(src, non
                           A  7556    .LINE 671
                           A  7557    
0B2614 01FFFFFF            A  7558    	LD	BC,16777215
0B2618 C5                  A  7559    	PUSH	BC
0B2619 ED65C4              A  7560    	PEA	IX+%FFFFFFC4
0B261C ED65BD              A  7561    	PEA	IX+%FFFFFFBD
0B261F DD07DC              A  7562    	LD	BC,(IX+%FFFFFFDC)
0B2622 C5                  A  7563    	PUSH	BC
0B2623 DD07F0              A  7564    	LD	BC,(IX+%FFFFFFF0)
0B2626 C5                  A  7565    	PUSH	BC
0B2627 CD 28 05 0B         A  7566    	CALL	_reorder_and_insert
0B262B C1                  A  7567    	POP	BC
0B262C C1                  A  7568    	POP	BC
0B262D C1                  A  7569    	POP	BC
0B262E C1                  A  7570    	POP	BC
0B262F C1                  A  7571    	POP	BC
                           A  7572    ;  672	            mos_puts(row_24bpp, new_row
                           A  7573    .LINE 672
                           A  7574    
0B2630 01000000            A  7575    	LD	BC,0
0B2634 C5                  A  7576    	PUSH	BC
0B2635 DD07C4              A  7577    	LD	BC,(IX+%FFFFFFC4)
0B2638 CD 9E 40 0B         A  7578    	CALL	__stoiu
0B263C E5                  A  7579    	PUSH	HL
0B263D DD07BD              A  7580    	LD	BC,(IX+%FFFFFFBD)
0B2640 C5                  A  7581    	PUSH	BC
0B2641 CD D1 38 0B         A  7582    	CALL	_mos_puts
0B2645 C1                  A  7583    	POP	BC
0B2646 C1                  A  7584    	POP	BC
0B2647 C1                  A  7585    	POP	BC
                           A  7586    ;  673				//add_stream_to_buffer(slot
                           A  7587    ;  674	            mos_flseek(file, fo -> fptr
                           A  7588    .LINE 674
                           A  7589    
0B2648 DD27DC              A  7590    	LD	HL,(IX+%FFFFFFDC)
0B264B 29                  A  7591    	ADD	HL,HL
0B264C E5C1                A  7592    	LD	BC,HL
0B264E CD D4 47 0B         A  7593    	CALL	__itol
0B2652 5F                  A  7594    	LD	E,A
0B2653 C5E1                A  7595    	LD	HL,BC
0B2655 DD07E0              A  7596    	LD	BC,(IX+%FFFFFFE0)
0B2658 DD7EE3              A  7597    	LD	A,(IX+%FFFFFFE3)
0B265B CD BC 3C 0B         A  7598    	CALL	__ladd
0B265F 7B                  A  7599    	LD	A,E
0B2660 E5C1                A  7600    	LD	BC,HL
0B2662 DD31CF              A  7601    	LD	IY,(IX+%FFFFFFCF)
0B2665 FD2711              A  7602    	LD	HL,(IY+%11)
0B2668 FD5E14              A  7603    	LD	E,(IY+%14)
0B266B CD C2 44 0B         A  7604    	CALL	__lsub
0B266F 4B                  A  7605    	LD	C,E
0B2670 0600                A  7606    	LD	B,%0
0B2672 C5                  A  7607    	PUSH	BC
0B2673 E5                  A  7608    	PUSH	HL
0B2674 DD4EFF              A  7609    	LD	C,(IX+%FFFFFFFF)
0B2677 C5                  A  7610    	PUSH	BC
0B2678 CD 78 3C 0B         A  7611    	CALL	_mos_flseek
0B267C C1                  A  7612    	POP	BC
0B267D C1                  A  7613    	POP	BC
0B267E C1                  A  7614    	POP	BC
                           A  7615    ;  675				free(row_24bpp);
                           A  7616    .LINE 675
                           A  7617    
0B267F DD07BD              A  7618    	LD	BC,(IX+%FFFFFFBD)
0B2682 C5                  A  7619    	PUSH	BC
0B2683 CD C2 3C 0B         A  7620    	CALL	_free
0B2687 C1                  A  7621    	POP	BC
                           A  7622    ;  676				free(src);
                           A  7623    .LINE 676
                           A  7624    
0B2688 DD07F0              A  7625    	LD	BC,(IX+%FFFFFFF0)
0B268B C5                  A  7626    	PUSH	BC
0B268C CD C2 3C 0B         A  7627    	CALL	_free
0B2690 C1                  A  7628    	POP	BC
0B2691 DD27FB              A  7629    	LD	HL,(IX+%FFFFFFFB)
0B2694 DD5EFE              A  7630    	LD	E,(IX+%FFFFFFFE)
0B2697 01FFFFFF            A  7631    	LD	BC,16777215
0B269B 3EFF                A  7632    	LD	A,%FF
0B269D CD BC 3C 0B         A  7633    	CALL	__ladd
0B26A1 DD2FFB              A  7634    	LD	(IX+%FFFFFFFB),HL
0B26A4 DD73FE              A  7635    	LD	(IX+%FFFFFFFE),E
                           A  7636    ;  677	
                           A  7637    ;  678	        }		
0B26A7                     A  7638    L_189:
                           A  7639    .LINE 678
                           A  7640    
0B26A7 DD27FB              A  7641    	LD	HL,(IX+%FFFFFFFB)
0B26AA DD5EFE              A  7642    	LD	E,(IX+%FFFFFFFE)
0B26AD 01000000            A  7643    	LD	BC,0
0B26B1 AF                  A  7644    	XOR	A,A
0B26B2 CD DB 47 0B         A  7645    	CALL	__lcmps
0B26B6 F2 C0 26 0B         A  7646    	JP	P,L__162
0B26BA EA FF 25 0B         A  7647    	JP	PE,L_187
0B26BE 18 04               A  7648    	JR	L__163
0B26C0                     A  7649    L__162:
0B26C0 E2 FF 25 0B         A  7650    	JP	PO,L_187
0B26C4                     A  7651    L__163:
                           A  7652    ;  679			
                           A  7653    ;  680		}
0B26C4                     A  7654    L_195:
                           A  7655    .LINE 680
                           A  7656    
                           A  7657    ;  681	
                           A  7658    ;  682		//assign_buffer_to_bitmap(slot,0,wi
                           A  7659    ;  683		
                           A  7660    ;  684	    mos_fclose(file);
                           A  7661    .LINE 684
                           A  7662    
0B26C4 DD4EFF              A  7663    	LD	C,(IX+%FFFFFFFF)
0B26C7 0600                A  7664    	LD	B,%0
0B26C9 C5                  A  7665    	PUSH	BC
0B26CA CD 29 3B 0B         A  7666    	CALL	_mos_fclose
0B26CE C1                  A  7667    	POP	BC
                           A  7668    ;  685	    free(image_buffer);
                           A  7669    .LINE 685
                           A  7670    
0B26CF DD07BA              A  7671    	LD	BC,(IX+%FFFFFFBA)
0B26D2 C5                  A  7672    	PUSH	BC
0B26D3 CD C2 3C 0B         A  7673    	CALL	_free
0B26D7 C1                  A  7674    	POP	BC
                           A  7675    ;  686	    //return width * height;
                           A  7676    ;  687		return_info.bmp_width = width;
                           A  7677    .LINE 687
                           A  7678    
0B26D8 213DF7FF            A  7679    	LD	HL,-2243
0B26DC DDE5C1              A  7680    	LD	BC,IX
0B26DF 09                  A  7681    	ADD	HL,BC
0B26E0 DD07E8              A  7682    	LD	BC,(IX+%FFFFFFE8)
0B26E3 71                  A  7683    	LD	(HL),C
0B26E4 23                  A  7684    	INC	HL
0B26E5 70                  A  7685    	LD	(HL),B
                           A  7686    ;  688		return_info.bmp_height = height;
                           A  7687    .LINE 688
                           A  7688    
0B26E6 213FF7FF            A  7689    	LD	HL,-2241
0B26EA DDE5C1              A  7690    	LD	BC,IX
0B26ED 09                  A  7691    	ADD	HL,BC
0B26EE DD07EC              A  7692    	LD	BC,(IX+%FFFFFFEC)
0B26F1 71                  A  7693    	LD	(HL),C
0B26F2 23                  A  7694    	INC	HL
0B26F3 70                  A  7695    	LD	(HL),B
                           A  7696    ;  689		return_info.bmp_bitdepth = bit_dept
                           A  7697    .LINE 689
                           A  7698    
0B26F4 DD7EF7              A  7699    	LD	A,(IX+%FFFFFFF7)
0B26F7 2141F7FF            A  7700    	LD	HL,-2239
0B26FB DDE5C1              A  7701    	LD	BC,IX
0B26FE 09                  A  7702    	ADD	HL,BC
0B26FF 77                  A  7703    	LD	(HL),A
                           A  7704    ;  690		return return_info;
                           A  7705    .LINE 690
                           A  7706    
0B2700 ED2206              A  7707    	LEA	HL,IX+%6
0B2703 ED17                A  7708    	LD	DE,(HL)
0B2705 DDE5E1              A  7709    	LD	HL,IX
0B2708 013DF7FF            A  7710    	LD	BC,-2243
0B270C 09                  A  7711    	ADD	HL,BC
0B270D 01310400            A  7712    	LD	BC,1073
0B2711 EDB0                A  7713    	LDIR	
0B2713 DD2706              A  7714    	LD	HL,(IX+%6)
                           A  7715    ;  691	
                           A  7716    ;  692	}
0B2716                     A  7717    L_196:
                           A  7718    .LINE 692
                           A  7719    
0B2716 DDF9                A  7720    	LD	SP,IX
0B2718 DDE1                A  7721    	POP	IX
0B271A C9                  A  7722    	RET	
                           A  7723    
                           A  7724    
                           A  7725    ;**************************** _load_bmp_big ***
                           A  7726    ;Name                         Addr/Register   S
                           A  7727    ;_free                               IMPORT  --
                           A  7728    ;_mos_puts                           IMPORT  --
                           A  7729    ;_mos_flseek                         IMPORT  --
                           A  7730    ;_write16bit                         IMPORT  --
                           A  7731    ;_putch                              IMPORT  --
                           A  7732    ;_vdp_bitmapSelect                   IMPORT  --
                           A  7733    ;_mos_fgetc                          IMPORT  --
                           A  7734    ;_mos_fclose                         IMPORT  --
                           A  7735    ;_memcmp                             IMPORT  --
                           A  7736    ;_malloc                             IMPORT  --
                           A  7737    ;_mos_fread                          IMPORT  --
                           A  7738    ;_mos_getfil                         IMPORT  --
                           A  7739    ;___print_sendstring                 IMPORT  --
                           A  7740    ;___print_xputch                     IMPORT    
                           A  7741    ;___print_uputch                     IMPORT  --
                           A  7742    ;_mos_fopen                          IMPORT  --
                           A  7743    ;return_info                        IX-2243   1
                           A  7744    ;color_table                        IX-1170   1
                           A  7745    ;header                              IX-146    
                           A  7746    ;non_pad_row                          IX-92    
                           A  7747    ;redMask                              IX-89    
                           A  7748    ;alphaMask                            IX-85    
                           A  7749    ;blueMask                             IX-81    
                           A  7750    ;non_pad_row                          IX-77    
                           A  7751    ;greenMask                            IX-74    
                           A  7752    ;image_buffer                         IX-70    
                           A  7753    ;row_24bpp                            IX-67    
                           A  7754    ;image_start                          IX-64    
                           A  7755    ;new_row_size                         IX-60    
                           A  7756    ;non_pad_row                          IX-58    
                           A  7757    ;g                                    IX-55    
                           A  7758    ;r                                    IX-54    
                           A  7759    ;x                                    IX-53    
                           A  7760    ;fo                                   IX-49    
                           A  7761    ;biSize                               IX-46    
                           A  7762    ;color_table_size                     IX-42    
                           A  7763    ;index                                IX-38    
                           A  7764    ;b                                    IX-37    
                           A  7765    ;O_17                                 IX-36    
                           A  7766    ;row_padding                          IX-32    
                           A  7767    ;O_15                                 IX-28    
                           A  7768    ;width                                IX-24    
                           A  7769    ;height                               IX-20    
                           A  7770    ;src                                  IX-16    
                           A  7771    ;i                                    IX-13    
                           A  7772    ;bit_depth                             IX-9    
                           A  7773    ;y                                     IX-5    
                           A  7774    ;file                                  IX-1    
                           A  7775    ;slot                                 IX+12    
                           A  7776    ;filename                              IX+9    
                           A  7777    
                           A  7778    
                           A  7779    ; Stack Frame Size: 2277 (bytes)
                           A  7780    ;       Spill Code: -3 (instruction)
                           A  7781    
                           A  7782    
                           A  7783    .ENDFUNC "load_bmp_big",692,"_load_bmp_big"
                           A  7784    	SEGMENT STRSECT
0B4D9C                     A  7785    L__125:
0B4D9C 4572726F 723A2063   A  7786    	DB	"Error: could not open "
0B4DA4 6F756C64 206E6F74 
0B4DAC 206F7065 6E20 
0B4DB2 00                  A  7787    	DB	0
0B4DB3                     A  7788    L__126:
0B4DB3 2E                  A  7789    	DB	"."
0B4DB4 0D0A00              A  7790    	DB	13,10,0
0B4DB7                     A  7791    L__132:
0B4DB7 0000FF00 00         A  7792    	DB	0,0,-1,0,0
0B4DBC                     A  7793    L__134:
0B4DBC 00FF0000 00         A  7794    	DB	0,-1,0,0,0
0B4DC1                     A  7795    L__136:
0B4DC1 FF000000 00         A  7796    	DB	-1,0,0,0,0
0B4DC6                     A  7797    L__138:
0B4DC6 000000FF 00         A  7798    	DB	0,0,0,-1,0
0B4DCB                     A  7799    L__140:
0B4DCB 4572726F 723A2050   A  7800    	DB	"Error: Pixel format is NOT standard BG
0B4DD3 6978656C 20666F72 
0B4DDB 6D617420 6973204E 
0B4DE3 4F542073 74616E64 
0B4DEB 61726420 42475241 
0B4DF3 2E204578 6974696E 
0B4DFB 672E 
0B4DFD 0A00                A  7801    	DB	10,0
0B4DFF                     A  7802    L__146:
0B4DFF 4572726F 723A2075   A  7803    	DB	"Error: unsupported bit depth (not 8, 2
0B4E07 6E737570 706F7274 
0B4E0F 65642062 69742064 
0B4E17 65707468 20286E6F 
0B4E1F 7420382C 20323420 
0B4E27 6F722033 322D6269 
0B4E2F 74292E 
0B4E32 0A00                A  7804    	DB	10,0
                           A  7805    	SEGMENT CODE
                           A  7806    ;  693	
                           A  7807    ;  694	uint16_t strtou16(const char *str) {
0B271B                     A  7808    _strtou16:
                           A  7809    .DEFINE "_strtou16"
                           A  7810    
                           A  7811    .VALUE _strtou16
                           A  7812    
                           A  7813    .CLASS 2
                           A  7814    
                           A  7815    .TYPE 77
                           A  7816    
                           A  7817    .ENDEF
                           A  7818    
                           A  7819    .BEGFUNC "strtou16",694,"_strtou16"
                           A  7820    
                           A  7821    .LINE 694
                           A  7822    
                           A  7823    .DEFINE "str"
                           A  7824    
                           A  7825    .CLASS 65
                           A  7826    
                           A  7827    .VALUE 6
                           A  7828    
                           A  7829    .TYPE 194
                           A  7830    
                           A  7831    .ENDEF
                           A  7832    
                           A  7833    .DEFINE "result"
                           A  7834    
                           A  7835    .CLASS 65
                           A  7836    
                           A  7837    .VALUE -2
                           A  7838    
                           A  7839    .TYPE 13
                           A  7840    
                           A  7841    .ENDEF
                           A  7842    
                           A  7843    .DEFINE "digit"
                           A  7844    
                           A  7845    .CLASS 65
                           A  7846    
                           A  7847    .VALUE -4
                           A  7848    
                           A  7849    .TYPE 13
                           A  7850    
                           A  7851    .ENDEF
                           A  7852    
0B271B DDE5                A  7853    	PUSH	IX
0B271D DD210000 00         A  7854    	LD	IX,0
0B2722 DD39                A  7855    	ADD	IX,SP
0B2724 C5                  A  7856    	PUSH	BC
0B2725 3B                  A  7857    	DEC	SP
                           A  7858    ;  695	    uint16_t result = 0;
                           A  7859    .LINE 695
                           A  7860    
0B2726 DD36FE00            A  7861    	LD	(IX+%FFFFFFFE),%0
0B272A DD36FF00            A  7862    	LD	(IX+%FFFFFFFF),%0
                           A  7863    ;  696	    const uint16_t maxDiv10 = 6553;  //
                           A  7864    ;  697	    const uint16_t maxMod10 = 5;     //
                           A  7865    ;  698	
                           A  7866    ;  699	    while (*str == ' ' || *str == '\t' 
                           A  7867    .LINE 699
                           A  7868    
0B272E 18 07               A  7869    	JR	L_200
0B2730                     A  7870    L_201:
                           A  7871    ;  700	        str++;
                           A  7872    .LINE 700
                           A  7873    
0B2730 DD0706              A  7874    	LD	BC,(IX+%6)
0B2733 03                  A  7875    	INC	BC
0B2734 DD0F06              A  7876    	LD	(IX+%6),BC
                           A  7877    ;  701	    }
0B2737                     A  7878    L_200:
                           A  7879    .LINE 701
                           A  7880    
0B2737 DD2706              A  7881    	LD	HL,(IX+%6)
0B273A 7E                  A  7882    	LD	A,(HL)
0B273B 47                  A  7883    	LD	B,A
0B273C 17ED62              A  7884    	SEXT	HL
0B273F 68                  A  7885    	LD	L,B
0B2740 01200000            A  7886    	LD	BC,32
0B2744 B7                  A  7887    	OR	A,A
0B2745 ED42                A  7888    	SBC	HL,BC
0B2747 28 E7               A  7889    	JR	Z,L_201
0B2749 DD2706              A  7890    	LD	HL,(IX+%6)
0B274C 7E                  A  7891    	LD	A,(HL)
0B274D 47                  A  7892    	LD	B,A
0B274E 17ED62              A  7893    	SEXT	HL
0B2751 68                  A  7894    	LD	L,B
0B2752 01090000            A  7895    	LD	BC,9
0B2756 B7                  A  7896    	OR	A,A
0B2757 ED42                A  7897    	SBC	HL,BC
0B2759 28 D5               A  7898    	JR	Z,L_201
0B275B DD2706              A  7899    	LD	HL,(IX+%6)
0B275E 7E                  A  7900    	LD	A,(HL)
0B275F 47                  A  7901    	LD	B,A
0B2760 17ED62              A  7902    	SEXT	HL
0B2763 68                  A  7903    	LD	L,B
0B2764 010A0000            A  7904    	LD	BC,10
0B2768 B7                  A  7905    	OR	A,A
0B2769 ED42                A  7906    	SBC	HL,BC
0B276B 28 C3               A  7907    	JR	Z,L_201
                           A  7908    ;  702	
                           A  7909    ;  703	    while (*str >= '0' && *str <= '9') 
                           A  7910    .LINE 703
                           A  7911    
0B276D 18 5F               A  7912    	JR	L_208
0B276F                     A  7913    L_209:
                           A  7914    ;  704	        uint16_t digit = *str - '0';
                           A  7915    .LINE 704
                           A  7916    
0B276F DD2706              A  7917    	LD	HL,(IX+%6)
0B2772 7E                  A  7918    	LD	A,(HL)
0B2773 47                  A  7919    	LD	B,A
0B2774 17ED62              A  7920    	SEXT	HL
0B2777 68                  A  7921    	LD	L,B
0B2778 E5FDE1              A  7922    	LD	IY,HL
0B277B ED23D0              A  7923    	LEA	HL,IY+%FFFFFFD0
0B277E DD75FC              A  7924    	LD	(IX+%FFFFFFFC),L
0B2781 DD74FD              A  7925    	LD	(IX+%FFFFFFFD),H
                           A  7926    ;  705	        if (result > maxDiv10 || (resul
                           A  7927    .LINE 705
                           A  7928    
0B2784 DD07FE              A  7929    	LD	BC,(IX+%FFFFFFFE)
0B2787 49219919            A  7930    	LD.LIS	HL,6553
0B278B B7                  A  7931    	OR	A,A
0B278C 40ED42              A  7932    	SBC.SIS	HL,BC
0B278F 38 1A               A  7933    	JR	C,L_205
0B2791 49019919            A  7934    	LD.LIS	BC,6553
0B2795 DD27FE              A  7935    	LD	HL,(IX+%FFFFFFFE)
0B2798 B7                  A  7936    	OR	A,A
0B2799 40ED42              A  7937    	SBC.SIS	HL,BC
0B279C 20 13               A  7938    	JR	NZ,L_206
0B279E DD07FC              A  7939    	LD	BC,(IX+%FFFFFFFC)
0B27A1 49210500            A  7940    	LD.LIS	HL,5
0B27A5 B7                  A  7941    	OR	A,A
0B27A6 40ED42              A  7942    	SBC.SIS	HL,BC
0B27A9 30 06               A  7943    	JR	NC,L_206
0B27AB                     A  7944    L_205:
                           A  7945    ;  706	            return 65535;
                           A  7946    .LINE 706
                           A  7947    
0B27AB 4921FFFF            A  7948    	LD.LIS	HL,65535
0B27AF 18 5E               A  7949    	JR	L_212
                           A  7950    ;  707	        }
0B27B1                     A  7951    L_206:
                           A  7952    .LINE 707
                           A  7953    
                           A  7954    ;  708	        result = result * 10 + digit;
                           A  7955    .LINE 708
                           A  7956    
0B27B1 49210A00            A  7957    	LD.LIS	HL,10
0B27B5 DD07FE              A  7958    	LD	BC,(IX+%FFFFFFFE)
0B27B8 CD CA 4A 0B         A  7959    	CALL	__smulu
0B27BC DD07FC              A  7960    	LD	BC,(IX+%FFFFFFFC)
0B27BF 4009                A  7961    	ADD.SIS	HL,BC
0B27C1 DD75FE              A  7962    	LD	(IX+%FFFFFFFE),L
0B27C4 DD74FF              A  7963    	LD	(IX+%FFFFFFFF),H
                           A  7964    ;  709	        str++;
                           A  7965    .LINE 709
                           A  7966    
0B27C7 DD0706              A  7967    	LD	BC,(IX+%6)
0B27CA 03                  A  7968    	INC	BC
0B27CB DD0F06              A  7969    	LD	(IX+%6),BC
                           A  7970    ;  710	    }
0B27CE                     A  7971    L_208:
                           A  7972    .LINE 710
                           A  7973    
0B27CE DD2706              A  7974    	LD	HL,(IX+%6)
0B27D1 7E                  A  7975    	LD	A,(HL)
0B27D2 47                  A  7976    	LD	B,A
0B27D3 17ED62              A  7977    	SEXT	HL
0B27D6 68                  A  7978    	LD	L,B
0B27D7 01300000            A  7979    	LD	BC,48
0B27DB B7                  A  7980    	OR	A,A
0B27DC ED42                A  7981    	SBC	HL,BC
0B27DE FA E8 27 0B         A  7982    	JP	M,L__173
0B27E2 EA 0C 28 0B         A  7983    	JP	PE,L_211
0B27E6 18 04               A  7984    	JR	L__174
0B27E8                     A  7985    L__173:
0B27E8 E2 0C 28 0B         A  7986    	JP	PO,L_211
0B27EC                     A  7987    L__174:
0B27EC DD2706              A  7988    	LD	HL,(IX+%6)
0B27EF 7E                  A  7989    	LD	A,(HL)
0B27F0 47                  A  7990    	LD	B,A
0B27F1 17ED62              A  7991    	SEXT	HL
0B27F4 68                  A  7992    	LD	L,B
0B27F5 E5C1                A  7993    	LD	BC,HL
0B27F7 21390000            A  7994    	LD	HL,57
0B27FB B7                  A  7995    	OR	A,A
0B27FC ED42                A  7996    	SBC	HL,BC
0B27FE F2 08 28 0B         A  7997    	JP	P,L__175
0B2802 EA 6F 27 0B         A  7998    	JP	PE,L_209
0B2806 18 04               A  7999    	JR	L__176
0B2808                     A  8000    L__175:
0B2808 E2 6F 27 0B         A  8001    	JP	PO,L_209
0B280C                     A  8002    L__176:
0B280C                     A  8003    L_211:
                           A  8004    ;  711	
                           A  8005    ;  712	    return result;
                           A  8006    .LINE 712
                           A  8007    
0B280C DD27FE              A  8008    	LD	HL,(IX+%FFFFFFFE)
                           A  8009    ;  713	}
0B280F                     A  8010    L_212:
                           A  8011    .LINE 713
                           A  8012    
0B280F DDF9                A  8013    	LD	SP,IX
0B2811 DDE1                A  8014    	POP	IX
0B2813 C9                  A  8015    	RET	
                           A  8016    
                           A  8017    
                           A  8018    ;**************************** _strtou16 *******
                           A  8019    ;Name                         Addr/Register   S
                           A  8020    ;digit                                 IX-4    
                           A  8021    ;result                                IX-2    
                           A  8022    ;str                                   IX+6    
                           A  8023    
                           A  8024    
                           A  8025    ; Stack Frame Size: 13 (bytes)
                           A  8026    ;       Spill Code: -3 (instruction)
                           A  8027    
                           A  8028    
                           A  8029    .ENDFUNC "strtou16",713,"_strtou16"
                           A  8030    ;  714	
                           A  8031    ;  715	uint8_t strtou8(const char *str) {
0B2814                     A  8032    _strtou8:
                           A  8033    .DEFINE "_strtou8"
                           A  8034    
                           A  8035    .VALUE _strtou8
                           A  8036    
                           A  8037    .CLASS 2
                           A  8038    
                           A  8039    .TYPE 76
                           A  8040    
                           A  8041    .ENDEF
                           A  8042    
                           A  8043    .BEGFUNC "strtou8",715,"_strtou8"
                           A  8044    
                           A  8045    .LINE 715
                           A  8046    
                           A  8047    .DEFINE "str"
                           A  8048    
                           A  8049    .CLASS 65
                           A  8050    
                           A  8051    .VALUE 6
                           A  8052    
                           A  8053    .TYPE 194
                           A  8054    
                           A  8055    .ENDEF
                           A  8056    
                           A  8057    .DEFINE "result"
                           A  8058    
                           A  8059    .CLASS 65
                           A  8060    
                           A  8061    .VALUE -1
                           A  8062    
                           A  8063    .TYPE 12
                           A  8064    
                           A  8065    .ENDEF
                           A  8066    
                           A  8067    .DEFINE "digit"
                           A  8068    
                           A  8069    .CLASS 65
                           A  8070    
                           A  8071    .VALUE -2
                           A  8072    
                           A  8073    .TYPE 12
                           A  8074    
                           A  8075    .ENDEF
                           A  8076    
0B2814 DDE5                A  8077    	PUSH	IX
0B2816 DD210000 00         A  8078    	LD	IX,0
0B281B DD39                A  8079    	ADD	IX,SP
0B281D 3B                  A  8080    	DEC	SP
0B281E 3B                  A  8081    	DEC	SP
                           A  8082    ;  716	    uint8_t result = 0;
                           A  8083    .LINE 716
                           A  8084    
0B281F DD36FF00            A  8085    	LD	(IX+%FFFFFFFF),%0
                           A  8086    ;  717	    const uint8_t maxDiv10 = 255 / 10;
                           A  8087    ;  718	    const uint8_t maxMod10 = 255 % 10;
                           A  8088    ;  719	
                           A  8089    ;  720	    while (*str == ' ' || *str == '\t' 
                           A  8090    .LINE 720
                           A  8091    
0B2823 18 07               A  8092    	JR	L_216
0B2825                     A  8093    L_217:
                           A  8094    ;  721	        str++;
                           A  8095    .LINE 721
                           A  8096    
0B2825 DD0706              A  8097    	LD	BC,(IX+%6)
0B2828 03                  A  8098    	INC	BC
0B2829 DD0F06              A  8099    	LD	(IX+%6),BC
                           A  8100    ;  722	    }
0B282C                     A  8101    L_216:
                           A  8102    .LINE 722
                           A  8103    
0B282C DD2706              A  8104    	LD	HL,(IX+%6)
0B282F 7E                  A  8105    	LD	A,(HL)
0B2830 47                  A  8106    	LD	B,A
0B2831 17ED62              A  8107    	SEXT	HL
0B2834 68                  A  8108    	LD	L,B
0B2835 01200000            A  8109    	LD	BC,32
0B2839 B7                  A  8110    	OR	A,A
0B283A ED42                A  8111    	SBC	HL,BC
0B283C 28 E7               A  8112    	JR	Z,L_217
0B283E DD2706              A  8113    	LD	HL,(IX+%6)
0B2841 7E                  A  8114    	LD	A,(HL)
0B2842 47                  A  8115    	LD	B,A
0B2843 17ED62              A  8116    	SEXT	HL
0B2846 68                  A  8117    	LD	L,B
0B2847 01090000            A  8118    	LD	BC,9
0B284B B7                  A  8119    	OR	A,A
0B284C ED42                A  8120    	SBC	HL,BC
0B284E 28 D5               A  8121    	JR	Z,L_217
0B2850 DD2706              A  8122    	LD	HL,(IX+%6)
0B2853 7E                  A  8123    	LD	A,(HL)
0B2854 47                  A  8124    	LD	B,A
0B2855 17ED62              A  8125    	SEXT	HL
0B2858 68                  A  8126    	LD	L,B
0B2859 010A0000            A  8127    	LD	BC,10
0B285D B7                  A  8128    	OR	A,A
0B285E ED42                A  8129    	SBC	HL,BC
0B2860 28 C3               A  8130    	JR	Z,L_217
                           A  8131    ;  723	
                           A  8132    ;  724	    while (*str >= '0' && *str <= '9') 
                           A  8133    .LINE 724
                           A  8134    
0B2862 18 37               A  8135    	JR	L_224
0B2864                     A  8136    L_225:
                           A  8137    ;  725	        uint8_t digit = *str - '0';
                           A  8138    .LINE 725
                           A  8139    
0B2864 DD2706              A  8140    	LD	HL,(IX+%6)
0B2867 7E                  A  8141    	LD	A,(HL)
0B2868 D630                A  8142    	SUB	A,%30
0B286A DD77FE              A  8143    	LD	(IX+%FFFFFFFE),A
                           A  8144    ;  726	        if (result > maxDiv10 || (resul
                           A  8145    .LINE 726
                           A  8146    
0B286D 3E19                A  8147    	LD	A,%19
0B286F DDBEFF              A  8148    	CP	A,(IX+%FFFFFFFF)
0B2872 38 0E               A  8149    	JR	C,L_221
0B2874 DD7EFF              A  8150    	LD	A,(IX+%FFFFFFFF)
0B2877 FE19                A  8151    	CP	A,%19
0B2879 20 0B               A  8152    	JR	NZ,L_222
0B287B 3E05                A  8153    	LD	A,%5
0B287D DDBEFE              A  8154    	CP	A,(IX+%FFFFFFFE)
0B2880 30 04               A  8155    	JR	NC,L_222
0B2882                     A  8156    L_221:
                           A  8157    ;  727	            return 255;
                           A  8158    .LINE 727
                           A  8159    
0B2882 3EFF                A  8160    	LD	A,%FF
0B2884 18 56               A  8161    	JR	L_228
                           A  8162    ;  728	        }
0B2886                     A  8163    L_222:
                           A  8164    .LINE 728
                           A  8165    
                           A  8166    ;  729	        result = result * 10 + digit;
                           A  8167    .LINE 729
                           A  8168    
0B2886 060A                A  8169    	LD	B,%A
0B2888 DD4EFF              A  8170    	LD	C,(IX+%FFFFFFFF)
0B288B ED4C                A  8171    	MLT	BC
0B288D 79                  A  8172    	LD	A,C
0B288E DD86FE              A  8173    	ADD	A,(IX+%FFFFFFFE)
0B2891 DD77FF              A  8174    	LD	(IX+%FFFFFFFF),A
                           A  8175    ;  730	        str++;
                           A  8176    .LINE 730
                           A  8177    
0B2894 DD0706              A  8178    	LD	BC,(IX+%6)
0B2897 03                  A  8179    	INC	BC
0B2898 DD0F06              A  8180    	LD	(IX+%6),BC
                           A  8181    ;  731	    }
0B289B                     A  8182    L_224:
                           A  8183    .LINE 731
                           A  8184    
0B289B DD2706              A  8185    	LD	HL,(IX+%6)
0B289E 7E                  A  8186    	LD	A,(HL)
0B289F 47                  A  8187    	LD	B,A
0B28A0 17ED62              A  8188    	SEXT	HL
0B28A3 68                  A  8189    	LD	L,B
0B28A4 01300000            A  8190    	LD	BC,48
0B28A8 B7                  A  8191    	OR	A,A
0B28A9 ED42                A  8192    	SBC	HL,BC
0B28AB FA B5 28 0B         A  8193    	JP	M,L__186
0B28AF EA D9 28 0B         A  8194    	JP	PE,L_227
0B28B3 18 04               A  8195    	JR	L__187
0B28B5                     A  8196    L__186:
0B28B5 E2 D9 28 0B         A  8197    	JP	PO,L_227
0B28B9                     A  8198    L__187:
0B28B9 DD2706              A  8199    	LD	HL,(IX+%6)
0B28BC 7E                  A  8200    	LD	A,(HL)
0B28BD 47                  A  8201    	LD	B,A
0B28BE 17ED62              A  8202    	SEXT	HL
0B28C1 68                  A  8203    	LD	L,B
0B28C2 E5C1                A  8204    	LD	BC,HL
0B28C4 21390000            A  8205    	LD	HL,57
0B28C8 B7                  A  8206    	OR	A,A
0B28C9 ED42                A  8207    	SBC	HL,BC
0B28CB F2 D5 28 0B         A  8208    	JP	P,L__188
0B28CF EA 64 28 0B         A  8209    	JP	PE,L_225
0B28D3 18 04               A  8210    	JR	L__189
0B28D5                     A  8211    L__188:
0B28D5 E2 64 28 0B         A  8212    	JP	PO,L_225
0B28D9                     A  8213    L__189:
0B28D9                     A  8214    L_227:
                           A  8215    ;  732	
                           A  8216    ;  733	    return result;
                           A  8217    .LINE 733
                           A  8218    
0B28D9 DD7EFF              A  8219    	LD	A,(IX+%FFFFFFFF)
                           A  8220    ;  734	}
0B28DC                     A  8221    L_228:
                           A  8222    .LINE 734
                           A  8223    
0B28DC DDF9                A  8224    	LD	SP,IX
0B28DE DDE1                A  8225    	POP	IX
0B28E0 C9                  A  8226    	RET	
                           A  8227    
                           A  8228    
                           A  8229    ;**************************** _strtou8 ********
                           A  8230    ;Name                         Addr/Register   S
                           A  8231    ;digit                                 IX-2    
                           A  8232    ;result                                IX-1    
                           A  8233    ;str                                   IX+6    
                           A  8234    
                           A  8235    
                           A  8236    ; Stack Frame Size: 11 (bytes)
                           A  8237    ;       Spill Code: -3 (instruction)
                           A  8238    
                           A  8239    
                           A  8240    .ENDFUNC "strtou8",734,"_strtou8"
                           A  8241    ;  735	
                           A  8242    ;  736	uint24_t strtou24(const char *str) {
0B28E1                     A  8243    _strtou24:
                           A  8244    .DEFINE "_strtou24"
                           A  8245    
                           A  8246    .VALUE _strtou24
                           A  8247    
                           A  8248    .CLASS 2
                           A  8249    
                           A  8250    .TYPE 78
                           A  8251    
                           A  8252    .ENDEF
                           A  8253    
                           A  8254    .BEGFUNC "strtou24",736,"_strtou24"
                           A  8255    
                           A  8256    .LINE 736
                           A  8257    
                           A  8258    .DEFINE "str"
                           A  8259    
                           A  8260    .CLASS 65
                           A  8261    
                           A  8262    .VALUE 6
                           A  8263    
                           A  8264    .TYPE 194
                           A  8265    
                           A  8266    .ENDEF
                           A  8267    
                           A  8268    .DEFINE "result"
                           A  8269    
                           A  8270    .CLASS 65
                           A  8271    
                           A  8272    .VALUE -4
                           A  8273    
                           A  8274    .TYPE 15
                           A  8275    
                           A  8276    .ENDEF
                           A  8277    
                           A  8278    .DEFINE "digit"
                           A  8279    
                           A  8280    .CLASS 65
                           A  8281    
                           A  8282    .VALUE -8
                           A  8283    
                           A  8284    .TYPE 15
                           A  8285    
                           A  8286    .ENDEF
                           A  8287    
0B28E1 DDE5                A  8288    	PUSH	IX
0B28E3 DD210000 00         A  8289    	LD	IX,0
0B28E8 DD39                A  8290    	ADD	IX,SP
0B28EA C5                  A  8291    	PUSH	BC
0B28EB C5                  A  8292    	PUSH	BC
0B28EC 3B                  A  8293    	DEC	SP
0B28ED 3B                  A  8294    	DEC	SP
                           A  8295    ;  737	    uint32_t result = 0;
                           A  8296    .LINE 737
                           A  8297    
0B28EE 01000000            A  8298    	LD	BC,0
0B28F2 AF                  A  8299    	XOR	A,A
0B28F3 DD0FFC              A  8300    	LD	(IX+%FFFFFFFC),BC
0B28F6 DD77FF              A  8301    	LD	(IX+%FFFFFFFF),A
                           A  8302    ;  738	    const uint32_t maxDiv10 = 1677721;
                           A  8303    ;  739	    const uint32_t maxMod10 = 5;
                           A  8304    ;  740	
                           A  8305    ;  741	    while (*str == ' ' || *str == '\t' 
                           A  8306    .LINE 741
                           A  8307    
0B28F9 18 07               A  8308    	JR	L_232
0B28FB                     A  8309    L_233:
                           A  8310    ;  742	        str++;
                           A  8311    .LINE 742
                           A  8312    
0B28FB DD0706              A  8313    	LD	BC,(IX+%6)
0B28FE 03                  A  8314    	INC	BC
0B28FF DD0F06              A  8315    	LD	(IX+%6),BC
                           A  8316    ;  743	    }
0B2902                     A  8317    L_232:
                           A  8318    .LINE 743
                           A  8319    
0B2902 DD2706              A  8320    	LD	HL,(IX+%6)
0B2905 7E                  A  8321    	LD	A,(HL)
0B2906 47                  A  8322    	LD	B,A
0B2907 17ED62              A  8323    	SEXT	HL
0B290A 68                  A  8324    	LD	L,B
0B290B 01200000            A  8325    	LD	BC,32
0B290F B7                  A  8326    	OR	A,A
0B2910 ED42                A  8327    	SBC	HL,BC
0B2912 28 E7               A  8328    	JR	Z,L_233
0B2914 DD2706              A  8329    	LD	HL,(IX+%6)
0B2917 7E                  A  8330    	LD	A,(HL)
0B2918 47                  A  8331    	LD	B,A
0B2919 17ED62              A  8332    	SEXT	HL
0B291C 68                  A  8333    	LD	L,B
0B291D 01090000            A  8334    	LD	BC,9
0B2921 B7                  A  8335    	OR	A,A
0B2922 ED42                A  8336    	SBC	HL,BC
0B2924 28 D5               A  8337    	JR	Z,L_233
0B2926 DD2706              A  8338    	LD	HL,(IX+%6)
0B2929 7E                  A  8339    	LD	A,(HL)
0B292A 47                  A  8340    	LD	B,A
0B292B 17ED62              A  8341    	SEXT	HL
0B292E 68                  A  8342    	LD	L,B
0B292F 010A0000            A  8343    	LD	BC,10
0B2933 B7                  A  8344    	OR	A,A
0B2934 ED42                A  8345    	SBC	HL,BC
0B2936 28 C3               A  8346    	JR	Z,L_233
                           A  8347    ;  744		
                           A  8348    ;  745	    while (*str >= '0' && *str <= '9') 
                           A  8349    .LINE 745
                           A  8350    
0B2938 18 7A               A  8351    	JR	L_240
0B293A                     A  8352    L_241:
                           A  8353    ;  746	        uint32_t digit = *str - '0';
                           A  8354    .LINE 746
                           A  8355    
0B293A DD2706              A  8356    	LD	HL,(IX+%6)
0B293D 7E                  A  8357    	LD	A,(HL)
0B293E 47                  A  8358    	LD	B,A
0B293F 17ED62              A  8359    	SEXT	HL
0B2942 68                  A  8360    	LD	L,B
0B2943 5C                  A  8361    	LD	E,H
0B2944 01300000            A  8362    	LD	BC,48
0B2948 AF                  A  8363    	XOR	A,A
0B2949 CD C2 44 0B         A  8364    	CALL	__lsub
0B294D DD2FF8              A  8365    	LD	(IX+%FFFFFFF8),HL
0B2950 DD73FB              A  8366    	LD	(IX+%FFFFFFFB),E
                           A  8367    ;  747	        if (result > maxDiv10 || (resul
                           A  8368    .LINE 747
                           A  8369    
0B2953 21999919            A  8370    	LD	HL,1677721
0B2957 1E00                A  8371    	LD	E,%0
0B2959 DD07FC              A  8372    	LD	BC,(IX+%FFFFFFFC)
0B295C DD7EFF              A  8373    	LD	A,(IX+%FFFFFFFF)
0B295F CD DB 47 0B         A  8374    	CALL	__lcmpu
0B2963 38 23               A  8375    	JR	C,L_237
0B2965 DD27FC              A  8376    	LD	HL,(IX+%FFFFFFFC)
0B2968 DD5EFF              A  8377    	LD	E,(IX+%FFFFFFFF)
0B296B 01999919            A  8378    	LD	BC,1677721
0B296F AF                  A  8379    	XOR	A,A
0B2970 CD DB 47 0B         A  8380    	CALL	__lcmpu
0B2974 20 18               A  8381    	JR	NZ,L_238
0B2976 21050000            A  8382    	LD	HL,5
0B297A 1E00                A  8383    	LD	E,%0
0B297C DD07F8              A  8384    	LD	BC,(IX+%FFFFFFF8)
0B297F DD7EFB              A  8385    	LD	A,(IX+%FFFFFFFB)
0B2982 CD DB 47 0B         A  8386    	CALL	__lcmpu
0B2986 30 06               A  8387    	JR	NC,L_238
0B2988                     A  8388    L_237:
                           A  8389    ;  748	            return 16777215;
                           A  8390    .LINE 748
                           A  8391    
0B2988 21FFFFFF            A  8392    	LD	HL,16777215
0B298C 18 67               A  8393    	JR	L_244
                           A  8394    ;  749	        }
0B298E                     A  8395    L_238:
                           A  8396    .LINE 749
                           A  8397    
                           A  8398    ;  750	        result = result * 10 + digit;
                           A  8399    .LINE 750
                           A  8400    
0B298E DD27FC              A  8401    	LD	HL,(IX+%FFFFFFFC)
0B2991 DD5EFF              A  8402    	LD	E,(IX+%FFFFFFFF)
0B2994 010A0000            A  8403    	LD	BC,10
0B2998 AF                  A  8404    	XOR	A,A
0B2999 CD 51 4A 0B         A  8405    	CALL	__lmulu
0B299D DD07F8              A  8406    	LD	BC,(IX+%FFFFFFF8)
0B29A0 DD7EFB              A  8407    	LD	A,(IX+%FFFFFFFB)
0B29A3 CD BC 3C 0B         A  8408    	CALL	__ladd
0B29A7 DD2FFC              A  8409    	LD	(IX+%FFFFFFFC),HL
0B29AA DD73FF              A  8410    	LD	(IX+%FFFFFFFF),E
                           A  8411    ;  751	        str++;
                           A  8412    .LINE 751
                           A  8413    
0B29AD DD0706              A  8414    	LD	BC,(IX+%6)
0B29B0 03                  A  8415    	INC	BC
0B29B1 DD0F06              A  8416    	LD	(IX+%6),BC
                           A  8417    ;  752	    }
0B29B4                     A  8418    L_240:
                           A  8419    .LINE 752
                           A  8420    
0B29B4 DD2706              A  8421    	LD	HL,(IX+%6)
0B29B7 7E                  A  8422    	LD	A,(HL)
0B29B8 47                  A  8423    	LD	B,A
0B29B9 17ED62              A  8424    	SEXT	HL
0B29BC 68                  A  8425    	LD	L,B
0B29BD 01300000            A  8426    	LD	BC,48
0B29C1 B7                  A  8427    	OR	A,A
0B29C2 ED42                A  8428    	SBC	HL,BC
0B29C4 FA CE 29 0B         A  8429    	JP	M,L__199
0B29C8 EA F2 29 0B         A  8430    	JP	PE,L_243
0B29CC 18 04               A  8431    	JR	L__200
0B29CE                     A  8432    L__199:
0B29CE E2 F2 29 0B         A  8433    	JP	PO,L_243
0B29D2                     A  8434    L__200:
0B29D2 DD2706              A  8435    	LD	HL,(IX+%6)
0B29D5 7E                  A  8436    	LD	A,(HL)
0B29D6 47                  A  8437    	LD	B,A
0B29D7 17ED62              A  8438    	SEXT	HL
0B29DA 68                  A  8439    	LD	L,B
0B29DB E5C1                A  8440    	LD	BC,HL
0B29DD 21390000            A  8441    	LD	HL,57
0B29E1 B7                  A  8442    	OR	A,A
0B29E2 ED42                A  8443    	SBC	HL,BC
0B29E4 F2 EE 29 0B         A  8444    	JP	P,L__201
0B29E8 EA 3A 29 0B         A  8445    	JP	PE,L_241
0B29EC 18 04               A  8446    	JR	L__202
0B29EE                     A  8447    L__201:
0B29EE E2 3A 29 0B         A  8448    	JP	PO,L_241
0B29F2                     A  8449    L__202:
0B29F2                     A  8450    L_243:
                           A  8451    ;  753	
                           A  8452    ;  754	    return result;
                           A  8453    .LINE 754
                           A  8454    
0B29F2 DD27FC              A  8455    	LD	HL,(IX+%FFFFFFFC)
                           A  8456    ;  755	}
0B29F5                     A  8457    L_244:
                           A  8458    .LINE 755
                           A  8459    
0B29F5 DDF9                A  8460    	LD	SP,IX
0B29F7 DDE1                A  8461    	POP	IX
0B29F9 C9                  A  8462    	RET	
                           A  8463    
                           A  8464    
                           A  8465    ;**************************** _strtou24 *******
                           A  8466    ;Name                         Addr/Register   S
                           A  8467    ;digit                                 IX-8    
                           A  8468    ;result                                IX-4    
                           A  8469    ;str                                   IX+6    
                           A  8470    
                           A  8471    
                           A  8472    ; Stack Frame Size: 17 (bytes)
                           A  8473    ;       Spill Code: -3 (instruction)
                           A  8474    
                           A  8475    
                           A  8476    .ENDFUNC "strtou24",755,"_strtou24"
                           A  8477    ;  756	
                           A  8478    ;  757	int main(int argc, char * argv[]) {
0B29FA                     A  8479    _main:
                           A  8480    .DEFINE "_main"
                           A  8481    
                           A  8482    .VALUE _main
                           A  8483    
                           A  8484    .CLASS 2
                           A  8485    
                           A  8486    .TYPE 68
                           A  8487    
                           A  8488    .ENDEF
                           A  8489    
                           A  8490    .BEGFUNC "main",757,"_main"
                           A  8491    
                           A  8492    .LINE 757
                           A  8493    
                           A  8494    .DEFINE "argc"
                           A  8495    
                           A  8496    .CLASS 65
                           A  8497    
                           A  8498    .VALUE 6
                           A  8499    
                           A  8500    .TYPE 4
                           A  8501    
                           A  8502    .ENDEF
                           A  8503    
                           A  8504    .DEFINE "argv"
                           A  8505    
                           A  8506    .CLASS 65
                           A  8507    
                           A  8508    .VALUE 9
                           A  8509    
                           A  8510    .TYPE 290
                           A  8511    
                           A  8512    .ENDEF
                           A  8513    
                           A  8514    .DEFINE "bitmap_slot"
                           A  8515    
                           A  8516    .CLASS 65
                           A  8517    
                           A  8518    .VALUE -1
                           A  8519    
                           A  8520    .TYPE 12
                           A  8521    
                           A  8522    .ENDEF
                           A  8523    
                           A  8524    .DEFINE "x"
                           A  8525    
                           A  8526    .CLASS 65
                           A  8527    
                           A  8528    .VALUE -7
                           A  8529    
                           A  8530    .TYPE 14
                           A  8531    
                           A  8532    .ENDEF
                           A  8533    
                           A  8534    .DEFINE "y"
                           A  8535    
                           A  8536    .CLASS 65
                           A  8537    
                           A  8538    .VALUE -13
                           A  8539    
                           A  8540    .TYPE 14
                           A  8541    
                           A  8542    .ENDEF
                           A  8543    
                           A  8544    .DEFINE "bmp"
                           A  8545    
                           A  8546    .CLASS 65
                           A  8547    
                           A  8548    .VALUE -1086
                           A  8549    
                           A  8550    .TAG "NONAME6"
                           A  8551    
                           A  8552    .TYPE 8
                           A  8553    
                           A  8554    .ENDEF
                           A  8555    
0B29FA DDE5                A  8556    	PUSH	IX
0B29FC DD210000 00         A  8557    	LD	IX,0
0B2A01 DD39                A  8558    	ADD	IX,SP
0B2A03 21FDEAFF            A  8559    	LD	HL,-5379
0B2A07 39                  A  8560    	ADD	HL,SP
0B2A08 F9                  A  8561    	LD	SP,HL
                           A  8562    ;  758	
                           A  8563    ;  759	    uint24_t x, y;
                           A  8564    ;  760		uint8_t bitmap_slot = 0;
                           A  8565    .LINE 760
                           A  8566    
0B2A09 DD36FF00            A  8567    	LD	(IX+%FFFFFFFF),%0
                           A  8568    ;  761		bmp_info bmp;
                           A  8569    ;  762		
                           A  8570    ;  763		//Args = 0:binary name, 1:filname, 
                           A  8571    ;  764		
                           A  8572    ;  765		if ((argc < 2) || (argc == 4) || (a
                           A  8573    .LINE 765
                           A  8574    
0B2A0D 01020000            A  8575    	LD	BC,2
0B2A11 DD2706              A  8576    	LD	HL,(IX+%6)
0B2A14 B7                  A  8577    	OR	A,A
0B2A15 ED42                A  8578    	SBC	HL,BC
0B2A17 FA 21 2A 0B         A  8579    	JP	M,L__219
0B2A1B EA 49 2A 0B         A  8580    	JP	PE,L_247
0B2A1F 18 04               A  8581    	JR	L__220
0B2A21                     A  8582    L__219:
0B2A21 E2 49 2A 0B         A  8583    	JP	PO,L_247
0B2A25                     A  8584    L__220:
0B2A25 01040000            A  8585    	LD	BC,4
0B2A29 DD2706              A  8586    	LD	HL,(IX+%6)
0B2A2C B7                  A  8587    	OR	A,A
0B2A2D ED42                A  8588    	SBC	HL,BC
0B2A2F 28 18               A  8589    	JR	Z,L_247
0B2A31 DD0706              A  8590    	LD	BC,(IX+%6)
0B2A34 21050000            A  8591    	LD	HL,5
0B2A38 B7                  A  8592    	OR	A,A
0B2A39 ED42                A  8593    	SBC	HL,BC
0B2A3B F2 45 2A 0B         A  8594    	JP	P,L__221
0B2A3F EA 78 2A 0B         A  8595    	JP	PE,L_249
0B2A43 18 04               A  8596    	JR	L__222
0B2A45                     A  8597    L__221:
0B2A45 E2 78 2A 0B         A  8598    	JP	PO,L_249
0B2A49                     A  8599    L__222:
0B2A49                     A  8600    L_247:
                           A  8601    ;  766	        printf("Usage is %s <filename> 
                           A  8602    .LINE 766
                           A  8603    
0B2A49 01 A4 40 0B         A  8604    	LD	BC,___print_uputch
0B2A4D ED43 1B 4B 0B       A  8605    	LD	(___print_xputch),BC
0B2A52 01 34 4E 0B         A  8606    	LD	BC,L__207
0B2A56 C5                  A  8607    	PUSH	BC
0B2A57 CD EC 3E 0B         A  8608    	CALL	___print_sendstring
0B2A5B C1                  A  8609    	POP	BC
0B2A5C DD2709              A  8610    	LD	HL,(IX+%9)
0B2A5F ED07                A  8611    	LD	BC,(HL)
0B2A61 C5                  A  8612    	PUSH	BC
0B2A62 CD EC 3E 0B         A  8613    	CALL	___print_sendstring
0B2A66 C1                  A  8614    	POP	BC
0B2A67 01 3E 4E 0B         A  8615    	LD	BC,L__208
0B2A6B C5                  A  8616    	PUSH	BC
0B2A6C CD EC 3E 0B         A  8617    	CALL	___print_sendstring
0B2A70 C1                  A  8618    	POP	BC
                           A  8619    ;  767	        return 0;
                           A  8620    .LINE 767
                           A  8621    
0B2A71 B7                  A  8622    	OR	A,A
0B2A72 ED62                A  8623    	SBC	HL,HL
0B2A74 C3 F2 2C 0B         A  8624    	JR	L_267
                           A  8625    ;  768	    }
0B2A78                     A  8626    L_249:
                           A  8627    .LINE 768
                           A  8628    
                           A  8629    ;  769		
                           A  8630    ;  770		if (argc > 2) bitmap_slot = strtou8
                           A  8631    .LINE 770
                           A  8632    
0B2A78 DD0706              A  8633    	LD	BC,(IX+%6)
0B2A7B 21020000            A  8634    	LD	HL,2
0B2A7F B7                  A  8635    	OR	A,A
0B2A80 ED42                A  8636    	SBC	HL,BC
0B2A82 F2 8C 2A 0B         A  8637    	JP	P,L__223
0B2A86 EA A1 2A 0B         A  8638    	JP	PE,L_265
0B2A8A 18 04               A  8639    	JR	L__224
0B2A8C                     A  8640    L__223:
0B2A8C E2 A1 2A 0B         A  8641    	JP	PO,L_265
0B2A90                     A  8642    L__224:
0B2A90 DD3109              A  8643    	LD	IY,(IX+%9)
0B2A93 ED2306              A  8644    	LEA	HL,IY+%6
0B2A96 ED07                A  8645    	LD	BC,(HL)
0B2A98 C5                  A  8646    	PUSH	BC
0B2A99 CD 14 28 0B         A  8647    	CALL	_strtou8
0B2A9D C1                  A  8648    	POP	BC
0B2A9E DD77FF              A  8649    	LD	(IX+%FFFFFFFF),A
0B2AA1                     A  8650    L_265:
                           A  8651    ;  771		
                           A  8652    ;  772	    //vdp_mode(8);
                           A  8653    ;  773		
                           A  8654    ;  774		if (argc == 2) {
                           A  8655    .LINE 774
                           A  8656    
0B2AA1 01020000            A  8657    	LD	BC,2
0B2AA5 DD2706              A  8658    	LD	HL,(IX+%6)
0B2AA8 B7                  A  8659    	OR	A,A
0B2AA9 ED42                A  8660    	SBC	HL,BC
0B2AAB 20 37               A  8661    	JR	NZ,L_264
                           A  8662    ;  775	
                           A  8663    ;  776			bmp = load_bmp_clean(argv[1], 0
                           A  8664    .LINE 776
                           A  8665    
0B2AAD 01000000            A  8666    	LD	BC,0
0B2AB1 C5                  A  8667    	PUSH	BC
0B2AB2 DD3109              A  8668    	LD	IY,(IX+%9)
0B2AB5 ED2303              A  8669    	LEA	HL,IY+%3
0B2AB8 ED07                A  8670    	LD	BC,(HL)
0B2ABA C5                  A  8671    	PUSH	BC
0B2ABB DDE5E1              A  8672    	LD	HL,IX
0B2ABE 0191F7FF            A  8673    	LD	BC,-2159
0B2AC2 09                  A  8674    	ADD	HL,BC
0B2AC3 E5C1                A  8675    	LD	BC,HL
0B2AC5 C5                  A  8676    	PUSH	BC
0B2AC6 CD D9 11 0B         A  8677    	CALL	_load_bmp_clean
0B2ACA C1                  A  8678    	POP	BC
0B2ACB C1                  A  8679    	POP	BC
0B2ACC C1                  A  8680    	POP	BC
0B2ACD DDE5FDE1            A  8681    	LD	IY,IX
0B2AD1 01C2FBFF            A  8682    	LD	BC,-1086
0B2AD5 FD09                A  8683    	ADD	IY,BC
0B2AD7 FDE5D1              A  8684    	LD	DE,IY
0B2ADA 01310400            A  8685    	LD	BC,1073
0B2ADE EDB0                A  8686    	LDIR	
                           A  8687    ;  777			
                           A  8688    ;  778		} else if (argc == 3) {
                           A  8689    .LINE 778
                           A  8690    
0B2AE0 C3 EF 2C 0B         A  8691    	JR	L_266
0B2AE4                     A  8692    L_264:
0B2AE4 01030000            A  8693    	LD	BC,3
0B2AE8 DD2706              A  8694    	LD	HL,(IX+%6)
0B2AEB B7                  A  8695    	OR	A,A
0B2AEC ED42                A  8696    	SBC	HL,BC
0B2AEE 20 73               A  8697    	JR	NZ,L_262
                           A  8698    ;  779			
                           A  8699    ;  780			if (strcmp(argv[2], "/i") == 0)
                           A  8700    .LINE 780
                           A  8701    
0B2AF0 01 74 4E 0B         A  8702    	LD	BC,L__212
0B2AF4 C5                  A  8703    	PUSH	BC
0B2AF5 DD3109              A  8704    	LD	IY,(IX+%9)
0B2AF8 ED2306              A  8705    	LEA	HL,IY+%6
0B2AFB ED07                A  8706    	LD	BC,(HL)
0B2AFD C5                  A  8707    	PUSH	BC
0B2AFE CD 66 40 0B         A  8708    	CALL	_strcmp
0B2B02 C1                  A  8709    	POP	BC
0B2B03 C1                  A  8710    	POP	BC
0B2B04 01000000            A  8711    	LD	BC,0
0B2B08 B7                  A  8712    	OR	A,A
0B2B09 ED42                A  8713    	SBC	HL,BC
0B2B0B 20 1E               A  8714    	JR	NZ,L_251
0B2B0D DD3109              A  8715    	LD	IY,(IX+%9)
0B2B10 ED2303              A  8716    	LEA	HL,IY+%3
0B2B13 ED07                A  8717    	LD	BC,(HL)
0B2B15 C5                  A  8718    	PUSH	BC
0B2B16 DDE5E1              A  8719    	LD	HL,IX
0B2B19 0160F3FF            A  8720    	LD	BC,-3232
0B2B1D 09                  A  8721    	ADD	HL,BC
0B2B1E E5C1                A  8722    	LD	BC,HL
0B2B20 C5                  A  8723    	PUSH	BC
0B2B21 CD A8 09 0B         A  8724    	CALL	_get_info
0B2B25 C1                  A  8725    	POP	BC
0B2B26 C1                  A  8726    	POP	BC
                           A  8727    ;  781			else bmp = load_bmp_clean(argv[
                           A  8728    .LINE 781
                           A  8729    
0B2B27 C3 EF 2C 0B         A  8730    	JR	L_266
0B2B2B                     A  8731    L_251:
0B2B2B DD4EFF              A  8732    	LD	C,(IX+%FFFFFFFF)
0B2B2E 0600                A  8733    	LD	B,%0
0B2B30 C5                  A  8734    	PUSH	BC
0B2B31 DD3109              A  8735    	LD	IY,(IX+%9)
0B2B34 ED2303              A  8736    	LEA	HL,IY+%3
0B2B37 ED07                A  8737    	LD	BC,(HL)
0B2B39 C5                  A  8738    	PUSH	BC
0B2B3A DDE5E1              A  8739    	LD	HL,IX
0B2B3D 012FEFFF            A  8740    	LD	BC,-4305
0B2B41 09                  A  8741    	ADD	HL,BC
0B2B42 E5C1                A  8742    	LD	BC,HL
0B2B44 C5                  A  8743    	PUSH	BC
0B2B45 CD D9 11 0B         A  8744    	CALL	_load_bmp_clean
0B2B49 C1                  A  8745    	POP	BC
0B2B4A C1                  A  8746    	POP	BC
0B2B4B C1                  A  8747    	POP	BC
0B2B4C DDE5FDE1            A  8748    	LD	IY,IX
0B2B50 01C2FBFF            A  8749    	LD	BC,-1086
0B2B54 FD09                A  8750    	ADD	IY,BC
0B2B56 FDE5D1              A  8751    	LD	DE,IY
0B2B59 01310400            A  8752    	LD	BC,1073
0B2B5D EDB0                A  8753    	LDIR	
                           A  8754    ;  782			
                           A  8755    ;  783		} else if (argc == 5) {
                           A  8756    .LINE 783
                           A  8757    
0B2B5F C3 EF 2C 0B         A  8758    	JR	L_266
0B2B63                     A  8759    L_262:
0B2B63 01050000            A  8760    	LD	BC,5
0B2B67 DD2706              A  8761    	LD	HL,(IX+%6)
0B2B6A B7                  A  8762    	OR	A,A
0B2B6B ED42                A  8763    	SBC	HL,BC
0B2B6D C2 EF 2C 0B         A  8764    	JR	NZ,L_266
                           A  8765    ;  784		
                           A  8766    ;  785			bmp = load_bmp_clean(argv[1], b
                           A  8767    .LINE 785
                           A  8768    
0B2B71 DD4EFF              A  8769    	LD	C,(IX+%FFFFFFFF)
0B2B74 0600                A  8770    	LD	B,%0
0B2B76 C5                  A  8771    	PUSH	BC
0B2B77 DD3109              A  8772    	LD	IY,(IX+%9)
0B2B7A ED2303              A  8773    	LEA	HL,IY+%3
0B2B7D ED07                A  8774    	LD	BC,(HL)
0B2B7F C5                  A  8775    	PUSH	BC
0B2B80 DDE5E1              A  8776    	LD	HL,IX
0B2B83 01FEEAFF            A  8777    	LD	BC,-5378
0B2B87 09                  A  8778    	ADD	HL,BC
0B2B88 E5C1                A  8779    	LD	BC,HL
0B2B8A C5                  A  8780    	PUSH	BC
0B2B8B CD D9 11 0B         A  8781    	CALL	_load_bmp_clean
0B2B8F C1                  A  8782    	POP	BC
0B2B90 C1                  A  8783    	POP	BC
0B2B91 C1                  A  8784    	POP	BC
0B2B92 DDE5FDE1            A  8785    	LD	IY,IX
0B2B96 01C2FBFF            A  8786    	LD	BC,-1086
0B2B9A FD09                A  8787    	ADD	IY,BC
0B2B9C FDE5D1              A  8788    	LD	DE,IY
0B2B9F 01310400            A  8789    	LD	BC,1073
0B2BA3 EDB0                A  8790    	LDIR	
                           A  8791    ;  786			
                           A  8792    ;  787			if (argv[3][0] == 'C' || argv[3
                           A  8793    .LINE 787
                           A  8794    
0B2BA5 DD3109              A  8795    	LD	IY,(IX+%9)
0B2BA8 ED3309              A  8796    	LEA	IY,IY+%9
0B2BAB DD3EF6              A  8797    	LD	(IX+%FFFFFFF6),IY
0B2BAE DD27F6              A  8798    	LD	HL,(IX+%FFFFFFF6)
0B2BB1 ED27                A  8799    	LD	HL,(HL)
0B2BB3 7E                  A  8800    	LD	A,(HL)
0B2BB4 47                  A  8801    	LD	B,A
0B2BB5 17ED62              A  8802    	SEXT	HL
0B2BB8 68                  A  8803    	LD	L,B
0B2BB9 01430000            A  8804    	LD	BC,67
0B2BBD B7                  A  8805    	OR	A,A
0B2BBE ED42                A  8806    	SBC	HL,BC
0B2BC0 28 14               A  8807    	JR	Z,L_253
0B2BC2 DD27F6              A  8808    	LD	HL,(IX+%FFFFFFF6)
0B2BC5 ED27                A  8809    	LD	HL,(HL)
0B2BC7 7E                  A  8810    	LD	A,(HL)
0B2BC8 47                  A  8811    	LD	B,A
0B2BC9 17ED62              A  8812    	SEXT	HL
0B2BCC 68                  A  8813    	LD	L,B
0B2BCD 01630000            A  8814    	LD	BC,99
0B2BD1 B7                  A  8815    	OR	A,A
0B2BD2 ED42                A  8816    	SBC	HL,BC
0B2BD4 20 54               A  8817    	JR	NZ,L_254
0B2BD6                     A  8818    L_253:
0B2BD6 FDE5                A  8819    	PUSH	IY
0B2BD8 C5                  A  8820    	PUSH	BC
0B2BD9 FD21FDEA FF         A  8821    	LD	IY,-5379
0B2BDE DDE5C1              A  8822    	LD	BC,IX
0B2BE1 FD09                A  8823    	ADD	IY,BC
0B2BE3 FD7700              A  8824    	LD	(IY),A
0B2BE6 C1                  A  8825    	POP	BC
0B2BE7 FDE1                A  8826    	POP	IY
0B2BE9 CD 72 39 0B         A  8827    	CALL	_getsysvar_scrwidth
0B2BED FDE5                A  8828    	PUSH	IY
0B2BEF C5                  A  8829    	PUSH	BC
0B2BF0 FD21FDEA FF         A  8830    	LD	IY,-5379
0B2BF5 DDE5C1              A  8831    	LD	BC,IX
0B2BF8 FD09                A  8832    	ADD	IY,BC
0B2BFA FD7E00              A  8833    	LD	A,(IY)
0B2BFD C1                  A  8834    	POP	BC
0B2BFE FDE1                A  8835    	POP	IY
0B2C00 E5C1                A  8836    	LD	BC,HL
0B2C02 CD 9E 40 0B         A  8837    	CALL	__stoiu
0B2C06 E5D1                A  8838    	LD	DE,HL
0B2C08 21C2FBFF            A  8839    	LD	HL,-1086
0B2C0C DDE5C1              A  8840    	LD	BC,IX
0B2C0F 09                  A  8841    	ADD	HL,BC
0B2C10 ED07                A  8842    	LD	BC,(HL)
0B2C12 CD 9E 40 0B         A  8843    	CALL	__stoiu
0B2C16 E5C1                A  8844    	LD	BC,HL
0B2C18 D5E1                A  8845    	LD	HL,DE
0B2C1A B7                  A  8846    	OR	A,A
0B2C1B ED42                A  8847    	SBC	HL,BC
0B2C1D 01020000            A  8848    	LD	BC,2
0B2C21 CD 9B 47 0B         A  8849    	CALL	__idivs
0B2C25 DD2FF9              A  8850    	LD	(IX+%FFFFFFF9),HL
                           A  8851    ;  788			else x = strtou16(argv[4]);
                           A  8852    .LINE 788
                           A  8853    
0B2C28 18 17               A  8854    	JR	L_258
0B2C2A                     A  8855    L_254:
0B2C2A DD3109              A  8856    	LD	IY,(IX+%9)
0B2C2D ED230C              A  8857    	LEA	HL,IY+%C
0B2C30 ED07                A  8858    	LD	BC,(HL)
0B2C32 C5                  A  8859    	PUSH	BC
0B2C33 CD 1B 27 0B         A  8860    	CALL	_strtou16
0B2C37 C1                  A  8861    	POP	BC
0B2C38 E5C1                A  8862    	LD	BC,HL
0B2C3A CD 9E 40 0B         A  8863    	CALL	__stoiu
0B2C3E DD2FF9              A  8864    	LD	(IX+%FFFFFFF9),HL
0B2C41                     A  8865    L_258:
                           A  8866    ;  789			
                           A  8867    ;  790			if (argv[4][0] == 'C' || argv[4
                           A  8868    .LINE 790
                           A  8869    
0B2C41 DD3109              A  8870    	LD	IY,(IX+%9)
0B2C44 ED330C              A  8871    	LEA	IY,IY+%C
0B2C47 DD3EFC              A  8872    	LD	(IX+%FFFFFFFC),IY
0B2C4A DD27FC              A  8873    	LD	HL,(IX+%FFFFFFFC)
0B2C4D ED27                A  8874    	LD	HL,(HL)
0B2C4F 7E                  A  8875    	LD	A,(HL)
0B2C50 47                  A  8876    	LD	B,A
0B2C51 17ED62              A  8877    	SEXT	HL
0B2C54 68                  A  8878    	LD	L,B
0B2C55 01430000            A  8879    	LD	BC,67
0B2C59 B7                  A  8880    	OR	A,A
0B2C5A ED42                A  8881    	SBC	HL,BC
0B2C5C 28 14               A  8882    	JR	Z,L_256
0B2C5E DD27FC              A  8883    	LD	HL,(IX+%FFFFFFFC)
0B2C61 ED27                A  8884    	LD	HL,(HL)
0B2C63 7E                  A  8885    	LD	A,(HL)
0B2C64 47                  A  8886    	LD	B,A
0B2C65 17ED62              A  8887    	SEXT	HL
0B2C68 68                  A  8888    	LD	L,B
0B2C69 01630000            A  8889    	LD	BC,99
0B2C6D B7                  A  8890    	OR	A,A
0B2C6E ED42                A  8891    	SBC	HL,BC
0B2C70 20 54               A  8892    	JR	NZ,L_257
0B2C72                     A  8893    L_256:
0B2C72 FDE5                A  8894    	PUSH	IY
0B2C74 C5                  A  8895    	PUSH	BC
0B2C75 FD21FDEA FF         A  8896    	LD	IY,-5379
0B2C7A DDE5C1              A  8897    	LD	BC,IX
0B2C7D FD09                A  8898    	ADD	IY,BC
0B2C7F FD7700              A  8899    	LD	(IY),A
0B2C82 C1                  A  8900    	POP	BC
0B2C83 FDE1                A  8901    	POP	IY
0B2C85 CD 85 39 0B         A  8902    	CALL	_getsysvar_scrheight
0B2C89 FDE5                A  8903    	PUSH	IY
0B2C8B C5                  A  8904    	PUSH	BC
0B2C8C FD21FDEA FF         A  8905    	LD	IY,-5379
0B2C91 DDE5C1              A  8906    	LD	BC,IX
0B2C94 FD09                A  8907    	ADD	IY,BC
0B2C96 FD7E00              A  8908    	LD	A,(IY)
0B2C99 C1                  A  8909    	POP	BC
0B2C9A FDE1                A  8910    	POP	IY
0B2C9C E5C1                A  8911    	LD	BC,HL
0B2C9E CD 9E 40 0B         A  8912    	CALL	__stoiu
0B2CA2 E5D1                A  8913    	LD	DE,HL
0B2CA4 21C4FBFF            A  8914    	LD	HL,-1084
0B2CA8 DDE5C1              A  8915    	LD	BC,IX
0B2CAB 09                  A  8916    	ADD	HL,BC
0B2CAC ED07                A  8917    	LD	BC,(HL)
0B2CAE CD 9E 40 0B         A  8918    	CALL	__stoiu
0B2CB2 E5C1                A  8919    	LD	BC,HL
0B2CB4 D5E1                A  8920    	LD	HL,DE
0B2CB6 B7                  A  8921    	OR	A,A
0B2CB7 ED42                A  8922    	SBC	HL,BC
0B2CB9 01020000            A  8923    	LD	BC,2
0B2CBD CD 9B 47 0B         A  8924    	CALL	__idivs
0B2CC1 DD2FF3              A  8925    	LD	(IX+%FFFFFFF3),HL
                           A  8926    ;  791			else y = strtou16(argv[4]);
                           A  8927    .LINE 791
                           A  8928    
0B2CC4 18 14               A  8929    	JR	L_259
0B2CC6                     A  8930    L_257:
0B2CC6 DD27FC              A  8931    	LD	HL,(IX+%FFFFFFFC)
0B2CC9 ED07                A  8932    	LD	BC,(HL)
0B2CCB C5                  A  8933    	PUSH	BC
0B2CCC CD 1B 27 0B         A  8934    	CALL	_strtou16
0B2CD0 C1                  A  8935    	POP	BC
0B2CD1 E5C1                A  8936    	LD	BC,HL
0B2CD3 CD 9E 40 0B         A  8937    	CALL	__stoiu
0B2CD7 DD2FF3              A  8938    	LD	(IX+%FFFFFFF3),HL
0B2CDA                     A  8939    L_259:
                           A  8940    ;  792			
                           A  8941    ;  793			vdp_bitmapDraw(bitmap_slot,x,y)
                           A  8942    .LINE 793
                           A  8943    
0B2CDA DD07F3              A  8944    	LD	BC,(IX+%FFFFFFF3)
0B2CDD C5                  A  8945    	PUSH	BC
0B2CDE DD07F9              A  8946    	LD	BC,(IX+%FFFFFFF9)
0B2CE1 C5                  A  8947    	PUSH	BC
0B2CE2 DD4EFF              A  8948    	LD	C,(IX+%FFFFFFFF)
0B2CE5 0600                A  8949    	LD	B,%0
0B2CE7 C5                  A  8950    	PUSH	BC
0B2CE8 CD A2 32 0B         A  8951    	CALL	_vdp_bitmapDraw
0B2CEC C1                  A  8952    	POP	BC
0B2CED C1                  A  8953    	POP	BC
0B2CEE C1                  A  8954    	POP	BC
                           A  8955    ;  794			
                           A  8956    ;  795		}
0B2CEF                     A  8957    L_266:
                           A  8958    .LINE 795
                           A  8959    
                           A  8960    ;  796	
                           A  8961    ;  797	    return 0;
                           A  8962    .LINE 797
                           A  8963    
0B2CEF B7                  A  8964    	OR	A,A
0B2CF0 ED62                A  8965    	SBC	HL,HL
0B2CF2                     A  8966    L_267:
                           A  8967    .LINE 798
                           A  8968    
0B2CF2 DDF9                A  8969    	LD	SP,IX
0B2CF4 DDE1                A  8970    	POP	IX
0B2CF6 C9                  A  8971    	RET	
                           A  8972    
                           A  8973    
                           A  8974    ;**************************** _main ***********
                           A  8975    ;Name                         Addr/Register   S
                           A  8976    ;_vdp_bitmapDraw                     IMPORT  --
                           A  8977    ;_getsysvar_scrheight                IMPORT  --
                           A  8978    ;_getsysvar_scrwidth                 IMPORT  --
                           A  8979    ;_strcmp                             IMPORT  --
                           A  8980    ;___print_sendstring                 IMPORT  --
                           A  8981    ;___print_xputch                     IMPORT    
                           A  8982    ;___print_uputch                     IMPORT  --
                           A  8983    ;bmp                                IX-1086   1
                           A  8984    ;y                                    IX-13    
                           A  8985    ;G_3                                  IX-10    
                           A  8986    ;x                                     IX-7    
                           A  8987    ;G_4                                   IX-4    
                           A  8988    ;bitmap_slot                           IX-1    
                           A  8989    ;argv                                  IX+9    
                           A  8990    ;argc                                  IX+6    
                           A  8991    
                           A  8992    
                           A  8993    ; Stack Frame Size: 5391 (bytes)
                           A  8994    ;       Spill Code: -3 (instruction)
                           A  8995    
                           A  8996    
                           A  8997    .ENDFUNC "main",798,"_main"
                           A  8998    	SEGMENT STRSECT
0B4E34                     A  8999    L__207:
0B4E34 55736167 65206973   A  9000    	DB	"Usage is "
0B4E3C 20 
0B4E3D 00                  A  9001    	DB	0
0B4E3E                     A  9002    L__208:
0B4E3E 203C6669 6C656E61   A  9003    	DB	" <filename> [bitmap slot] [top-left x]
0B4E46 6D653E20 5B626974 
0B4E4E 6D617020 736C6F74 
0B4E56 5D205B74 6F702D6C 
0B4E5E 65667420 785D205B 
0B4E66 746F702D 6C656674 
0B4E6E 20795D 
0B4E71 0D0A00              A  9004    	DB	13,10,0
0B4E74                     A  9005    L__212:
0B4E74 2F69                A  9006    	DB	"/i"
0B4E76 00                  A  9007    	DB	0
                           A  9008    	XREF _write16bit:ROM
                           A  9009    	XREF _vdp_bitmapDraw:ROM
                           A  9010    	XREF _vdp_bitmapSelect:ROM
                           A  9011    	XREF _mos_getfil:ROM
                           A  9012    	XREF _mos_flseek:ROM
                           A  9013    	XREF _mos_fread:ROM
                           A  9014    	XREF _mos_fgetc:ROM
                           A  9015    	XREF _mos_fclose:ROM
                           A  9016    	XREF _mos_fopen:ROM
                           A  9017    	XREF _getsysvar_scrheight:ROM
                           A  9018    	XREF _getsysvar_scrwidth:ROM
                           A  9019    	XREF _mos_puts:ROM
                           A  9020    	XREF _waitvblank:ROM
                           A  9021    	XREF _putch:ROM
                           A  9022    	XREF _strcmp:ROM
                           A  9023    	XREF _memset:ROM
                           A  9024    	XREF _memcmp:ROM
                           A  9025    	XREF _memcpy:ROM
                           A  9026    	XREF _malloc:ROM
                           A  9027    	XREF _free:ROM
                           A  9028    	XREF __u_uitoa:ROM
                           A  9029    	XREF __u_itoa:ROM
                           A  9030    	XREF ___print_sendstring:ROM
                           A  9031    	XREF ___print_xputch:ROM
                           A  9032    	XREF ___print_uputch:ROM
                           A  9033    	XREF ___print_fmt:ROM
                           A  9034    	XREF __lcmps:ROM
                           A  9035    	XREF __lcmpu:ROM
                           A  9036    	XREF __ladd:ROM
                           A  9037    	XREF __lsub:ROM
                           A  9038    	XREF __idivs:ROM
                           A  9039    	XREF __ldivs:ROM
                           A  9040    	XREF __imuls:ROM
                           A  9041    	XREF __lmuls:ROM
                           A  9042    	XREF __lmulu:ROM
                           A  9043    	XREF __smulu:ROM
                           A  9044    	XREF __bshl:ROM
                           A  9045    	XREF __irems:ROM
                           A  9046    	XREF __lrems:ROM
                           A  9047    	XREF __ishrs:ROM
                           A  9048    	XREF __stoi:ROM
                           A  9049    	XREF __stoiu:ROM
                           A  9050    	XREF __itol:ROM
                           A  9051    	XREF __ildix:ROM
                           A  9052    	XREF __istix:ROM
                           A  9053    	XREF __ladd_b:ROM
                           A  9054    	XREF __ishrs_b:ROM
                           A  9055    	XDEF _main
                           A  9056    	XDEF _strtou24
                           A  9057    	XDEF _strtou8
                           A  9058    	XDEF _strtou16
                           A  9059    	XDEF _load_bmp_big
                           A  9060    	XDEF _load_bmp_clean
                           A  9061    	XDEF _get_info
                           A  9062    	XDEF _print_bin
                           A  9063    	XDEF _getByte
                           A  9064    	XDEF _generic8888_to_rgba8888
                           A  9065    	XDEF _generic8888_to_rgba2222
                           A  9066    	XDEF _reorder_and_insert
                           A  9067    	XDEF _reorder
                           A  9068    	XDEF _twiddle_buffer
                           A  9069    	XDEF _flip
                           A  9070    	XDEF _max
                           A  9071    	XDEF _min
                           A  9072    	XDEF _delay_secs
                           A  9073    	END


Errors: 0
Warnings: 0
Lines Assembled: 9074
