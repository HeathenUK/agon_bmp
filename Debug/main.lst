Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED08-Oct-23     19:00:04     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optspeed -noreduceopt -nopadbranc
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",8
                           A   144    .DEFINE "baudRate"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 4
                           A   148    .ENDEF
                           A   149    .DEFINE "dataBits"
                           A   150    .VALUE 3
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "stopBits"
                           A   155    .VALUE 4
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "parity"
                           A   160    .VALUE 5
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "flowcontrol"
                           A   165    .VALUE 6
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "eir"
                           A   170    .VALUE 7
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .ENDREC "NONAME3"
                           A   175    .BEGREC "NONAME4",15
                           A   176    .DEFINE "fs"
                           A   177    .VALUE 0
                           A   178    .CLASS 8
                           A   179    .TYPE 46
                           A   180    .ENDEF
                           A   181    .DEFINE "id"
                           A   182    .VALUE 3
                           A   183    .CLASS 8
                           A   184    .TYPE 13
                           A   185    .ENDEF
                           A   186    .DEFINE "attr"
                           A   187    .VALUE 5
                           A   188    .CLASS 8
                           A   189    .TYPE 12
                           A   190    .ENDEF
                           A   191    .DEFINE "stat"
                           A   192    .VALUE 6
                           A   193    .CLASS 8
                           A   194    .TYPE 12
                           A   195    .ENDEF
                           A   196    .DEFINE "sclust"
                           A   197    .VALUE 7
                           A   198    .CLASS 8
                           A   199    .TYPE 15
                           A   200    .ENDEF
                           A   201    .DEFINE "objsize"
                           A   202    .VALUE 11
                           A   203    .CLASS 8
                           A   204    .TYPE 15
                           A   205    .ENDEF
                           A   206    .ENDREC "NONAME4"
                           A   207    .BEGREC "NONAME5",36
                           A   208    .DEFINE "obj"
                           A   209    .VALUE 0
                           A   210    .CLASS 8
                           A   211    .TAG "NONAME4"
                           A   212    .TYPE 8
                           A   213    .ENDEF
                           A   214    .DEFINE "flag"
                           A   215    .VALUE 15
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "err"
                           A   220    .VALUE 16
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "fptr"
                           A   225    .VALUE 17
                           A   226    .CLASS 8
                           A   227    .TYPE 15
                           A   228    .ENDEF
                           A   229    .DEFINE "clust"
                           A   230    .VALUE 21
                           A   231    .CLASS 8
                           A   232    .TYPE 15
                           A   233    .ENDEF
                           A   234    .DEFINE "sect"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 15
                           A   238    .ENDEF
                           A   239    .DEFINE "dir_sect"
                           A   240    .VALUE 29
                           A   241    .CLASS 8
                           A   242    .TYPE 15
                           A   243    .ENDEF
                           A   244    .DEFINE "dir_ptr"
                           A   245    .VALUE 33
                           A   246    .CLASS 8
                           A   247    .TYPE 46
                           A   248    .ENDEF
                           A   249    .ENDREC "NONAME5"
                           A   250    ;    1	//Copyright HeathenUK 2023, others' cop
                           A   251    ;    2	
                           A   252    ;    3	#include <stdio.h>
                           A   253    ;    4	#include <stdlib.h>
                           A   254    ;    5	#include <ctype.h>
                           A   255    ;    6	#include <stdint.h>
                           A   256    ;    7	#include <string.h>
                           A   257    ;    8	#include <eZ80.h>
                           A   258    ;    9	#include <defines.h>
                           A   259    ;   10	#include "mos-interface.h"
                           A   260    ;   11	#include "vdp.h"
                           A   261    ;   12	
                           A   262    ;   13	typedef struct {
                           A   263    ;   14		
                           A   264    ;   15		uint16_t bmp_width;
                           A   265    ;   16		uint16_t bmp_height;
                           A   266    ;   17		uint8_t  bmp_bitdepth;
                           A   267    ;   18		
                           A   268    ;   19	} bmp_info;
                           A   269    .BEGREC "NONAME6",5
                           A   270    .DEFINE "bmp_width"
                           A   271    .VALUE 0
                           A   272    .CLASS 8
                           A   273    .TYPE 13
                           A   274    .ENDEF
                           A   275    .DEFINE "bmp_height"
                           A   276    .VALUE 2
                           A   277    .CLASS 8
                           A   278    .TYPE 13
                           A   279    .ENDEF
                           A   280    .DEFINE "bmp_bitdepth"
                           A   281    .VALUE 4
                           A   282    .CLASS 8
                           A   283    .TYPE 12
                           A   284    .ENDEF
                           A   285    .ENDREC "NONAME6"
                           A   286    ;   20	
                           A   287    ;   21	extern void write16bit(uint16_t w);
                           A   288    ;   22	extern void write24bit(uint24_t w);
                           A   289    ;   23	extern void write32bit(uint32_t w);
                           A   290    ;   24	
                           A   291    ;   25	void delay_secs(UINT16 ticks_end) { //1
0B00E5                     A   292    _delay_secs:
                           A   293    .DEFINE "_delay_secs"
                           A   294    
                           A   295    .VALUE _delay_secs
                           A   296    
                           A   297    .CLASS 2
                           A   298    
                           A   299    .TYPE 65
                           A   300    
                           A   301    .ENDEF
                           A   302    
                           A   303    .BEGFUNC "delay_secs",25,"_delay_secs"
                           A   304    
                           A   305    .LINE 25
                           A   306    
                           A   307    .DEFINE "ticks_end"
                           A   308    
                           A   309    .CLASS 65
                           A   310    
                           A   311    .VALUE 6
                           A   312    
                           A   313    .TYPE 13
                           A   314    
                           A   315    .ENDEF
                           A   316    
                           A   317    .DEFINE "ticks"
                           A   318    
                           A   319    .CLASS 65
                           A   320    
                           A   321    .VALUE -4
                           A   322    
                           A   323    .TYPE 15
                           A   324    
                           A   325    .ENDEF
                           A   326    
0B00E5 DDE5                A   327    	PUSH	IX
0B00E7 DD210000 00         A   328    	LD	IX,0
0B00EC DD39                A   329    	ADD	IX,SP
0B00EE C5                  A   330    	PUSH	BC
0B00EF 3B                  A   331    	DEC	SP
                           A   332    ;   26		
                           A   333    ;   27		UINT32 ticks = 0;
                           A   334    .LINE 27
                           A   335    
0B00F0 01000000            A   336    	LD	BC,0
0B00F4 AF                  A   337    	XOR	A,A
0B00F5 DD0FFC              A   338    	LD	(IX+%FFFFFFFC),BC
0B00F8 DD77FF              A   339    	LD	(IX+%FFFFFFFF),A
                           A   340    ;   28		ticks_end *= 60;
                           A   341    .LINE 28
                           A   342    
0B00FB 49213C00            A   343    	LD.LIS	HL,60
0B00FF DD0706              A   344    	LD	BC,(IX+%6)
0B0102 CD 5A 2C 0B         A   345    	CALL	__smulu
0B0106 DD7506              A   346    	LD	(IX+%6),L
0B0109 DD7407              A   347    	LD	(IX+%7),H
                           A   348    ;   29		while(true) {
0B010C                     A   349    L_3:
                           A   350    .LINE 29
                           A   351    
                           A   352    ;   30			
                           A   353    ;   31			waitvblank();
                           A   354    .LINE 31
                           A   355    
0B010C CD D9 21 0B         A   356    	CALL	_waitvblank
                           A   357    ;   32			ticks++;
                           A   358    .LINE 32
                           A   359    
0B0110 DD27FC              A   360    	LD	HL,(IX+%FFFFFFFC)
0B0113 DD5EFF              A   361    	LD	E,(IX+%FFFFFFFF)
0B0116 3E01                A   362    	LD	A,%1
0B0118 CD 93 25 0B         A   363    	CALL	__ladd_b
0B011C DD2FFC              A   364    	LD	(IX+%FFFFFFFC),HL
0B011F DD73FF              A   365    	LD	(IX+%FFFFFFFF),E
                           A   366    ;   33			if(ticks >= ticks_end) break;
                           A   367    .LINE 33
                           A   368    
0B0122 DD0706              A   369    	LD	BC,(IX+%6)
0B0125 CD 42 29 0B         A   370    	CALL	__stoiu
0B0129 E5C1                A   371    	LD	BC,HL
0B012B AF                  A   372    	XOR	A,A
0B012C DD27FC              A   373    	LD	HL,(IX+%FFFFFFFC)
0B012F DD5EFF              A   374    	LD	E,(IX+%FFFFFFFF)
0B0132 CD 67 2B 0B         A   375    	CALL	__lcmpu
0B0136 38 D4               A   376    	JR	C,L_3
                           A   377    ;   34			
                           A   378    ;   35		}
                           A   379    ;   36		
                           A   380    ;   37	}
                           A   381    .LINE 37
                           A   382    
0B0138 DDF9                A   383    	LD	SP,IX
0B013A DDE1                A   384    	POP	IX
0B013C C9                  A   385    	RET	
                           A   386    
                           A   387    
                           A   388    ;**************************** _delay_secs *****
                           A   389    ;Name                         Addr/Register   S
                           A   390    ;_waitvblank                         IMPORT  --
                           A   391    ;ticks                                 IX-4    
                           A   392    ;ticks_end                             IX+6    
                           A   393    
                           A   394    
                           A   395    ; Stack Frame Size: 13 (bytes)
                           A   396    ;       Spill Code: 0 (instruction)
                           A   397    
                           A   398    
                           A   399    .ENDFUNC "delay_secs",37,"_delay_secs"
                           A   400    ;   38	
                           A   401    ;   39	int min(int a, int b) {
0B013D                     A   402    _min:
                           A   403    .DEFINE "_min"
                           A   404    
                           A   405    .VALUE _min
                           A   406    
                           A   407    .CLASS 2
                           A   408    
                           A   409    .TYPE 68
                           A   410    
                           A   411    .ENDEF
                           A   412    
                           A   413    .BEGFUNC "min",39,"_min"
                           A   414    
                           A   415    .LINE 39
                           A   416    
                           A   417    .DEFINE "a"
                           A   418    
                           A   419    .CLASS 65
                           A   420    
                           A   421    .VALUE 6
                           A   422    
                           A   423    .TYPE 4
                           A   424    
                           A   425    .ENDEF
                           A   426    
                           A   427    .DEFINE "b"
                           A   428    
                           A   429    .CLASS 65
                           A   430    
                           A   431    .VALUE 9
                           A   432    
                           A   433    .TYPE 4
                           A   434    
                           A   435    .ENDEF
                           A   436    
0B013D DDE5                A   437    	PUSH	IX
0B013F DD210000 00         A   438    	LD	IX,0
0B0144 DD39                A   439    	ADD	IX,SP
                           A   440    ;   40	    if (a > b)
                           A   441    .LINE 40
                           A   442    
0B0146 DD0706              A   443    	LD	BC,(IX+%6)
0B0149 DD2709              A   444    	LD	HL,(IX+%9)
0B014C B7                  A   445    	OR	A,A
0B014D ED42                A   446    	SBC	HL,BC
0B014F F2 59 01 0B         A   447    	JP	P,L__3
0B0153 EA 62 01 0B         A   448    	JP	PE,L_6
0B0157 18 04               A   449    	JR	L__4
0B0159                     A   450    L__3:
0B0159 E2 62 01 0B         A   451    	JP	PO,L_6
0B015D                     A   452    L__4:
                           A   453    ;   41	        return b;
                           A   454    .LINE 41
                           A   455    
0B015D DD2709              A   456    	LD	HL,(IX+%9)
0B0160 18 03               A   457    	JR	L_7
0B0162                     A   458    L_6:
                           A   459    ;   42	    return a;
                           A   460    .LINE 42
                           A   461    
0B0162 DD2706              A   462    	LD	HL,(IX+%6)
                           A   463    ;   43	}
0B0165                     A   464    L_7:
                           A   465    .LINE 43
                           A   466    
0B0165 DDF9                A   467    	LD	SP,IX
0B0167 DDE1                A   468    	POP	IX
0B0169 C9                  A   469    	RET	
                           A   470    
                           A   471    
                           A   472    ;**************************** _min ************
                           A   473    ;Name                         Addr/Register   S
                           A   474    ;b                                     IX+9    
                           A   475    ;a                                     IX+6    
                           A   476    
                           A   477    
                           A   478    ; Stack Frame Size: 12 (bytes)
                           A   479    ;       Spill Code: 0 (instruction)
                           A   480    
                           A   481    
                           A   482    .ENDFUNC "min",43,"_min"
                           A   483    ;   44	
                           A   484    ;   45	int max(int a, int b) {
0B016A                     A   485    _max:
                           A   486    .DEFINE "_max"
                           A   487    
                           A   488    .VALUE _max
                           A   489    
                           A   490    .CLASS 2
                           A   491    
                           A   492    .TYPE 68
                           A   493    
                           A   494    .ENDEF
                           A   495    
                           A   496    .BEGFUNC "max",45,"_max"
                           A   497    
                           A   498    .LINE 45
                           A   499    
                           A   500    .DEFINE "a"
                           A   501    
                           A   502    .CLASS 65
                           A   503    
                           A   504    .VALUE 6
                           A   505    
                           A   506    .TYPE 4
                           A   507    
                           A   508    .ENDEF
                           A   509    
                           A   510    .DEFINE "b"
                           A   511    
                           A   512    .CLASS 65
                           A   513    
                           A   514    .VALUE 9
                           A   515    
                           A   516    .TYPE 4
                           A   517    
                           A   518    .ENDEF
                           A   519    
0B016A DDE5                A   520    	PUSH	IX
0B016C DD210000 00         A   521    	LD	IX,0
0B0171 DD39                A   522    	ADD	IX,SP
                           A   523    ;   46	    if (a > b)
                           A   524    .LINE 46
                           A   525    
0B0173 DD0706              A   526    	LD	BC,(IX+%6)
0B0176 DD2709              A   527    	LD	HL,(IX+%9)
0B0179 B7                  A   528    	OR	A,A
0B017A ED42                A   529    	SBC	HL,BC
0B017C F2 86 01 0B         A   530    	JP	P,L__7
0B0180 EA 8F 01 0B         A   531    	JP	PE,L_9
0B0184 18 04               A   532    	JR	L__8
0B0186                     A   533    L__7:
0B0186 E2 8F 01 0B         A   534    	JP	PO,L_9
0B018A                     A   535    L__8:
                           A   536    ;   47	        return a;
                           A   537    .LINE 47
                           A   538    
0B018A DD2706              A   539    	LD	HL,(IX+%6)
0B018D 18 03               A   540    	JR	L_10
0B018F                     A   541    L_9:
                           A   542    ;   48	    return b;
                           A   543    .LINE 48
                           A   544    
0B018F DD2709              A   545    	LD	HL,(IX+%9)
                           A   546    ;   49	}
0B0192                     A   547    L_10:
                           A   548    .LINE 49
                           A   549    
0B0192 DDF9                A   550    	LD	SP,IX
0B0194 DDE1                A   551    	POP	IX
0B0196 C9                  A   552    	RET	
                           A   553    
                           A   554    
                           A   555    ;**************************** _max ************
                           A   556    ;Name                         Addr/Register   S
                           A   557    ;b                                     IX+9    
                           A   558    ;a                                     IX+6    
                           A   559    
                           A   560    
                           A   561    ; Stack Frame Size: 12 (bytes)
                           A   562    ;       Spill Code: 0 (instruction)
                           A   563    
                           A   564    
                           A   565    .ENDFUNC "max",49,"_max"
                           A   566    ;   50	
                           A   567    ;   51	void flip(uint32_t * framebuffer, int w
0B0197                     A   568    _flip:
                           A   569    .DEFINE "_flip"
                           A   570    
                           A   571    .VALUE _flip
                           A   572    
                           A   573    .CLASS 2
                           A   574    
                           A   575    .TYPE 65
                           A   576    
                           A   577    .ENDEF
                           A   578    
                           A   579    .BEGFUNC "flip",51,"_flip"
                           A   580    
                           A   581    .LINE 51
                           A   582    
                           A   583    .DEFINE "framebuffer"
                           A   584    
                           A   585    .CLASS 65
                           A   586    
                           A   587    .VALUE 6
                           A   588    
                           A   589    .TYPE 47
                           A   590    
                           A   591    .ENDEF
                           A   592    
                           A   593    .DEFINE "width"
                           A   594    
                           A   595    .CLASS 65
                           A   596    
                           A   597    .VALUE 9
                           A   598    
                           A   599    .TYPE 4
                           A   600    
                           A   601    .ENDEF
                           A   602    
                           A   603    .DEFINE "height"
                           A   604    
                           A   605    .CLASS 65
                           A   606    
                           A   607    .VALUE 12
                           A   608    
                           A   609    .TYPE 4
                           A   610    
                           A   611    .ENDEF
                           A   612    
                           A   613    .DEFINE "y"
                           A   614    
                           A   615    .CLASS 65
                           A   616    
                           A   617    .VALUE -2
                           A   618    
                           A   619    .TYPE 13
                           A   620    
                           A   621    .ENDEF
                           A   622    
                           A   623    .DEFINE "row_buffer"
                           A   624    
                           A   625    .CLASS 65
                           A   626    
                           A   627    .VALUE -5
                           A   628    
                           A   629    .TYPE 47
                           A   630    
                           A   631    .ENDEF
                           A   632    
                           A   633    .DEFINE "row_size"
                           A   634    
                           A   635    .CLASS 65
                           A   636    
                           A   637    .VALUE -8
                           A   638    
                           A   639    .TYPE 4
                           A   640    
                           A   641    .ENDEF
                           A   642    
                           A   643    .DEFINE "top_row"
                           A   644    
                           A   645    .CLASS 65
                           A   646    
                           A   647    .VALUE -11
                           A   648    
                           A   649    .TYPE 47
                           A   650    
                           A   651    .ENDEF
                           A   652    
                           A   653    .DEFINE "bottom_row"
                           A   654    
                           A   655    .CLASS 65
                           A   656    
                           A   657    .VALUE -14
                           A   658    
                           A   659    .TYPE 47
                           A   660    
                           A   661    .ENDEF
                           A   662    
0B0197 DDE5                A   663    	PUSH	IX
0B0199 DD210000 00         A   664    	LD	IX,0
0B019E DD39                A   665    	ADD	IX,SP
0B01A0 ED22F1              A   666    	LEA	HL,IX+%FFFFFFF1
0B01A3 F9                  A   667    	LD	SP,HL
                           A   668    ;   52	    uint16_t y;
                           A   669    ;   53	    uint32_t * row_buffer = (uint32_t *
                           A   670    .LINE 53
                           A   671    
0B01A4 DD2709              A   672    	LD	HL,(IX+%9)
0B01A7 29                  A   673    	ADD	HL,HL
0B01A8 29                  A   674    	ADD	HL,HL
0B01A9 E5                  A   675    	PUSH	HL
0B01AA DD77F1              A   676    	LD	(IX+%FFFFFFF1),A
0B01AD CD AD 26 0B         A   677    	CALL	_malloc
0B01B1 DD7EF1              A   678    	LD	A,(IX+%FFFFFFF1)
0B01B4 C1                  A   679    	POP	BC
0B01B5 DD2FFB              A   680    	LD	(IX+%FFFFFFFB),HL
                           A   681    ;   54	    int row_size = width * sizeof(uint3
                           A   682    .LINE 54
                           A   683    
0B01B8 DD2709              A   684    	LD	HL,(IX+%9)
0B01BB 29                  A   685    	ADD	HL,HL
0B01BC 29                  A   686    	ADD	HL,HL
0B01BD DD2FF8              A   687    	LD	(IX+%FFFFFFF8),HL
                           A   688    ;   55	
                           A   689    ;   56	    for (y = 0; y < height / 2; y++) {
                           A   690    .LINE 56
                           A   691    
0B01C0 DD36FE00            A   692    	LD	(IX+%FFFFFFFE),%0
0B01C4 DD36FF00            A   693    	LD	(IX+%FFFFFFFF),%0
0B01C8 C3 58 02 0B         A   694    	JR	L_14
0B01CC                     A   695    L_12:
                           A   696    ;   57	        uint32_t * top_row = framebuffe
                           A   697    .LINE 57
                           A   698    
0B01CC DD07FE              A   699    	LD	BC,(IX+%FFFFFFFE)
0B01CF CD 42 29 0B         A   700    	CALL	__stoiu
0B01D3 DD0709              A   701    	LD	BC,(IX+%9)
0B01D6 CD EB 2A 0B         A   702    	CALL	__imuls
0B01DA 29                  A   703    	ADD	HL,HL
0B01DB 29                  A   704    	ADD	HL,HL
0B01DC DD0706              A   705    	LD	BC,(IX+%6)
0B01DF 09                  A   706    	ADD	HL,BC
0B01E0 DD2FF5              A   707    	LD	(IX+%FFFFFFF5),HL
                           A   708    ;   58	        uint32_t * bottom_row = framebu
                           A   709    .LINE 58
                           A   710    
0B01E3 DD07FE              A   711    	LD	BC,(IX+%FFFFFFFE)
0B01E6 CD 42 29 0B         A   712    	CALL	__stoiu
0B01EA E5C1                A   713    	LD	BC,HL
0B01EC DD270C              A   714    	LD	HL,(IX+%C)
0B01EF B7                  A   715    	OR	A,A
0B01F0 ED42                A   716    	SBC	HL,BC
0B01F2 2B                  A   717    	DEC	HL
0B01F3 DD0709              A   718    	LD	BC,(IX+%9)
0B01F6 CD EB 2A 0B         A   719    	CALL	__imuls
0B01FA 29                  A   720    	ADD	HL,HL
0B01FB 29                  A   721    	ADD	HL,HL
0B01FC DD0706              A   722    	LD	BC,(IX+%6)
0B01FF 09                  A   723    	ADD	HL,BC
0B0200 DD2FF2              A   724    	LD	(IX+%FFFFFFF2),HL
                           A   725    ;   59	
                           A   726    ;   60	        memcpy(row_buffer, top_row, row
                           A   727    .LINE 60
                           A   728    
0B0203 DD07F8              A   729    	LD	BC,(IX+%FFFFFFF8)
0B0206 C5                  A   730    	PUSH	BC
0B0207 DD07F5              A   731    	LD	BC,(IX+%FFFFFFF5)
0B020A C5                  A   732    	PUSH	BC
0B020B DD07FB              A   733    	LD	BC,(IX+%FFFFFFFB)
0B020E C5                  A   734    	PUSH	BC
0B020F DD77F1              A   735    	LD	(IX+%FFFFFFF1),A
0B0212 CD 61 2A 0B         A   736    	CALL	_memcpy
0B0216 DD7EF1              A   737    	LD	A,(IX+%FFFFFFF1)
0B0219 C1                  A   738    	POP	BC
0B021A C1                  A   739    	POP	BC
0B021B C1                  A   740    	POP	BC
                           A   741    ;   61	        memcpy(top_row, bottom_row, row
                           A   742    .LINE 61
                           A   743    
0B021C DD07F8              A   744    	LD	BC,(IX+%FFFFFFF8)
0B021F C5                  A   745    	PUSH	BC
0B0220 DD07F2              A   746    	LD	BC,(IX+%FFFFFFF2)
0B0223 C5                  A   747    	PUSH	BC
0B0224 DD07F5              A   748    	LD	BC,(IX+%FFFFFFF5)
0B0227 C5                  A   749    	PUSH	BC
0B0228 DD77F1              A   750    	LD	(IX+%FFFFFFF1),A
0B022B CD 61 2A 0B         A   751    	CALL	_memcpy
0B022F DD7EF1              A   752    	LD	A,(IX+%FFFFFFF1)
0B0232 C1                  A   753    	POP	BC
0B0233 C1                  A   754    	POP	BC
0B0234 C1                  A   755    	POP	BC
                           A   756    ;   62	        memcpy(bottom_row, row_buffer, 
                           A   757    .LINE 62
                           A   758    
0B0235 DD07F8              A   759    	LD	BC,(IX+%FFFFFFF8)
0B0238 C5                  A   760    	PUSH	BC
0B0239 DD07FB              A   761    	LD	BC,(IX+%FFFFFFFB)
0B023C C5                  A   762    	PUSH	BC
0B023D DD07F2              A   763    	LD	BC,(IX+%FFFFFFF2)
0B0240 C5                  A   764    	PUSH	BC
0B0241 DD77F1              A   765    	LD	(IX+%FFFFFFF1),A
0B0244 CD 61 2A 0B         A   766    	CALL	_memcpy
0B0248 DD7EF1              A   767    	LD	A,(IX+%FFFFFFF1)
0B024B C1                  A   768    	POP	BC
0B024C C1                  A   769    	POP	BC
0B024D C1                  A   770    	POP	BC
0B024E DD27FE              A   771    	LD	HL,(IX+%FFFFFFFE)
0B0251 23                  A   772    	INC	HL
0B0252 DD75FE              A   773    	LD	(IX+%FFFFFFFE),L
0B0255 DD74FF              A   774    	LD	(IX+%FFFFFFFF),H
                           A   775    ;   63	    }
0B0258                     A   776    L_14:
                           A   777    .LINE 63
                           A   778    
0B0258 01020000            A   779    	LD	BC,2
0B025C DD270C              A   780    	LD	HL,(IX+%C)
0B025F CD 27 2B 0B         A   781    	CALL	__idivs
0B0263 E5D1                A   782    	LD	DE,HL
0B0265 DD07FE              A   783    	LD	BC,(IX+%FFFFFFFE)
0B0268 CD 42 29 0B         A   784    	CALL	__stoiu
0B026C B7                  A   785    	OR	A,A
0B026D ED52                A   786    	SBC	HL,DE
0B026F FA 79 02 0B         A   787    	JP	M,L__11
0B0273 EA CC 01 0B         A   788    	JP	PE,L_12
0B0277 18 04               A   789    	JR	L__12
0B0279                     A   790    L__11:
0B0279 E2 CC 01 0B         A   791    	JP	PO,L_12
0B027D                     A   792    L__12:
                           A   793    ;   64	
                           A   794    ;   65	    free(row_buffer);
                           A   795    .LINE 65
                           A   796    
0B027D DD07FB              A   797    	LD	BC,(IX+%FFFFFFFB)
0B0280 C5                  A   798    	PUSH	BC
0B0281 CD A8 25 0B         A   799    	CALL	_free
0B0285 C1                  A   800    	POP	BC
                           A   801    ;   66	}
                           A   802    .LINE 66
                           A   803    
0B0286 DDF9                A   804    	LD	SP,IX
0B0288 DDE1                A   805    	POP	IX
0B028A C9                  A   806    	RET	
                           A   807    
                           A   808    
                           A   809    ;**************************** _flip ***********
                           A   810    ;Name                         Addr/Register   S
                           A   811    ;_free                               IMPORT  --
                           A   812    ;_memcpy                             IMPORT  --
                           A   813    ;_malloc                             IMPORT  --
                           A   814    ;bottom_row                           IX-14    
                           A   815    ;top_row                              IX-11    
                           A   816    ;row_size                              IX-8    
                           A   817    ;row_buffer                            IX-5    
                           A   818    ;y                                     IX-2    
                           A   819    ;height                               IX+12    
                           A   820    ;width                                 IX+9    
                           A   821    ;framebuffer                           IX+6    
                           A   822    
                           A   823    
                           A   824    ; Stack Frame Size: 30 (bytes)
                           A   825    ;       Spill Code: 0 (instruction)
                           A   826    
                           A   827    
                           A   828    .ENDFUNC "flip",66,"_flip"
                           A   829    ;   67	
                           A   830    ;   68	void twiddle_buffer(char* buffer, int w
0B028B                     A   831    _twiddle_buffer:
                           A   832    .DEFINE "_twiddle_buffer"
                           A   833    
                           A   834    .VALUE _twiddle_buffer
                           A   835    
                           A   836    .CLASS 2
                           A   837    
                           A   838    .TYPE 65
                           A   839    
                           A   840    .ENDEF
                           A   841    
                           A   842    .BEGFUNC "twiddle_buffer",68,"_twiddle_buffer"
                           A   843    
                           A   844    .LINE 68
                           A   845    
                           A   846    .DEFINE "buffer"
                           A   847    
                           A   848    .CLASS 65
                           A   849    
                           A   850    .VALUE 6
                           A   851    
                           A   852    .TYPE 34
                           A   853    
                           A   854    .ENDEF
                           A   855    
                           A   856    .DEFINE "width"
                           A   857    
                           A   858    .CLASS 65
                           A   859    
                           A   860    .VALUE 9
                           A   861    
                           A   862    .TYPE 4
                           A   863    
                           A   864    .ENDEF
                           A   865    
                           A   866    .DEFINE "height"
                           A   867    
                           A   868    .CLASS 65
                           A   869    
                           A   870    .VALUE 12
                           A   871    
                           A   872    .TYPE 4
                           A   873    
                           A   874    .ENDEF
                           A   875    
                           A   876    .DEFINE "col"
                           A   877    
                           A   878    .CLASS 65
                           A   879    
                           A   880    .VALUE -3
                           A   881    
                           A   882    .TYPE 4
                           A   883    
                           A   884    .ENDEF
                           A   885    
                           A   886    .DEFINE "tempRow"
                           A   887    
                           A   888    .CLASS 65
                           A   889    
                           A   890    .VALUE -6
                           A   891    
                           A   892    .TYPE 34
                           A   893    
                           A   894    .ENDEF
                           A   895    
                           A   896    .DEFINE "oppositeRowPtr"
                           A   897    
                           A   898    .CLASS 65
                           A   899    
                           A   900    .VALUE -9
                           A   901    
                           A   902    .TYPE 34
                           A   903    
                           A   904    .ENDEF
                           A   905    
                           A   906    .DEFINE "rowPtr"
                           A   907    
                           A   908    .CLASS 65
                           A   909    
                           A   910    .VALUE -12
                           A   911    
                           A   912    .TYPE 34
                           A   913    
                           A   914    .ENDEF
                           A   915    
                           A   916    .DEFINE "row"
                           A   917    
                           A   918    .CLASS 65
                           A   919    
                           A   920    .VALUE -15
                           A   921    
                           A   922    .TYPE 4
                           A   923    
                           A   924    .ENDEF
                           A   925    
0B028B DDE5                A   926    	PUSH	IX
0B028D DD210000 00         A   927    	LD	IX,0
0B0292 DD39                A   928    	ADD	IX,SP
0B0294 ED22E4              A   929    	LEA	HL,IX+%FFFFFFE4
0B0297 F9                  A   930    	LD	SP,HL
                           A   931    ;   69	    int row, col;
                           A   932    ;   70	    char* rowPtr;
                           A   933    ;   71		char* oppositeRowPtr;
                           A   934    ;   72		char* tempRow = (char*)malloc(width
                           A   935    .LINE 72
                           A   936    
0B0298 DD2709              A   937    	LD	HL,(IX+%9)
0B029B 29                  A   938    	ADD	HL,HL
0B029C 29                  A   939    	ADD	HL,HL
0B029D E5                  A   940    	PUSH	HL
0B029E DD77E4              A   941    	LD	(IX+%FFFFFFE4),A
0B02A1 CD AD 26 0B         A   942    	CALL	_malloc
0B02A5 DD7EE4              A   943    	LD	A,(IX+%FFFFFFE4)
0B02A8 C1                  A   944    	POP	BC
0B02A9 DD2FFA              A   945    	LD	(IX+%FFFFFFFA),HL
                           A   946    ;   73	
                           A   947    ;   74	    //Iterate over each row
                           A   948    ;   75	    for (row = 0; row < height / 2; row
                           A   949    .LINE 75
                           A   950    
0B02AC 01000000            A   951    	LD	BC,0
0B02B0 DD0FF1              A   952    	LD	(IX+%FFFFFFF1),BC
0B02B3 C3 6B 04 0B         A   953    	JR	L_24
0B02B7                     A   954    L_22:
                           A   955    ;   76	        rowPtr = buffer + row * width *
                           A   956    .LINE 76
                           A   957    
0B02B7 DD27F1              A   958    	LD	HL,(IX+%FFFFFFF1)
0B02BA DD0709              A   959    	LD	BC,(IX+%9)
0B02BD CD EB 2A 0B         A   960    	CALL	__imuls
0B02C1 29                  A   961    	ADD	HL,HL
0B02C2 29                  A   962    	ADD	HL,HL
0B02C3 DD0706              A   963    	LD	BC,(IX+%6)
0B02C6 09                  A   964    	ADD	HL,BC
0B02C7 DD2FF4              A   965    	LD	(IX+%FFFFFFF4),HL
                           A   966    ;   77	        oppositeRowPtr = buffer + (heig
                           A   967    .LINE 77
                           A   968    
0B02CA DD07F1              A   969    	LD	BC,(IX+%FFFFFFF1)
0B02CD DD270C              A   970    	LD	HL,(IX+%C)
0B02D0 B7                  A   971    	OR	A,A
0B02D1 ED42                A   972    	SBC	HL,BC
0B02D3 2B                  A   973    	DEC	HL
0B02D4 DD0709              A   974    	LD	BC,(IX+%9)
0B02D7 CD EB 2A 0B         A   975    	CALL	__imuls
0B02DB 29                  A   976    	ADD	HL,HL
0B02DC 29                  A   977    	ADD	HL,HL
0B02DD DD0706              A   978    	LD	BC,(IX+%6)
0B02E0 09                  A   979    	ADD	HL,BC
0B02E1 DD2FF7              A   980    	LD	(IX+%FFFFFFF7),HL
                           A   981    ;   78	
                           A   982    ;   79	        //Swap bytes within each row (B
                           A   983    ;   80	        for (col = 0; col < width; col+
                           A   984    .LINE 80
                           A   985    
0B02E4 01000000            A   986    	LD	BC,0
0B02E8 DD0FFD              A   987    	LD	(IX+%FFFFFFFD),BC
0B02EB C3 4D 04 0B         A   988    	JR	L_21
0B02EF                     A   989    L_19:
                           A   990    ;   81	            tempRow[col * 4] = opposite
                           A   991    .LINE 81
                           A   992    
0B02EF DD27FD              A   993    	LD	HL,(IX+%FFFFFFFD)
0B02F2 29                  A   994    	ADD	HL,HL
0B02F3 29                  A   995    	ADD	HL,HL
0B02F4 E5C1                A   996    	LD	BC,HL
0B02F6 DD27FD              A   997    	LD	HL,(IX+%FFFFFFFD)
0B02F9 29                  A   998    	ADD	HL,HL
0B02FA 29                  A   999    	ADD	HL,HL
0B02FB DD17F7              A  1000    	LD	DE,(IX+%FFFFFFF7)
0B02FE 19                  A  1001    	ADD	HL,DE
0B02FF E5FDE1              A  1002    	LD	IY,HL
0B0302 C5D1                A  1003    	LD	DE,BC
0B0304 DD27FA              A  1004    	LD	HL,(IX+%FFFFFFFA)
0B0307 19                  A  1005    	ADD	HL,DE
0B0308 FD7E02              A  1006    	LD	A,(IY+%2)
0B030B 77                  A  1007    	LD	(HL),A
                           A  1008    ;   82	            tempRow[col * 4 + 1] = oppo
                           A  1009    .LINE 82
                           A  1010    
0B030C DD27FD              A  1011    	LD	HL,(IX+%FFFFFFFD)
0B030F 29                  A  1012    	ADD	HL,HL
0B0310 29                  A  1013    	ADD	HL,HL
0B0311 E5D1                A  1014    	LD	DE,HL
0B0313 DD27F7              A  1015    	LD	HL,(IX+%FFFFFFF7)
0B0316 09                  A  1016    	ADD	HL,BC
0B0317 E5FDE1              A  1017    	LD	IY,HL
0B031A D5C1                A  1018    	LD	BC,DE
0B031C DD27FA              A  1019    	LD	HL,(IX+%FFFFFFFA)
0B031F 09                  A  1020    	ADD	HL,BC
0B0320 23                  A  1021    	INC	HL
0B0321 FD7E01              A  1022    	LD	A,(IY+%1)
0B0324 77                  A  1023    	LD	(HL),A
                           A  1024    ;   83	            tempRow[col * 4 + 2] = oppo
                           A  1025    .LINE 83
                           A  1026    
0B0325 DD27FD              A  1027    	LD	HL,(IX+%FFFFFFFD)
0B0328 29                  A  1028    	ADD	HL,HL
0B0329 29                  A  1029    	ADD	HL,HL
0B032A E5C1                A  1030    	LD	BC,HL
0B032C DD27F7              A  1031    	LD	HL,(IX+%FFFFFFF7)
0B032F 19                  A  1032    	ADD	HL,DE
0B0330 E5FDE1              A  1033    	LD	IY,HL
0B0333 C5D1                A  1034    	LD	DE,BC
0B0335 DD27FA              A  1035    	LD	HL,(IX+%FFFFFFFA)
0B0338 19                  A  1036    	ADD	HL,DE
0B0339 23                  A  1037    	INC	HL
0B033A 23                  A  1038    	INC	HL
0B033B FD7E00              A  1039    	LD	A,(IY)
0B033E 77                  A  1040    	LD	(HL),A
                           A  1041    ;   84	            tempRow[col * 4 + 3] = oppo
                           A  1042    .LINE 84
                           A  1043    
0B033F DD27FD              A  1044    	LD	HL,(IX+%FFFFFFFD)
0B0342 29                  A  1045    	ADD	HL,HL
0B0343 29                  A  1046    	ADD	HL,HL
0B0344 E5D1                A  1047    	LD	DE,HL
0B0346 DD27F7              A  1048    	LD	HL,(IX+%FFFFFFF7)
0B0349 09                  A  1049    	ADD	HL,BC
0B034A E5FDE1              A  1050    	LD	IY,HL
0B034D DD2FEE              A  1051    	LD	(IX+%FFFFFFEE),HL	; spill
0B0350 ED2303              A  1052    	LEA	HL,IY+%3
0B0353 DD2FEB              A  1053    	LD	(IX+%FFFFFFEB),HL	; spill
0B0356 D5C1                A  1054    	LD	BC,DE
0B0358 DD27FA              A  1055    	LD	HL,(IX+%FFFFFFFA)
0B035B 09                  A  1056    	ADD	HL,BC
0B035C E5FDE1              A  1057    	LD	IY,HL
0B035F DD27EB              A  1058    	LD	HL,(IX+%FFFFFFEB)	; unspill
0B0362 7E                  A  1059    	LD	A,(HL)
0B0363 FD7703              A  1060    	LD	(IY+%3),A
                           A  1061    ;   85	
                           A  1062    ;   86	            oppositeRowPtr[col * 4] = r
                           A  1063    .LINE 86
                           A  1064    
0B0366 DD27FD              A  1065    	LD	HL,(IX+%FFFFFFFD)
0B0369 29                  A  1066    	ADD	HL,HL
0B036A 29                  A  1067    	ADD	HL,HL
0B036B E5C1                A  1068    	LD	BC,HL
0B036D DD27F4              A  1069    	LD	HL,(IX+%FFFFFFF4)
0B0370 19                  A  1070    	ADD	HL,DE
0B0371 E5FDE1              A  1071    	LD	IY,HL
0B0374 C5D1                A  1072    	LD	DE,BC
0B0376 DD27F7              A  1073    	LD	HL,(IX+%FFFFFFF7)
0B0379 19                  A  1074    	ADD	HL,DE
0B037A FD7E02              A  1075    	LD	A,(IY+%2)
0B037D 77                  A  1076    	LD	(HL),A
                           A  1077    ;   87	            oppositeRowPtr[col * 4 + 1]
                           A  1078    .LINE 87
                           A  1079    
0B037E DD27FD              A  1080    	LD	HL,(IX+%FFFFFFFD)
0B0381 29                  A  1081    	ADD	HL,HL
0B0382 29                  A  1082    	ADD	HL,HL
0B0383 E5D1                A  1083    	LD	DE,HL
0B0385 DD27F4              A  1084    	LD	HL,(IX+%FFFFFFF4)
0B0388 09                  A  1085    	ADD	HL,BC
0B0389 E5FDE1              A  1086    	LD	IY,HL
0B038C D5C1                A  1087    	LD	BC,DE
0B038E DD27F7              A  1088    	LD	HL,(IX+%FFFFFFF7)
0B0391 09                  A  1089    	ADD	HL,BC
0B0392 23                  A  1090    	INC	HL
0B0393 FD7E01              A  1091    	LD	A,(IY+%1)
0B0396 77                  A  1092    	LD	(HL),A
                           A  1093    ;   88	            oppositeRowPtr[col * 4 + 2]
                           A  1094    .LINE 88
                           A  1095    
0B0397 DD27FD              A  1096    	LD	HL,(IX+%FFFFFFFD)
0B039A 29                  A  1097    	ADD	HL,HL
0B039B 29                  A  1098    	ADD	HL,HL
0B039C E5C1                A  1099    	LD	BC,HL
0B039E DD27F4              A  1100    	LD	HL,(IX+%FFFFFFF4)
0B03A1 19                  A  1101    	ADD	HL,DE
0B03A2 E5FDE1              A  1102    	LD	IY,HL
0B03A5 C5D1                A  1103    	LD	DE,BC
0B03A7 DD27F7              A  1104    	LD	HL,(IX+%FFFFFFF7)
0B03AA 19                  A  1105    	ADD	HL,DE
0B03AB 23                  A  1106    	INC	HL
0B03AC 23                  A  1107    	INC	HL
0B03AD FD7E00              A  1108    	LD	A,(IY)
0B03B0 77                  A  1109    	LD	(HL),A
                           A  1110    ;   89	            oppositeRowPtr[col * 4 + 3]
                           A  1111    .LINE 89
                           A  1112    
0B03B1 DD27FD              A  1113    	LD	HL,(IX+%FFFFFFFD)
0B03B4 29                  A  1114    	ADD	HL,HL
0B03B5 29                  A  1115    	ADD	HL,HL
0B03B6 E5D1                A  1116    	LD	DE,HL
0B03B8 DD27F4              A  1117    	LD	HL,(IX+%FFFFFFF4)
0B03BB 09                  A  1118    	ADD	HL,BC
0B03BC E5FDE1              A  1119    	LD	IY,HL
0B03BF DD2FEE              A  1120    	LD	(IX+%FFFFFFEE),HL	; spill
0B03C2 ED2303              A  1121    	LEA	HL,IY+%3
0B03C5 DD2FE8              A  1122    	LD	(IX+%FFFFFFE8),HL	; spill
0B03C8 D5C1                A  1123    	LD	BC,DE
0B03CA DD27F7              A  1124    	LD	HL,(IX+%FFFFFFF7)
0B03CD 09                  A  1125    	ADD	HL,BC
0B03CE E5FDE1              A  1126    	LD	IY,HL
0B03D1 DD27E8              A  1127    	LD	HL,(IX+%FFFFFFE8)	; unspill
0B03D4 7E                  A  1128    	LD	A,(HL)
0B03D5 FD7703              A  1129    	LD	(IY+%3),A
                           A  1130    ;   90	
                           A  1131    ;   91	            rowPtr[col * 4] = tempRow[c
                           A  1132    .LINE 91
                           A  1133    
0B03D8 DD27FD              A  1134    	LD	HL,(IX+%FFFFFFFD)
0B03DB 29                  A  1135    	ADD	HL,HL
0B03DC 29                  A  1136    	ADD	HL,HL
0B03DD E5C1                A  1137    	LD	BC,HL
0B03DF DD27FA              A  1138    	LD	HL,(IX+%FFFFFFFA)
0B03E2 19                  A  1139    	ADD	HL,DE
0B03E3 E5FDE1              A  1140    	LD	IY,HL
0B03E6 C5D1                A  1141    	LD	DE,BC
0B03E8 DD27F4              A  1142    	LD	HL,(IX+%FFFFFFF4)
0B03EB 19                  A  1143    	ADD	HL,DE
0B03EC FD7E00              A  1144    	LD	A,(IY)
0B03EF 77                  A  1145    	LD	(HL),A
                           A  1146    ;   92	            rowPtr[col * 4 + 1] = tempR
                           A  1147    .LINE 92
                           A  1148    
0B03F0 DD27FD              A  1149    	LD	HL,(IX+%FFFFFFFD)
0B03F3 29                  A  1150    	ADD	HL,HL
0B03F4 29                  A  1151    	ADD	HL,HL
0B03F5 E5D1                A  1152    	LD	DE,HL
0B03F7 DD27FA              A  1153    	LD	HL,(IX+%FFFFFFFA)
0B03FA 09                  A  1154    	ADD	HL,BC
0B03FB E5FDE1              A  1155    	LD	IY,HL
0B03FE D5C1                A  1156    	LD	BC,DE
0B0400 DD27F4              A  1157    	LD	HL,(IX+%FFFFFFF4)
0B0403 09                  A  1158    	ADD	HL,BC
0B0404 23                  A  1159    	INC	HL
0B0405 FD7E01              A  1160    	LD	A,(IY+%1)
0B0408 77                  A  1161    	LD	(HL),A
                           A  1162    ;   93	            rowPtr[col * 4 + 2] = tempR
                           A  1163    .LINE 93
                           A  1164    
0B0409 DD27FD              A  1165    	LD	HL,(IX+%FFFFFFFD)
0B040C 29                  A  1166    	ADD	HL,HL
0B040D 29                  A  1167    	ADD	HL,HL
0B040E E5C1                A  1168    	LD	BC,HL
0B0410 DD27FA              A  1169    	LD	HL,(IX+%FFFFFFFA)
0B0413 19                  A  1170    	ADD	HL,DE
0B0414 E5FDE1              A  1171    	LD	IY,HL
0B0417 C5D1                A  1172    	LD	DE,BC
0B0419 DD27F4              A  1173    	LD	HL,(IX+%FFFFFFF4)
0B041C 19                  A  1174    	ADD	HL,DE
0B041D 23                  A  1175    	INC	HL
0B041E 23                  A  1176    	INC	HL
0B041F FD7E02              A  1177    	LD	A,(IY+%2)
0B0422 77                  A  1178    	LD	(HL),A
                           A  1179    ;   94	            rowPtr[col * 4 + 3] = tempR
                           A  1180    .LINE 94
                           A  1181    
0B0423 DD27FA              A  1182    	LD	HL,(IX+%FFFFFFFA)
0B0426 09                  A  1183    	ADD	HL,BC
0B0427 E5FDE1              A  1184    	LD	IY,HL
0B042A DD2FEE              A  1185    	LD	(IX+%FFFFFFEE),HL	; spill
0B042D ED2303              A  1186    	LEA	HL,IY+%3
0B0430 DD2FE5              A  1187    	LD	(IX+%FFFFFFE5),HL	; spill
0B0433 DD27FD              A  1188    	LD	HL,(IX+%FFFFFFFD)
0B0436 29                  A  1189    	ADD	HL,HL
0B0437 29                  A  1190    	ADD	HL,HL
0B0438 DD07F4              A  1191    	LD	BC,(IX+%FFFFFFF4)
0B043B 09                  A  1192    	ADD	HL,BC
0B043C E5FDE1              A  1193    	LD	IY,HL
0B043F DD27E5              A  1194    	LD	HL,(IX+%FFFFFFE5)	; unspill
0B0442 7E                  A  1195    	LD	A,(HL)
0B0443 FD7703              A  1196    	LD	(IY+%3),A
0B0446 DD07FD              A  1197    	LD	BC,(IX+%FFFFFFFD)
0B0449 03                  A  1198    	INC	BC
0B044A DD0FFD              A  1199    	LD	(IX+%FFFFFFFD),BC
                           A  1200    ;   95	        }
0B044D                     A  1201    L_21:
                           A  1202    .LINE 95
                           A  1203    
0B044D DD0709              A  1204    	LD	BC,(IX+%9)
0B0450 DD27FD              A  1205    	LD	HL,(IX+%FFFFFFFD)
0B0453 B7                  A  1206    	OR	A,A
0B0454 ED42                A  1207    	SBC	HL,BC
0B0456 FA 60 04 0B         A  1208    	JP	M,L__16
0B045A EA EF 02 0B         A  1209    	JP	PE,L_19
0B045E 18 04               A  1210    	JR	L__17
0B0460                     A  1211    L__16:
0B0460 E2 EF 02 0B         A  1212    	JP	PO,L_19
0B0464                     A  1213    L__17:
0B0464 DD07F1              A  1214    	LD	BC,(IX+%FFFFFFF1)
0B0467 03                  A  1215    	INC	BC
0B0468 DD0FF1              A  1216    	LD	(IX+%FFFFFFF1),BC
                           A  1217    ;   96	    }
0B046B                     A  1218    L_24:
                           A  1219    .LINE 96
                           A  1220    
0B046B 01020000            A  1221    	LD	BC,2
0B046F DD270C              A  1222    	LD	HL,(IX+%C)
0B0472 CD 27 2B 0B         A  1223    	CALL	__idivs
0B0476 E5C1                A  1224    	LD	BC,HL
0B0478 DD27F1              A  1225    	LD	HL,(IX+%FFFFFFF1)
0B047B B7                  A  1226    	OR	A,A
0B047C ED42                A  1227    	SBC	HL,BC
0B047E FA 88 04 0B         A  1228    	JP	M,L__18
0B0482 EA B7 02 0B         A  1229    	JP	PE,L_22
0B0486 18 04               A  1230    	JR	L__19
0B0488                     A  1231    L__18:
0B0488 E2 B7 02 0B         A  1232    	JP	PO,L_22
0B048C                     A  1233    L__19:
                           A  1234    ;   97		free(tempRow);
                           A  1235    .LINE 97
                           A  1236    
0B048C DD07FA              A  1237    	LD	BC,(IX+%FFFFFFFA)
0B048F C5                  A  1238    	PUSH	BC
0B0490 CD A8 25 0B         A  1239    	CALL	_free
0B0494 C1                  A  1240    	POP	BC
                           A  1241    ;   98	}
                           A  1242    .LINE 98
                           A  1243    
0B0495 DDF9                A  1244    	LD	SP,IX
0B0497 DDE1                A  1245    	POP	IX
0B0499 C9                  A  1246    	RET	
                           A  1247    
                           A  1248    
                           A  1249    ;**************************** _twiddle_buffer *
                           A  1250    ;Name                         Addr/Register   S
                           A  1251    ;_free                               IMPORT  --
                           A  1252    ;_malloc                             IMPORT  --
                           A  1253    ;row                                  IX-15    
                           A  1254    ;rowPtr                               IX-12    
                           A  1255    ;oppositeRowPtr                        IX-9    
                           A  1256    ;tempRow                               IX-6    
                           A  1257    ;col                                   IX-3    
                           A  1258    ;height                               IX+12    
                           A  1259    ;width                                 IX+9    
                           A  1260    ;buffer                                IX+6    
                           A  1261    
                           A  1262    
                           A  1263    ; Stack Frame Size: 43 (bytes)
                           A  1264    ;       Spill Code: -3 (instruction)
                           A  1265    
                           A  1266    
                           A  1267    .ENDFUNC "twiddle_buffer",98,"_twiddle_buffer"
                           A  1268    ;   99	
                           A  1269    ;  100	void reorder(char *arr, uint16_t length
0B049A                     A  1270    _reorder:
                           A  1271    .DEFINE "_reorder"
                           A  1272    
                           A  1273    .VALUE _reorder
                           A  1274    
                           A  1275    .CLASS 2
                           A  1276    
                           A  1277    .TYPE 65
                           A  1278    
                           A  1279    .ENDEF
                           A  1280    
                           A  1281    .BEGFUNC "reorder",100,"_reorder"
                           A  1282    
                           A  1283    .LINE 100
                           A  1284    
                           A  1285    .DEFINE "arr"
                           A  1286    
                           A  1287    .CLASS 65
                           A  1288    
                           A  1289    .VALUE 6
                           A  1290    
                           A  1291    .TYPE 34
                           A  1292    
                           A  1293    .ENDEF
                           A  1294    
                           A  1295    .DEFINE "length"
                           A  1296    
                           A  1297    .CLASS 65
                           A  1298    
                           A  1299    .VALUE 9
                           A  1300    
                           A  1301    .TYPE 13
                           A  1302    
                           A  1303    .ENDEF
                           A  1304    
                           A  1305    .DEFINE "i"
                           A  1306    
                           A  1307    .CLASS 65
                           A  1308    
                           A  1309    .VALUE -2
                           A  1310    
                           A  1311    .TYPE 13
                           A  1312    
                           A  1313    .ENDEF
                           A  1314    
                           A  1315    .DEFINE "temp"
                           A  1316    
                           A  1317    .CLASS 65
                           A  1318    
                           A  1319    .VALUE -3
                           A  1320    
                           A  1321    .TYPE 12
                           A  1322    
                           A  1323    .ENDEF
                           A  1324    
0B049A DDE5                A  1325    	PUSH	IX
0B049C DD210000 00         A  1326    	LD	IX,0
0B04A1 DD39                A  1327    	ADD	IX,SP
0B04A3 C5                  A  1328    	PUSH	BC
0B04A4 C5                  A  1329    	PUSH	BC
                           A  1330    ;  101	    uint16_t i;
                           A  1331    ;  102		for (i = 0; i < length; i += 4) {
                           A  1332    .LINE 102
                           A  1333    
0B04A5 DD36FE00            A  1334    	LD	(IX+%FFFFFFFE),%0
0B04A9 DD36FF00            A  1335    	LD	(IX+%FFFFFFFF),%0
0B04AD 18 68               A  1336    	JR	L_30
0B04AF                     A  1337    L_28:
                           A  1338    ;  103	        if (i + 2 < length) {
                           A  1339    .LINE 103
                           A  1340    
0B04AF DD07FE              A  1341    	LD	BC,(IX+%FFFFFFFE)
0B04B2 CD 42 29 0B         A  1342    	CALL	__stoiu
0B04B6 E5D1                A  1343    	LD	DE,HL
0B04B8 13                  A  1344    	INC	DE
0B04B9 13                  A  1345    	INC	DE
0B04BA DD0709              A  1346    	LD	BC,(IX+%9)
0B04BD CD 42 29 0B         A  1347    	CALL	__stoiu
0B04C1 E5C1                A  1348    	LD	BC,HL
0B04C3 D5E1                A  1349    	LD	HL,DE
0B04C5 B7                  A  1350    	OR	A,A
0B04C6 ED42                A  1351    	SBC	HL,BC
0B04C8 F2 D2 04 0B         A  1352    	JP	P,L__23
0B04CC EA 0B 05 0B         A  1353    	JP	PE,L_29
0B04D0 18 04               A  1354    	JR	L__24
0B04D2                     A  1355    L__23:
0B04D2 E2 0B 05 0B         A  1356    	JP	PO,L_29
0B04D6                     A  1357    L__24:
                           A  1358    ;  104	            uint8_t temp = arr[i];
                           A  1359    .LINE 104
                           A  1360    
0B04D6 DD07FE              A  1361    	LD	BC,(IX+%FFFFFFFE)
0B04D9 CD 42 29 0B         A  1362    	CALL	__stoiu
0B04DD DD0706              A  1363    	LD	BC,(IX+%6)
0B04E0 09                  A  1364    	ADD	HL,BC
0B04E1 DD2FFA              A  1365    	LD	(IX+%FFFFFFFA),HL
0B04E4 7E                  A  1366    	LD	A,(HL)
0B04E5 DD77FD              A  1367    	LD	(IX+%FFFFFFFD),A
                           A  1368    ;  105	            arr[i] = arr[i + 2];
                           A  1369    .LINE 105
                           A  1370    
0B04E8 DD31FA              A  1371    	LD	IY,(IX+%FFFFFFFA)
0B04EB DD07FE              A  1372    	LD	BC,(IX+%FFFFFFFE)
0B04EE CD 42 29 0B         A  1373    	CALL	__stoiu
0B04F2 DD0706              A  1374    	LD	BC,(IX+%6)
0B04F5 09                  A  1375    	ADD	HL,BC
0B04F6 FD7E02              A  1376    	LD	A,(IY+%2)
0B04F9 77                  A  1377    	LD	(HL),A
                           A  1378    ;  106	            arr[i + 2] = temp;
                           A  1379    .LINE 106
                           A  1380    
0B04FA DD07FE              A  1381    	LD	BC,(IX+%FFFFFFFE)
0B04FD CD 42 29 0B         A  1382    	CALL	__stoiu
0B0501 DD0706              A  1383    	LD	BC,(IX+%6)
0B0504 09                  A  1384    	ADD	HL,BC
0B0505 23                  A  1385    	INC	HL
0B0506 23                  A  1386    	INC	HL
0B0507 DD7EFD              A  1387    	LD	A,(IX+%FFFFFFFD)
0B050A 77                  A  1388    	LD	(HL),A
                           A  1389    ;  107	        }
                           A  1390    ;  108	    }
0B050B                     A  1391    L_29:
                           A  1392    .LINE 108
                           A  1393    
0B050B DD31FE              A  1394    	LD	IY,(IX+%FFFFFFFE)
0B050E ED2304              A  1395    	LEA	HL,IY+%4
0B0511 DD75FE              A  1396    	LD	(IX+%FFFFFFFE),L
0B0514 DD74FF              A  1397    	LD	(IX+%FFFFFFFF),H
0B0517                     A  1398    L_30:
0B0517 DD0709              A  1399    	LD	BC,(IX+%9)
0B051A DD27FE              A  1400    	LD	HL,(IX+%FFFFFFFE)
0B051D B7                  A  1401    	OR	A,A
0B051E 40ED42              A  1402    	SBC.SIS	HL,BC
0B0521 38 8C               A  1403    	JR	C,L_28
                           A  1404    ;  109	}
                           A  1405    .LINE 109
                           A  1406    
0B0523 DDF9                A  1407    	LD	SP,IX
0B0525 DDE1                A  1408    	POP	IX
0B0527 C9                  A  1409    	RET	
                           A  1410    
                           A  1411    
                           A  1412    ;**************************** _reorder ********
                           A  1413    ;Name                         Addr/Register   S
                           A  1414    ;temp                                  IX-3    
                           A  1415    ;i                                     IX-2    
                           A  1416    ;length                                IX+9    
                           A  1417    ;arr                                   IX+6    
                           A  1418    
                           A  1419    
                           A  1420    ; Stack Frame Size: 18 (bytes)
                           A  1421    ;       Spill Code: -3 (instruction)
                           A  1422    
                           A  1423    
                           A  1424    .ENDFUNC "reorder",109,"_reorder"
                           A  1425    ;  110	
                           A  1426    ;  111	void reorder_and_insert(char *arr, uint
0B0528                     A  1427    _reorder_and_insert:
                           A  1428    .DEFINE "_reorder_and_insert"
                           A  1429    
                           A  1430    .VALUE _reorder_and_insert
                           A  1431    
                           A  1432    .CLASS 2
                           A  1433    
                           A  1434    .TYPE 65
                           A  1435    
                           A  1436    .ENDEF
                           A  1437    
                           A  1438    .BEGFUNC "reorder_and_insert",111,"_reorder_and
                           A  1439    
                           A  1440    .LINE 111
                           A  1441    
                           A  1442    .DEFINE "arr"
                           A  1443    
                           A  1444    .CLASS 65
                           A  1445    
                           A  1446    .VALUE 6
                           A  1447    
                           A  1448    .TYPE 34
                           A  1449    
                           A  1450    .ENDEF
                           A  1451    
                           A  1452    .DEFINE "length"
                           A  1453    
                           A  1454    .CLASS 65
                           A  1455    
                           A  1456    .VALUE 9
                           A  1457    
                           A  1458    .TYPE 13
                           A  1459    
                           A  1460    .ENDEF
                           A  1461    
                           A  1462    .DEFINE "new_arr"
                           A  1463    
                           A  1464    .CLASS 65
                           A  1465    
                           A  1466    .VALUE 12
                           A  1467    
                           A  1468    .TYPE 290
                           A  1469    
                           A  1470    .ENDEF
                           A  1471    
                           A  1472    .DEFINE "new_length"
                           A  1473    
                           A  1474    .CLASS 65
                           A  1475    
                           A  1476    .VALUE 15
                           A  1477    
                           A  1478    .TYPE 45
                           A  1479    
                           A  1480    .ENDEF
                           A  1481    
                           A  1482    .DEFINE "insert_value"
                           A  1483    
                           A  1484    .CLASS 65
                           A  1485    
                           A  1486    .VALUE 18
                           A  1487    
                           A  1488    .TYPE 2
                           A  1489    
                           A  1490    .ENDEF
                           A  1491    
                           A  1492    .DEFINE "i"
                           A  1493    
                           A  1494    .CLASS 65
                           A  1495    
                           A  1496    .VALUE -2
                           A  1497    
                           A  1498    .TYPE 13
                           A  1499    
                           A  1500    .ENDEF
                           A  1501    
                           A  1502    .DEFINE "j"
                           A  1503    
                           A  1504    .CLASS 65
                           A  1505    
                           A  1506    .VALUE -4
                           A  1507    
                           A  1508    .TYPE 13
                           A  1509    
                           A  1510    .ENDEF
                           A  1511    
0B0528 DDE5                A  1512    	PUSH	IX
0B052A DD210000 00         A  1513    	LD	IX,0
0B052F DD39                A  1514    	ADD	IX,SP
0B0531 ED22ED              A  1515    	LEA	HL,IX+%FFFFFFED
0B0534 F9                  A  1516    	LD	SP,HL
                           A  1517    ;  112	
                           A  1518    ;  113		uint16_t i, j = 0;
                           A  1519    .LINE 113
                           A  1520    
0B0535 DD36FC00            A  1521    	LD	(IX+%FFFFFFFC),%0
0B0539 DD36FD00            A  1522    	LD	(IX+%FFFFFFFD),%0
                           A  1523    ;  114	    *new_length = (length / 3) * 4 + (l
                           A  1524    .LINE 114
                           A  1525    
0B053D DD0709              A  1526    	LD	BC,(IX+%9)
0B0540 CD 42 29 0B         A  1527    	CALL	__stoiu
0B0544 01030000            A  1528    	LD	BC,3
0B0548 CD 27 2B 0B         A  1529    	CALL	__idivs
0B054C 29                  A  1530    	ADD	HL,HL
0B054D 29                  A  1531    	ADD	HL,HL
0B054E E5D1                A  1532    	LD	DE,HL
0B0550 DD0709              A  1533    	LD	BC,(IX+%9)
0B0553 CD 42 29 0B         A  1534    	CALL	__stoiu
0B0557 01030000            A  1535    	LD	BC,3
0B055B CD 60 27 0B         A  1536    	CALL	__irems
0B055F 19                  A  1537    	ADD	HL,DE
0B0560 E5C1                A  1538    	LD	BC,HL
0B0562 DD270F              A  1539    	LD	HL,(IX+%F)
0B0565 71                  A  1540    	LD	(HL),C
0B0566 23                  A  1541    	INC	HL
0B0567 70                  A  1542    	LD	(HL),B
                           A  1543    ;  115	    *new_arr = (char *) malloc(*new_len
                           A  1544    .LINE 115
                           A  1545    
0B0568 DD270F              A  1546    	LD	HL,(IX+%F)
0B056B ED07                A  1547    	LD	BC,(HL)
0B056D CD 42 29 0B         A  1548    	CALL	__stoiu
0B0571 E5                  A  1549    	PUSH	HL
0B0572 CD AD 26 0B         A  1550    	CALL	_malloc
0B0576 C1                  A  1551    	POP	BC
0B0577 DD310C              A  1552    	LD	IY,(IX+%C)
0B057A FD2F00              A  1553    	LD	(IY),HL
                           A  1554    ;  116	
                           A  1555    ;  117	    for (i = 0; i < length; i += 3) {
                           A  1556    .LINE 117
                           A  1557    
0B057D DD36FE00            A  1558    	LD	(IX+%FFFFFFFE),%0
0B0581 DD36FF00            A  1559    	LD	(IX+%FFFFFFFF),%0
0B0585 C3 8E 06 0B         A  1560    	JR	L_42
0B0589                     A  1561    L_40:
                           A  1562    ;  118	        
                           A  1563    ;  119	        (*new_arr)[j] = (i + 2 < length
                           A  1564    .LINE 119
                           A  1565    
0B0589 DD07FE              A  1566    	LD	BC,(IX+%FFFFFFFE)
0B058C CD 42 29 0B         A  1567    	CALL	__stoiu
0B0590 E5D1                A  1568    	LD	DE,HL
0B0592 13                  A  1569    	INC	DE
0B0593 13                  A  1570    	INC	DE
0B0594 DD0709              A  1571    	LD	BC,(IX+%9)
0B0597 CD 42 29 0B         A  1572    	CALL	__stoiu
0B059B E5C1                A  1573    	LD	BC,HL
0B059D D5E1                A  1574    	LD	HL,DE
0B059F B7                  A  1575    	OR	A,A
0B05A0 ED42                A  1576    	SBC	HL,BC
0B05A2 F2 AC 05 0B         A  1577    	JP	P,L__29
0B05A6 EA C8 05 0B         A  1578    	JP	PE,L_34
0B05AA 18 04               A  1579    	JR	L__30
0B05AC                     A  1580    L__29:
0B05AC E2 C8 05 0B         A  1581    	JP	PO,L_34
0B05B0                     A  1582    L__30:
0B05B0 DD07FE              A  1583    	LD	BC,(IX+%FFFFFFFE)
0B05B3 CD 42 29 0B         A  1584    	CALL	__stoiu
0B05B7 DD0706              A  1585    	LD	BC,(IX+%6)
0B05BA 09                  A  1586    	ADD	HL,BC
0B05BB 23                  A  1587    	INC	HL
0B05BC 23                  A  1588    	INC	HL
0B05BD 7E                  A  1589    	LD	A,(HL)
0B05BE 47                  A  1590    	LD	B,A
0B05BF 17ED62              A  1591    	SEXT	HL
0B05C2 68                  A  1592    	LD	L,B
0B05C3 DD2FF9              A  1593    	LD	(IX+%FFFFFFF9),HL
0B05C6 18 07               A  1594    	JR	L_35
0B05C8                     A  1595    L_34:
0B05C8 01000000            A  1596    	LD	BC,0
0B05CC DD0FF9              A  1597    	LD	(IX+%FFFFFFF9),BC
0B05CF                     A  1598    L_35:
0B05CF DD310C              A  1599    	LD	IY,(IX+%C)
0B05D2 DD07FC              A  1600    	LD	BC,(IX+%FFFFFFFC)
0B05D5 CD 42 29 0B         A  1601    	CALL	__stoiu
0B05D9 FD0700              A  1602    	LD	BC,(IY)
0B05DC 09                  A  1603    	ADD	HL,BC
0B05DD DD2FF3              A  1604    	LD	(IX+%FFFFFFF3),HL
0B05E0 DD7EF9              A  1605    	LD	A,(IX+%FFFFFFF9)
0B05E3 DD27F3              A  1606    	LD	HL,(IX+%FFFFFFF3)
0B05E6 77                  A  1607    	LD	(HL),A
                           A  1608    ;  120	        (*new_arr)[j + 1] = (i + 1 < le
                           A  1609    .LINE 120
                           A  1610    
0B05E7 DD07FE              A  1611    	LD	BC,(IX+%FFFFFFFE)
0B05EA CD 42 29 0B         A  1612    	CALL	__stoiu
0B05EE E5D1                A  1613    	LD	DE,HL
0B05F0 13                  A  1614    	INC	DE
0B05F1 DD0709              A  1615    	LD	BC,(IX+%9)
0B05F4 CD 42 29 0B         A  1616    	CALL	__stoiu
0B05F8 E5C1                A  1617    	LD	BC,HL
0B05FA D5E1                A  1618    	LD	HL,DE
0B05FC B7                  A  1619    	OR	A,A
0B05FD ED42                A  1620    	SBC	HL,BC
0B05FF F2 09 06 0B         A  1621    	JP	P,L__31
0B0603 EA 24 06 0B         A  1622    	JP	PE,L_38
0B0607 18 04               A  1623    	JR	L__32
0B0609                     A  1624    L__31:
0B0609 E2 24 06 0B         A  1625    	JP	PO,L_38
0B060D                     A  1626    L__32:
0B060D DD07FE              A  1627    	LD	BC,(IX+%FFFFFFFE)
0B0610 CD 42 29 0B         A  1628    	CALL	__stoiu
0B0614 DD0706              A  1629    	LD	BC,(IX+%6)
0B0617 09                  A  1630    	ADD	HL,BC
0B0618 23                  A  1631    	INC	HL
0B0619 7E                  A  1632    	LD	A,(HL)
0B061A 47                  A  1633    	LD	B,A
0B061B 17ED62              A  1634    	SEXT	HL
0B061E 68                  A  1635    	LD	L,B
0B061F DD2FF6              A  1636    	LD	(IX+%FFFFFFF6),HL
0B0622 18 07               A  1637    	JR	L_39
0B0624                     A  1638    L_38:
0B0624 01000000            A  1639    	LD	BC,0
0B0628 DD0FF6              A  1640    	LD	(IX+%FFFFFFF6),BC
0B062B                     A  1641    L_39:
0B062B DD7EF6              A  1642    	LD	A,(IX+%FFFFFFF6)
0B062E DD27F3              A  1643    	LD	HL,(IX+%FFFFFFF3)
0B0631 23                  A  1644    	INC	HL
0B0632 77                  A  1645    	LD	(HL),A
                           A  1646    ;  121	        (*new_arr)[j + 2] = arr[i];
                           A  1647    .LINE 121
                           A  1648    
0B0633 DD07FE              A  1649    	LD	BC,(IX+%FFFFFFFE)
0B0636 CD 42 29 0B         A  1650    	CALL	__stoiu
0B063A DD0706              A  1651    	LD	BC,(IX+%6)
0B063D 09                  A  1652    	ADD	HL,BC
0B063E E5FDE1              A  1653    	LD	IY,HL
0B0641 DD270C              A  1654    	LD	HL,(IX+%C)
0B0644 DD2FED              A  1655    	LD	(IX+%FFFFFFED),HL	; spill
0B0647 DD07FC              A  1656    	LD	BC,(IX+%FFFFFFFC)
0B064A CD 42 29 0B         A  1657    	CALL	__stoiu
0B064E DD2FF0              A  1658    	LD	(IX+%FFFFFFF0),HL	; spill
0B0651 DD27ED              A  1659    	LD	HL,(IX+%FFFFFFED)	; unspill
0B0654 ED07                A  1660    	LD	BC,(HL)
0B0656 DD27F0              A  1661    	LD	HL,(IX+%FFFFFFF0)	; unspill
0B0659 09                  A  1662    	ADD	HL,BC
0B065A 23                  A  1663    	INC	HL
0B065B 23                  A  1664    	INC	HL
0B065C FD7E00              A  1665    	LD	A,(IY)
0B065F 77                  A  1666    	LD	(HL),A
                           A  1667    ;  122	        
                           A  1668    ;  123	        (*new_arr)[j + 3] = 0xFF;
                           A  1669    .LINE 123
                           A  1670    
0B0660 DD310C              A  1671    	LD	IY,(IX+%C)
0B0663 DD07FC              A  1672    	LD	BC,(IX+%FFFFFFFC)
0B0666 CD 42 29 0B         A  1673    	CALL	__stoiu
0B066A FD0700              A  1674    	LD	BC,(IY)
0B066D 09                  A  1675    	ADD	HL,BC
0B066E E5FDE1              A  1676    	LD	IY,HL
0B0671 ED2303              A  1677    	LEA	HL,IY+%3
0B0674 36FF                A  1678    	LD	(HL),%FF
                           A  1679    ;  124	
                           A  1680    ;  125	        j += 4;
                           A  1681    .LINE 125
                           A  1682    
0B0676 DD31FC              A  1683    	LD	IY,(IX+%FFFFFFFC)
0B0679 ED2304              A  1684    	LEA	HL,IY+%4
0B067C DD75FC              A  1685    	LD	(IX+%FFFFFFFC),L
0B067F DD74FD              A  1686    	LD	(IX+%FFFFFFFD),H
0B0682 DD31FE              A  1687    	LD	IY,(IX+%FFFFFFFE)
0B0685 ED2303              A  1688    	LEA	HL,IY+%3
0B0688 DD75FE              A  1689    	LD	(IX+%FFFFFFFE),L
0B068B DD74FF              A  1690    	LD	(IX+%FFFFFFFF),H
                           A  1691    ;  126	    }
0B068E                     A  1692    L_42:
                           A  1693    .LINE 126
                           A  1694    
0B068E DD0709              A  1695    	LD	BC,(IX+%9)
0B0691 DD27FE              A  1696    	LD	HL,(IX+%FFFFFFFE)
0B0694 B7                  A  1697    	OR	A,A
0B0695 40ED42              A  1698    	SBC.SIS	HL,BC
0B0698 DA 89 05 0B         A  1699    	JR	C,L_40
                           A  1700    ;  127		free(new_arr);
                           A  1701    .LINE 127
                           A  1702    
0B069C DD070C              A  1703    	LD	BC,(IX+%C)
0B069F C5                  A  1704    	PUSH	BC
0B06A0 CD A8 25 0B         A  1705    	CALL	_free
0B06A4 C1                  A  1706    	POP	BC
                           A  1707    ;  128	}
                           A  1708    .LINE 128
                           A  1709    
0B06A5 DDF9                A  1710    	LD	SP,IX
0B06A7 DDE1                A  1711    	POP	IX
0B06A9 C9                  A  1712    	RET	
                           A  1713    
                           A  1714    
                           A  1715    ;**************************** _reorder_and_inse
                           A  1716    ;Name                         Addr/Register   S
                           A  1717    ;_free                               IMPORT  --
                           A  1718    ;_malloc                             IMPORT  --
                           A  1719    ;G_0                                  IX-13    
                           A  1720    ;temp36                               IX-10    
                           A  1721    ;temp32                                IX-7    
                           A  1722    ;j                                     IX-4    
                           A  1723    ;i                                     IX-2    
                           A  1724    ;insert_value                         IX+18    
                           A  1725    ;new_length                           IX+15    
                           A  1726    ;new_arr                              IX+12    
                           A  1727    ;length                                IX+9    
                           A  1728    ;arr                                   IX+6    
                           A  1729    
                           A  1730    
                           A  1731    ; Stack Frame Size: 40 (bytes)
                           A  1732    ;       Spill Code: -3 (instruction)
                           A  1733    
                           A  1734    
                           A  1735    .ENDFUNC "reorder_and_insert",128,"_reorder_and
                           A  1736    ;  129	
                           A  1737    ;  130	bmp_info load_bmp_big(const char * file
0B06AA                     A  1738    _load_bmp_big:
                           A  1739    .DEFINE "_load_bmp_big"
                           A  1740    
                           A  1741    .VALUE _load_bmp_big
                           A  1742    
                           A  1743    .CLASS 2
                           A  1744    
                           A  1745    .TAG "NONAME6"
                           A  1746    
                           A  1747    .TYPE 72
                           A  1748    
                           A  1749    .ENDEF
                           A  1750    
                           A  1751    .BEGFUNC "load_bmp_big",130,"_load_bmp_big"
                           A  1752    
                           A  1753    .LINE 130
                           A  1754    
                           A  1755    .DEFINE "filename"
                           A  1756    
                           A  1757    .CLASS 65
                           A  1758    
                           A  1759    .VALUE 9
                           A  1760    
                           A  1761    .TYPE 194
                           A  1762    
                           A  1763    .ENDEF
                           A  1764    
                           A  1765    .DEFINE "slot"
                           A  1766    
                           A  1767    .CLASS 65
                           A  1768    
                           A  1769    .VALUE 12
                           A  1770    
                           A  1771    .TYPE 12
                           A  1772    
                           A  1773    .ENDEF
                           A  1774    
                           A  1775    .DEFINE "file"
                           A  1776    
                           A  1777    .CLASS 65
                           A  1778    
                           A  1779    .VALUE -1
                           A  1780    
                           A  1781    .TYPE 12
                           A  1782    
                           A  1783    .ENDEF
                           A  1784    
                           A  1785    .DEFINE "y"
                           A  1786    
                           A  1787    .CLASS 65
                           A  1788    
                           A  1789    .VALUE -5
                           A  1790    
                           A  1791    .TYPE 5
                           A  1792    
                           A  1793    .ENDEF
                           A  1794    
                           A  1795    .DEFINE "bit_depth"
                           A  1796    
                           A  1797    .CLASS 65
                           A  1798    
                           A  1799    .VALUE -9
                           A  1800    
                           A  1801    .TYPE 5
                           A  1802    
                           A  1803    .ENDEF
                           A  1804    
                           A  1805    .DEFINE "i"
                           A  1806    
                           A  1807    .CLASS 65
                           A  1808    
                           A  1809    .VALUE -13
                           A  1810    
                           A  1811    .TYPE 5
                           A  1812    
                           A  1813    .ENDEF
                           A  1814    
                           A  1815    .DEFINE "src"
                           A  1816    
                           A  1817    .CLASS 65
                           A  1818    
                           A  1819    .VALUE -16
                           A  1820    
                           A  1821    .TYPE 34
                           A  1822    
                           A  1823    .ENDEF
                           A  1824    
                           A  1825    .DEFINE "height"
                           A  1826    
                           A  1827    .CLASS 65
                           A  1828    
                           A  1829    .VALUE -20
                           A  1830    
                           A  1831    .TYPE 5
                           A  1832    
                           A  1833    .ENDEF
                           A  1834    
                           A  1835    .DEFINE "return_info"
                           A  1836    
                           A  1837    .CLASS 65
                           A  1838    
                           A  1839    .VALUE -25
                           A  1840    
                           A  1841    .TAG "NONAME6"
                           A  1842    
                           A  1843    .TYPE 8
                           A  1844    
                           A  1845    .ENDEF
                           A  1846    
                           A  1847    .DEFINE "width"
                           A  1848    
                           A  1849    .CLASS 65
                           A  1850    
                           A  1851    .VALUE -29
                           A  1852    
                           A  1853    .TYPE 5
                           A  1854    
                           A  1855    .ENDEF
                           A  1856    
                           A  1857    .DEFINE "row_padding"
                           A  1858    
                           A  1859    .CLASS 65
                           A  1860    
                           A  1861    .VALUE -37
                           A  1862    
                           A  1863    .TYPE 5
                           A  1864    
                           A  1865    .ENDEF
                           A  1866    
                           A  1867    .DEFINE "index"
                           A  1868    
                           A  1869    .CLASS 65
                           A  1870    
                           A  1871    .VALUE -42
                           A  1872    
                           A  1873    .TYPE 12
                           A  1874    
                           A  1875    .ENDEF
                           A  1876    
                           A  1877    .DEFINE "color_table_size"
                           A  1878    
                           A  1879    .CLASS 65
                           A  1880    
                           A  1881    .VALUE -46
                           A  1882    
                           A  1883    .TYPE 15
                           A  1884    
                           A  1885    .ENDEF
                           A  1886    
                           A  1887    .DEFINE "biSize"
                           A  1888    
                           A  1889    .CLASS 65
                           A  1890    
                           A  1891    .VALUE -50
                           A  1892    
                           A  1893    .TYPE 15
                           A  1894    
                           A  1895    .ENDEF
                           A  1896    
                           A  1897    .DEFINE "fo"
                           A  1898    
                           A  1899    .CLASS 65
                           A  1900    
                           A  1901    .VALUE -53
                           A  1902    
                           A  1903    .TAG "NONAME5"
                           A  1904    
                           A  1905    .TYPE 40
                           A  1906    
                           A  1907    .ENDEF
                           A  1908    
                           A  1909    .DEFINE "x"
                           A  1910    
                           A  1911    .CLASS 65
                           A  1912    
                           A  1913    .VALUE -57
                           A  1914    
                           A  1915    .TYPE 5
                           A  1916    
                           A  1917    .ENDEF
                           A  1918    
                           A  1919    .DEFINE "r"
                           A  1920    
                           A  1921    .CLASS 65
                           A  1922    
                           A  1923    .VALUE -58
                           A  1924    
                           A  1925    .TYPE 12
                           A  1926    
                           A  1927    .ENDEF
                           A  1928    
                           A  1929    .DEFINE "g"
                           A  1930    
                           A  1931    .CLASS 65
                           A  1932    
                           A  1933    .VALUE -59
                           A  1934    
                           A  1935    .TYPE 12
                           A  1936    
                           A  1937    .ENDEF
                           A  1938    
                           A  1939    .DEFINE "b"
                           A  1940    
                           A  1941    .CLASS 65
                           A  1942    
                           A  1943    .VALUE -60
                           A  1944    
                           A  1945    .TYPE 12
                           A  1946    
                           A  1947    .ENDEF
                           A  1948    
                           A  1949    .DEFINE "non_pad_row"
                           A  1950    
                           A  1951    .CLASS 65
                           A  1952    
                           A  1953    .VALUE -63
                           A  1954    
                           A  1955    .TYPE 4
                           A  1956    
                           A  1957    .ENDEF
                           A  1958    
                           A  1959    .DEFINE "new_row_size"
                           A  1960    
                           A  1961    .CLASS 65
                           A  1962    
                           A  1963    .VALUE -65
                           A  1964    
                           A  1965    .TYPE 13
                           A  1966    
                           A  1967    .ENDEF
                           A  1968    
                           A  1969    .DEFINE "row_24bpp"
                           A  1970    
                           A  1971    .CLASS 65
                           A  1972    
                           A  1973    .VALUE -68
                           A  1974    
                           A  1975    .TYPE 34
                           A  1976    
                           A  1977    .ENDEF
                           A  1978    
                           A  1979    .DEFINE "image_start"
                           A  1980    
                           A  1981    .CLASS 65
                           A  1982    
                           A  1983    .VALUE -72
                           A  1984    
                           A  1985    .TYPE 5
                           A  1986    
                           A  1987    .ENDEF
                           A  1988    
                           A  1989    .DEFINE "image_buffer"
                           A  1990    
                           A  1991    .CLASS 65
                           A  1992    
                           A  1993    .VALUE -75
                           A  1994    
                           A  1995    .TYPE 34
                           A  1996    
                           A  1997    .ENDEF
                           A  1998    
                           A  1999    .DEFINE "greenMask"
                           A  2000    
                           A  2001    .CLASS 65
                           A  2002    
                           A  2003    .VALUE -79
                           A  2004    
                           A  2005    .DIM 4
                           A  2006    
                           A  2007    .TYPE 98
                           A  2008    
                           A  2009    .ENDEF
                           A  2010    
                           A  2011    .DEFINE "non_pad_row"
                           A  2012    
                           A  2013    .CLASS 65
                           A  2014    
                           A  2015    .VALUE -82
                           A  2016    
                           A  2017    .TYPE 4
                           A  2018    
                           A  2019    .ENDEF
                           A  2020    
                           A  2021    .DEFINE "blueMask"
                           A  2022    
                           A  2023    .CLASS 65
                           A  2024    
                           A  2025    .VALUE -86
                           A  2026    
                           A  2027    .DIM 4
                           A  2028    
                           A  2029    .TYPE 98
                           A  2030    
                           A  2031    .ENDEF
                           A  2032    
                           A  2033    .DEFINE "alphaMask"
                           A  2034    
                           A  2035    .CLASS 65
                           A  2036    
                           A  2037    .VALUE -90
                           A  2038    
                           A  2039    .DIM 4
                           A  2040    
                           A  2041    .TYPE 98
                           A  2042    
                           A  2043    .ENDEF
                           A  2044    
                           A  2045    .DEFINE "redMask"
                           A  2046    
                           A  2047    .CLASS 65
                           A  2048    
                           A  2049    .VALUE -94
                           A  2050    
                           A  2051    .DIM 4
                           A  2052    
                           A  2053    .TYPE 98
                           A  2054    
                           A  2055    .ENDEF
                           A  2056    
                           A  2057    .DEFINE "non_pad_row"
                           A  2058    
                           A  2059    .CLASS 65
                           A  2060    
                           A  2061    .VALUE -97
                           A  2062    
                           A  2063    .TYPE 4
                           A  2064    
                           A  2065    .ENDEF
                           A  2066    
                           A  2067    .DEFINE "header"
                           A  2068    
                           A  2069    .CLASS 65
                           A  2070    
                           A  2071    .VALUE -151
                           A  2072    
                           A  2073    .DIM 54
                           A  2074    
                           A  2075    .TYPE 98
                           A  2076    
                           A  2077    .ENDEF
                           A  2078    
                           A  2079    .DEFINE "color_table"
                           A  2080    
                           A  2081    .CLASS 65
                           A  2082    
                           A  2083    .VALUE -1175
                           A  2084    
                           A  2085    .DIM 1024
                           A  2086    
                           A  2087    .TYPE 98
                           A  2088    
                           A  2089    .ENDEF
                           A  2090    
0B06AA DDE5                A  2091    	PUSH	IX
0B06AC DD210000 00         A  2092    	LD	IX,0
0B06B1 DD39                A  2093    	ADD	IX,SP
0B06B3 2156FBFF            A  2094    	LD	HL,-1194
0B06B7 39                  A  2095    	ADD	HL,SP
0B06B8 F9                  A  2096    	LD	SP,HL
                           A  2097    ;  131	
                           A  2098    ;  132	    int32_t image_start, width, height,
                           A  2099    ;  133		char* row_24bpp;
                           A  2100    ;  134	    uint8_t pixel[4], file, r, g, b, in
                           A  2101    ;  135	    char header[54], color_table[1024];
                           A  2102    ;  136	    uint32_t pixel_value, color_table_s
                           A  2103    ;  137	    uint32_t biSize;
                           A  2104    ;  138	    FIL * fo;
                           A  2105    ;  139		bmp_info return_info;
                           A  2106    ;  140	
                           A  2107    ;  141	    char * src;
                           A  2108    ;  142	    char * image_buffer;
                           A  2109    ;  143		
                           A  2110    ;  144		//if (game.vgm_file != NULL) parse_
                           A  2111    ;  145		
                           A  2112    ;  146		return_info.bmp_width = 0;
                           A  2113    .LINE 146
                           A  2114    
0B06B9 DD36E700            A  2115    	LD	(IX+%FFFFFFE7),%0
0B06BD DD36E800            A  2116    	LD	(IX+%FFFFFFE8),%0
                           A  2117    ;  147		return_info.bmp_height = 0;
                           A  2118    .LINE 147
                           A  2119    
0B06C1 DD36E900            A  2120    	LD	(IX+%FFFFFFE9),%0
0B06C5 DD36EA00            A  2121    	LD	(IX+%FFFFFFEA),%0
                           A  2122    ;  148		return_info.bmp_bitdepth = 0;	
                           A  2123    .LINE 148
                           A  2124    
0B06C9 DD36EB00            A  2125    	LD	(IX+%FFFFFFEB),%0
                           A  2126    ;  149	
                           A  2127    ;  150	    file = mos_fopen(filename, fa_read)
                           A  2128    .LINE 150
                           A  2129    
0B06CD 01010000            A  2130    	LD	BC,1
0B06D1 C5                  A  2131    	PUSH	BC
0B06D2 DD0709              A  2132    	LD	BC,(IX+%9)
0B06D5 C5                  A  2133    	PUSH	BC
0B06D6 CD F7 23 0B         A  2134    	CALL	_mos_fopen
0B06DA C1                  A  2135    	POP	BC
0B06DB C1                  A  2136    	POP	BC
0B06DC DD77FF              A  2137    	LD	(IX+%FFFFFFFF),A
                           A  2138    ;  151	    if (!file) {
                           A  2139    .LINE 151
                           A  2140    
0B06DF B7                  A  2141    	OR	A,A
0B06E0 20 3B               A  2142    	JR	NZ,L_46
                           A  2143    ;  152	        printf("Error: could not open %
                           A  2144    .LINE 152
                           A  2145    
0B06E2 01 48 29 0B         A  2146    	LD	BC,___print_uputch
0B06E6 ED43 A2 2C 0B       A  2147    	LD	(___print_xputch),BC
0B06EB 01 A8 2C 0B         A  2148    	LD	BC,L__35
0B06EF C5                  A  2149    	PUSH	BC
0B06F0 CD AD 27 0B         A  2150    	CALL	___print_sendstring
0B06F4 C1                  A  2151    	POP	BC
0B06F5 DD0709              A  2152    	LD	BC,(IX+%9)
0B06F8 C5                  A  2153    	PUSH	BC
0B06F9 CD AD 27 0B         A  2154    	CALL	___print_sendstring
0B06FD C1                  A  2155    	POP	BC
0B06FE 01 BF 2C 0B         A  2156    	LD	BC,L__36
0B0702 C5                  A  2157    	PUSH	BC
0B0703 CD AD 27 0B         A  2158    	CALL	___print_sendstring
0B0707 C1                  A  2159    	POP	BC
                           A  2160    ;  153	        return return_info;
                           A  2161    .LINE 153
                           A  2162    
0B0708 ED2206              A  2163    	LEA	HL,IX+%6
0B070B ED17                A  2164    	LD	DE,(HL)
0B070D ED22E7              A  2165    	LEA	HL,IX+%FFFFFFE7
0B0710 01050000            A  2166    	LD	BC,5
0B0714 EDB0                A  2167    	LDIR	
0B0716 DD2706              A  2168    	LD	HL,(IX+%6)
0B0719 C3 BD 10 0B         A  2169    	JR	L_96
                           A  2170    ;  154	    }
0B071D                     A  2171    L_46:
                           A  2172    .LINE 154
                           A  2173    
                           A  2174    ;  155	    fo = (FIL * ) mos_getfil(file);
                           A  2175    .LINE 155
                           A  2176    
0B071D DD4EFF              A  2177    	LD	C,(IX+%FFFFFFFF)
0B0720 0600                A  2178    	LD	B,%0
0B0722 C5                  A  2179    	PUSH	BC
0B0723 CD 7D 25 0B         A  2180    	CALL	_mos_getfil
0B0727 C1                  A  2181    	POP	BC
0B0728 DD2FCB              A  2182    	LD	(IX+%FFFFFFCB),HL
                           A  2183    ;  156	
                           A  2184    ;  157	    mos_fread(file, header, 54);
                           A  2185    .LINE 157
                           A  2186    
0B072B 01360000            A  2187    	LD	BC,54
0B072F C5                  A  2188    	PUSH	BC
0B0730 DDE5E1              A  2189    	LD	HL,IX
0B0733 0169FFFF            A  2190    	LD	BC,-151
0B0737 09                  A  2191    	ADD	HL,BC
0B0738 E5C1                A  2192    	LD	BC,HL
0B073A C5                  A  2193    	PUSH	BC
0B073B DD4EFF              A  2194    	LD	C,(IX+%FFFFFFFF)
0B073E 0600                A  2195    	LD	B,%0
0B0740 C5                  A  2196    	PUSH	BC
0B0741 CD 24 25 0B         A  2197    	CALL	_mos_fread
0B0745 C1                  A  2198    	POP	BC
0B0746 C1                  A  2199    	POP	BC
0B0747 C1                  A  2200    	POP	BC
                           A  2201    ;  158	
                           A  2202    ;  159		image_start = * (uint32_t * ) & hea
                           A  2203    .LINE 159
                           A  2204    
0B0748 DDE5FDE1            A  2205    	LD	IY,IX
0B074C 0169FFFF            A  2206    	LD	BC,-151
0B0750 FD09                A  2207    	ADD	IY,BC
0B0752 ED230A              A  2208    	LEA	HL,IY+%A
0B0755 ED07                A  2209    	LD	BC,(HL)
0B0757 23                  A  2210    	INC	HL
0B0758 23                  A  2211    	INC	HL
0B0759 23                  A  2212    	INC	HL
0B075A 7E                  A  2213    	LD	A,(HL)
0B075B DD0FB8              A  2214    	LD	(IX+%FFFFFFB8),BC
0B075E DD77BB              A  2215    	LD	(IX+%FFFFFFBB),A
                           A  2216    ;  160	    biSize = * (uint32_t * ) & header[1
                           A  2217    .LINE 160
                           A  2218    
0B0761 DDE5FDE1            A  2219    	LD	IY,IX
0B0765 0169FFFF            A  2220    	LD	BC,-151
0B0769 FD09                A  2221    	ADD	IY,BC
0B076B ED230E              A  2222    	LEA	HL,IY+%E
0B076E ED07                A  2223    	LD	BC,(HL)
0B0770 23                  A  2224    	INC	HL
0B0771 23                  A  2225    	INC	HL
0B0772 23                  A  2226    	INC	HL
0B0773 7E                  A  2227    	LD	A,(HL)
0B0774 DD0FCE              A  2228    	LD	(IX+%FFFFFFCE),BC
0B0777 DD77D1              A  2229    	LD	(IX+%FFFFFFD1),A
                           A  2230    ;  161	    width = * (INT32 * ) & header[18];
                           A  2231    .LINE 161
                           A  2232    
0B077A DDE5FDE1            A  2233    	LD	IY,IX
0B077E 0169FFFF            A  2234    	LD	BC,-151
0B0782 FD09                A  2235    	ADD	IY,BC
0B0784 ED2312              A  2236    	LEA	HL,IY+%12
0B0787 ED07                A  2237    	LD	BC,(HL)
0B0789 23                  A  2238    	INC	HL
0B078A 23                  A  2239    	INC	HL
0B078B 23                  A  2240    	INC	HL
0B078C 7E                  A  2241    	LD	A,(HL)
0B078D DD0FE3              A  2242    	LD	(IX+%FFFFFFE3),BC
0B0790 DD77E6              A  2243    	LD	(IX+%FFFFFFE6),A
                           A  2244    ;  162	    height = * (INT32 * ) & header[22];
                           A  2245    .LINE 162
                           A  2246    
0B0793 DDE5FDE1            A  2247    	LD	IY,IX
0B0797 0169FFFF            A  2248    	LD	BC,-151
0B079B FD09                A  2249    	ADD	IY,BC
0B079D ED2316              A  2250    	LEA	HL,IY+%16
0B07A0 ED07                A  2251    	LD	BC,(HL)
0B07A2 23                  A  2252    	INC	HL
0B07A3 23                  A  2253    	INC	HL
0B07A4 23                  A  2254    	INC	HL
0B07A5 7E                  A  2255    	LD	A,(HL)
0B07A6 DD0FEC              A  2256    	LD	(IX+%FFFFFFEC),BC
0B07A9 DD77EF              A  2257    	LD	(IX+%FFFFFFEF),A
                           A  2258    ;  163	    bit_depth = * (uint16_t * ) & heade
                           A  2259    .LINE 163
                           A  2260    
0B07AC ED2285              A  2261    	LEA	HL,IX+%FFFFFF85
0B07AF ED07                A  2262    	LD	BC,(HL)
0B07B1 CD 42 29 0B         A  2263    	CALL	__stoiu
0B07B5 E5C1                A  2264    	LD	BC,HL
0B07B7 AF                  A  2265    	XOR	A,A
0B07B8 DD0FF7              A  2266    	LD	(IX+%FFFFFFF7),BC
0B07BB DD77FA              A  2267    	LD	(IX+%FFFFFFFA),A
                           A  2268    ;  164	    color_table_size = * (uint32_t * ) 
                           A  2269    .LINE 164
                           A  2270    
0B07BE ED2297              A  2271    	LEA	HL,IX+%FFFFFF97
0B07C1 ED17                A  2272    	LD	DE,(HL)
0B07C3 23                  A  2273    	INC	HL
0B07C4 23                  A  2274    	INC	HL
0B07C5 23                  A  2275    	INC	HL
0B07C6 7E                  A  2276    	LD	A,(HL)
0B07C7 DD1FD2              A  2277    	LD	(IX+%FFFFFFD2),DE
0B07CA DD77D5              A  2278    	LD	(IX+%FFFFFFD5),A
                           A  2279    ;  165		
                           A  2280    ;  166		
                           A  2281    ;  167	    image_buffer = (char * ) malloc(wid
                           A  2282    .LINE 167
                           A  2283    
0B07CD DD27E3              A  2284    	LD	HL,(IX+%FFFFFFE3)
0B07D0 DD5EE6              A  2285    	LD	E,(IX+%FFFFFFE6)
0B07D3 DD7EFA              A  2286    	LD	A,(IX+%FFFFFFFA)
0B07D6 CD E1 2B 0B         A  2287    	CALL	__lmuls
0B07DA 01080000            A  2288    	LD	BC,8
0B07DE AF                  A  2289    	XOR	A,A
0B07DF CD CE 29 0B         A  2290    	CALL	__ldivs
0B07E3 E5                  A  2291    	PUSH	HL
0B07E4 CD AD 26 0B         A  2292    	CALL	_malloc
0B07E8 C1                  A  2293    	POP	BC
0B07E9 DD2FB5              A  2294    	LD	(IX+%FFFFFFB5),HL
                           A  2295    ;  168	
                           A  2296    ;  169	    if (color_table_size == 0 && bit_de
                           A  2297    .LINE 169
                           A  2298    
0B07EC DD27D2              A  2299    	LD	HL,(IX+%FFFFFFD2)
0B07EF DD5ED5              A  2300    	LD	E,(IX+%FFFFFFD5)
0B07F2 01000000            A  2301    	LD	BC,0
0B07F6 AF                  A  2302    	XOR	A,A
0B07F7 CD 67 2B 0B         A  2303    	CALL	__lcmpu
0B07FB 20 1C               A  2304    	JR	NZ,L_50
0B07FD DD27F7              A  2305    	LD	HL,(IX+%FFFFFFF7)
0B0800 DD5EFA              A  2306    	LD	E,(IX+%FFFFFFFA)
0B0803 01080000            A  2307    	LD	BC,8
0B0807 AF                  A  2308    	XOR	A,A
0B0808 CD 67 2B 0B         A  2309    	CALL	__lcmps
0B080C 20 0B               A  2310    	JR	NZ,L_50
                           A  2311    ;  170	        color_table_size = 256;
                           A  2312    .LINE 170
                           A  2313    
0B080E 01000100            A  2314    	LD	BC,256
0B0812 AF                  A  2315    	XOR	A,A
0B0813 DD0FD2              A  2316    	LD	(IX+%FFFFFFD2),BC
0B0816 DD77D5              A  2317    	LD	(IX+%FFFFFFD5),A
                           A  2318    ;  171	    }
0B0819                     A  2319    L_50:
                           A  2320    .LINE 171
                           A  2321    
                           A  2322    ;  172	
                           A  2323    ;  173	    if (color_table_size > 0) mos_fread
                           A  2324    .LINE 173
                           A  2325    
0B0819 B7                  A  2326    	OR	A,A
0B081A ED62                A  2327    	SBC	HL,HL
0B081C 1E00                A  2328    	LD	E,%0
0B081E DD07D2              A  2329    	LD	BC,(IX+%FFFFFFD2)
0B0821 DD7ED5              A  2330    	LD	A,(IX+%FFFFFFD5)
0B0824 CD 67 2B 0B         A  2331    	CALL	__lcmpu
0B0828 30 1E               A  2332    	JR	NC,L_67
0B082A DD27D2              A  2333    	LD	HL,(IX+%FFFFFFD2)
0B082D 29                  A  2334    	ADD	HL,HL
0B082E 29                  A  2335    	ADD	HL,HL
0B082F E5                  A  2336    	PUSH	HL
0B0830 DDE5E1              A  2337    	LD	HL,IX
0B0833 0169FBFF            A  2338    	LD	BC,-1175
0B0837 09                  A  2339    	ADD	HL,BC
0B0838 E5C1                A  2340    	LD	BC,HL
0B083A C5                  A  2341    	PUSH	BC
0B083B DD4EFF              A  2342    	LD	C,(IX+%FFFFFFFF)
0B083E 0600                A  2343    	LD	B,%0
0B0840 C5                  A  2344    	PUSH	BC
0B0841 CD 24 25 0B         A  2345    	CALL	_mos_fread
0B0845 C1                  A  2346    	POP	BC
0B0846 C1                  A  2347    	POP	BC
0B0847 C1                  A  2348    	POP	BC
0B0848                     A  2349    L_67:
                           A  2350    ;  174	
                           A  2351    ;  175	    // else if (biSize > 40) { //If for
                           A  2352    ;  176	
                           A  2353    ;  177	        // i = biSize - 40;
                           A  2354    ;  178	        // while (i--> 0) {
                           A  2355    ;  179	            // mos_fgetc(file);
                           A  2356    ;  180	        // }
                           A  2357    ;  181	
                           A  2358    ;  182	    // }
                           A  2359    ;  183		
                           A  2360    ;  184		if (biSize > 40) {
                           A  2361    .LINE 184
                           A  2362    
0B0848 21280000            A  2363    	LD	HL,40
0B084C 1E00                A  2364    	LD	E,%0
0B084E DD07CE              A  2365    	LD	BC,(IX+%FFFFFFCE)
0B0851 DD7ED1              A  2366    	LD	A,(IX+%FFFFFFD1)
0B0854 CD 67 2B 0B         A  2367    	CALL	__lcmpu
0B0858 D2 0E 0A 0B         A  2368    	JR	NC,L_71
                           A  2369    ;  185			// If BITMAPV4HEADER or above, 
                           A  2370    ;  186			if (biSize >= 108) {
                           A  2371    .LINE 186
                           A  2372    
0B085C DD27CE              A  2373    	LD	HL,(IX+%FFFFFFCE)
0B085F DD5ED1              A  2374    	LD	E,(IX+%FFFFFFD1)
0B0862 016C0000            A  2375    	LD	BC,108
0B0866 AF                  A  2376    	XOR	A,A
0B0867 CD 67 2B 0B         A  2377    	CALL	__lcmpu
0B086B DA B8 09 0B         A  2378    	JR	C,L_65
                           A  2379    ;  187				char redMask[4], greenMask[
                           A  2380    ;  188				mos_fread(file, redMask, 4)
                           A  2381    .LINE 188
                           A  2382    
0B086F 01040000            A  2383    	LD	BC,4
0B0873 C5                  A  2384    	PUSH	BC
0B0874 ED65A2              A  2385    	PEA	IX+%FFFFFFA2
0B0877 DD4EFF              A  2386    	LD	C,(IX+%FFFFFFFF)
0B087A 0600                A  2387    	LD	B,%0
0B087C C5                  A  2388    	PUSH	BC
0B087D CD 24 25 0B         A  2389    	CALL	_mos_fread
0B0881 C1                  A  2390    	POP	BC
0B0882 C1                  A  2391    	POP	BC
0B0883 C1                  A  2392    	POP	BC
                           A  2393    ;  189				mos_fread(file, greenMask, 
                           A  2394    .LINE 189
                           A  2395    
0B0884 01040000            A  2396    	LD	BC,4
0B0888 C5                  A  2397    	PUSH	BC
0B0889 ED65B1              A  2398    	PEA	IX+%FFFFFFB1
0B088C DD4EFF              A  2399    	LD	C,(IX+%FFFFFFFF)
0B088F 0600                A  2400    	LD	B,%0
0B0891 C5                  A  2401    	PUSH	BC
0B0892 CD 24 25 0B         A  2402    	CALL	_mos_fread
0B0896 C1                  A  2403    	POP	BC
0B0897 C1                  A  2404    	POP	BC
0B0898 C1                  A  2405    	POP	BC
                           A  2406    ;  190				mos_fread(file, blueMask, 4
                           A  2407    .LINE 190
                           A  2408    
0B0899 01040000            A  2409    	LD	BC,4
0B089D C5                  A  2410    	PUSH	BC
0B089E ED65AA              A  2411    	PEA	IX+%FFFFFFAA
0B08A1 DD4EFF              A  2412    	LD	C,(IX+%FFFFFFFF)
0B08A4 0600                A  2413    	LD	B,%0
0B08A6 C5                  A  2414    	PUSH	BC
0B08A7 CD 24 25 0B         A  2415    	CALL	_mos_fread
0B08AB C1                  A  2416    	POP	BC
0B08AC C1                  A  2417    	POP	BC
0B08AD C1                  A  2418    	POP	BC
                           A  2419    ;  191				mos_fread(file, alphaMask, 
                           A  2420    .LINE 191
                           A  2421    
0B08AE 01040000            A  2422    	LD	BC,4
0B08B2 C5                  A  2423    	PUSH	BC
0B08B3 ED65A6              A  2424    	PEA	IX+%FFFFFFA6
0B08B6 DD4EFF              A  2425    	LD	C,(IX+%FFFFFFFF)
0B08B9 0600                A  2426    	LD	B,%0
0B08BB C5                  A  2427    	PUSH	BC
0B08BC CD 24 25 0B         A  2428    	CALL	_mos_fread
0B08C0 C1                  A  2429    	POP	BC
0B08C1 C1                  A  2430    	POP	BC
0B08C2 C1                  A  2431    	POP	BC
                           A  2432    ;  192					
                           A  2433    ;  193				if (!(memcmp(redMask, "\x00
                           A  2434    .LINE 193
                           A  2435    
0B08C3 01040000            A  2436    	LD	BC,4
0B08C7 C5                  A  2437    	PUSH	BC
0B08C8 01 C3 2C 0B         A  2438    	LD	BC,L__42
0B08CC C5                  A  2439    	PUSH	BC
0B08CD ED65A2              A  2440    	PEA	IX+%FFFFFFA2
0B08D0 CD 89 2A 0B         A  2441    	CALL	_memcmp
0B08D4 C1                  A  2442    	POP	BC
0B08D5 C1                  A  2443    	POP	BC
0B08D6 C1                  A  2444    	POP	BC
0B08D7 01000000            A  2445    	LD	BC,0
0B08DB B7                  A  2446    	OR	A,A
0B08DC ED42                A  2447    	SBC	HL,BC
0B08DE 20 57               A  2448    	JR	NZ,L_54
                           A  2449    ;  194					  memcmp(greenMask, "\x
                           A  2450    .LINE 194
                           A  2451    
0B08E0 01040000            A  2452    	LD	BC,4
0B08E4 C5                  A  2453    	PUSH	BC
0B08E5 01 C8 2C 0B         A  2454    	LD	BC,L__44
0B08E9 C5                  A  2455    	PUSH	BC
0B08EA ED65B1              A  2456    	PEA	IX+%FFFFFFB1
0B08ED CD 89 2A 0B         A  2457    	CALL	_memcmp
0B08F1 C1                  A  2458    	POP	BC
0B08F2 C1                  A  2459    	POP	BC
0B08F3 C1                  A  2460    	POP	BC
0B08F4 01000000            A  2461    	LD	BC,0
0B08F8 B7                  A  2462    	OR	A,A
0B08F9 ED42                A  2463    	SBC	HL,BC
0B08FB 20 3A               A  2464    	JR	NZ,L_54
                           A  2465    ;  195					  memcmp(blueMask, "\xF
                           A  2466    .LINE 195
                           A  2467    
0B08FD 01040000            A  2468    	LD	BC,4
0B0901 C5                  A  2469    	PUSH	BC
0B0902 01 CD 2C 0B         A  2470    	LD	BC,L__46
0B0906 C5                  A  2471    	PUSH	BC
0B0907 ED65AA              A  2472    	PEA	IX+%FFFFFFAA
0B090A CD 89 2A 0B         A  2473    	CALL	_memcmp
0B090E C1                  A  2474    	POP	BC
0B090F C1                  A  2475    	POP	BC
0B0910 C1                  A  2476    	POP	BC
0B0911 01000000            A  2477    	LD	BC,0
0B0915 B7                  A  2478    	OR	A,A
0B0916 ED42                A  2479    	SBC	HL,BC
0B0918 20 1D               A  2480    	JR	NZ,L_54
                           A  2481    ;  196					  memcmp(alphaMask, "\x
                           A  2482    .LINE 196
                           A  2483    
0B091A 01040000            A  2484    	LD	BC,4
0B091E C5                  A  2485    	PUSH	BC
0B091F 01 D2 2C 0B         A  2486    	LD	BC,L__48
0B0923 C5                  A  2487    	PUSH	BC
0B0924 ED65A6              A  2488    	PEA	IX+%FFFFFFA6
0B0927 CD 89 2A 0B         A  2489    	CALL	_memcmp
0B092B C1                  A  2490    	POP	BC
0B092C C1                  A  2491    	POP	BC
0B092D C1                  A  2492    	POP	BC
0B092E 01000000            A  2493    	LD	BC,0
0B0932 B7                  A  2494    	OR	A,A
0B0933 ED42                A  2495    	SBC	HL,BC
0B0935 28 33               A  2496    	JR	Z,L_59
0B0937                     A  2497    L_54:
                           A  2498    ;  197					printf("Error: Pixel fo
                           A  2499    .LINE 197
                           A  2500    
0B0937 01 48 29 0B         A  2501    	LD	BC,___print_uputch
0B093B ED43 A2 2C 0B       A  2502    	LD	(___print_xputch),BC
0B0940 01 D7 2C 0B         A  2503    	LD	BC,L__50
0B0944 C5                  A  2504    	PUSH	BC
0B0945 CD AD 27 0B         A  2505    	CALL	___print_sendstring
0B0949 C1                  A  2506    	POP	BC
                           A  2507    ;  198					mos_fclose(file);
                           A  2508    .LINE 198
                           A  2509    
0B094A DD4EFF              A  2510    	LD	C,(IX+%FFFFFFFF)
0B094D 0600                A  2511    	LD	B,%0
0B094F C5                  A  2512    	PUSH	BC
0B0950 CD 0F 24 0B         A  2513    	CALL	_mos_fclose
0B0954 C1                  A  2514    	POP	BC
                           A  2515    ;  199					return return_info;
                           A  2516    .LINE 199
                           A  2517    
0B0955 ED2206              A  2518    	LEA	HL,IX+%6
0B0958 ED17                A  2519    	LD	DE,(HL)
0B095A ED22E7              A  2520    	LEA	HL,IX+%FFFFFFE7
0B095D 01050000            A  2521    	LD	BC,5
0B0961 EDB0                A  2522    	LDIR	
0B0963 DD2706              A  2523    	LD	HL,(IX+%6)
0B0966 C3 BD 10 0B         A  2524    	JR	L_96
                           A  2525    ;  200				}
0B096A                     A  2526    L_59:
                           A  2527    .LINE 200
                           A  2528    
                           A  2529    ;  201					
                           A  2530    ;  202					// Skip remaining extra
                           A  2531    ;  203					for (i = biSize - 108; 
                           A  2532    .LINE 203
                           A  2533    
0B096A DD27CE              A  2534    	LD	HL,(IX+%FFFFFFCE)
0B096D DD5ED1              A  2535    	LD	E,(IX+%FFFFFFD1)
0B0970 0194FFFF            A  2536    	LD	BC,16777108
0B0974 3EFF                A  2537    	LD	A,%FF
0B0976 CD A2 25 0B         A  2538    	CALL	__ladd
0B097A DD2FF3              A  2539    	LD	(IX+%FFFFFFF3),HL
0B097D DD73F6              A  2540    	LD	(IX+%FFFFFFF6),E
0B0980 18 21               A  2541    	JR	L_58
0B0982                     A  2542    L_56:
                           A  2543    ;  204						mos_fgetc(file);
                           A  2544    .LINE 204
                           A  2545    
0B0982 DD4EFF              A  2546    	LD	C,(IX+%FFFFFFFF)
0B0985 0600                A  2547    	LD	B,%0
0B0987 C5                  A  2548    	PUSH	BC
0B0988 CD 24 24 0B         A  2549    	CALL	_mos_fgetc
0B098C C1                  A  2550    	POP	BC
0B098D DD27F3              A  2551    	LD	HL,(IX+%FFFFFFF3)
0B0990 DD5EF6              A  2552    	LD	E,(IX+%FFFFFFF6)
0B0993 01FFFFFF            A  2553    	LD	BC,16777215
0B0997 3EFF                A  2554    	LD	A,%FF
0B0999 CD A2 25 0B         A  2555    	CALL	__ladd
0B099D DD2FF3              A  2556    	LD	(IX+%FFFFFFF3),HL
0B09A0 DD73F6              A  2557    	LD	(IX+%FFFFFFF6),E
                           A  2558    ;  205					}
0B09A3                     A  2559    L_58:
                           A  2560    .LINE 205
                           A  2561    
0B09A3 B7                  A  2562    	OR	A,A
0B09A4 ED62                A  2563    	SBC	HL,HL
0B09A6 1E00                A  2564    	LD	E,%0
0B09A8 DD07F3              A  2565    	LD	BC,(IX+%FFFFFFF3)
0B09AB DD7EF6              A  2566    	LD	A,(IX+%FFFFFFF6)
0B09AE CD 67 2B 0B         A  2567    	CALL	__lcmps
0B09B2 FA 82 09 0B         A  2568    	JP	M,L_56
0B09B6 18 56               A  2569    	JR	L_71
                           A  2570    ;  206			} else {
0B09B8                     A  2571    L_65:
                           A  2572    .LINE 206
                           A  2573    
                           A  2574    ;  207				// Skip all extra header by
                           A  2575    ;  208				for (i = biSize - 40; i > 0
                           A  2576    .LINE 208
                           A  2577    
0B09B8 DD27CE              A  2578    	LD	HL,(IX+%FFFFFFCE)
0B09BB DD5ED1              A  2579    	LD	E,(IX+%FFFFFFD1)
0B09BE 01D8FFFF            A  2580    	LD	BC,16777176
0B09C2 3EFF                A  2581    	LD	A,%FF
0B09C4 CD A2 25 0B         A  2582    	CALL	__ladd
0B09C8 DD2FF3              A  2583    	LD	(IX+%FFFFFFF3),HL
0B09CB DD73F6              A  2584    	LD	(IX+%FFFFFFF6),E
0B09CE 18 21               A  2585    	JR	L_63
0B09D0                     A  2586    L_61:
                           A  2587    ;  209					mos_fgetc(file);
                           A  2588    .LINE 209
                           A  2589    
0B09D0 DD4EFF              A  2590    	LD	C,(IX+%FFFFFFFF)
0B09D3 0600                A  2591    	LD	B,%0
0B09D5 C5                  A  2592    	PUSH	BC
0B09D6 CD 24 24 0B         A  2593    	CALL	_mos_fgetc
0B09DA C1                  A  2594    	POP	BC
0B09DB DD27F3              A  2595    	LD	HL,(IX+%FFFFFFF3)
0B09DE DD5EF6              A  2596    	LD	E,(IX+%FFFFFFF6)
0B09E1 01FFFFFF            A  2597    	LD	BC,16777215
0B09E5 3EFF                A  2598    	LD	A,%FF
0B09E7 CD A2 25 0B         A  2599    	CALL	__ladd
0B09EB DD2FF3              A  2600    	LD	(IX+%FFFFFFF3),HL
0B09EE DD73F6              A  2601    	LD	(IX+%FFFFFFF6),E
                           A  2602    ;  210				}
0B09F1                     A  2603    L_63:
                           A  2604    .LINE 210
                           A  2605    
0B09F1 B7                  A  2606    	OR	A,A
0B09F2 ED62                A  2607    	SBC	HL,HL
0B09F4 1E00                A  2608    	LD	E,%0
0B09F6 DD07F3              A  2609    	LD	BC,(IX+%FFFFFFF3)
0B09F9 DD7EF6              A  2610    	LD	A,(IX+%FFFFFFF6)
0B09FC CD 67 2B 0B         A  2611    	CALL	__lcmps
0B0A00 FA 0A 0A 0B         A  2612    	JP	M,L__64
0B0A04 EA D0 09 0B         A  2613    	JP	PE,L_61
0B0A08 18 04               A  2614    	JR	L__65
0B0A0A                     A  2615    L__64:
0B0A0A E2 D0 09 0B         A  2616    	JP	PO,L_61
0B0A0E                     A  2617    L__65:
                           A  2618    ;  211			}
                           A  2619    ;  212		}	
0B0A0E                     A  2620    L_71:
                           A  2621    .LINE 212
                           A  2622    
                           A  2623    ;  213	
                           A  2624    ;  214	    if ((bit_depth != 32) && (bit_depth
                           A  2625    .LINE 214
                           A  2626    
0B0A0E DD27F7              A  2627    	LD	HL,(IX+%FFFFFFF7)
0B0A11 DD5EFA              A  2628    	LD	E,(IX+%FFFFFFFA)
0B0A14 01200000            A  2629    	LD	BC,32
0B0A18 AF                  A  2630    	XOR	A,A
0B0A19 CD 67 2B 0B         A  2631    	CALL	__lcmps
0B0A1D 28 55               A  2632    	JR	Z,L_72
0B0A1F DD27F7              A  2633    	LD	HL,(IX+%FFFFFFF7)
0B0A22 DD5EFA              A  2634    	LD	E,(IX+%FFFFFFFA)
0B0A25 01180000            A  2635    	LD	BC,24
0B0A29 AF                  A  2636    	XOR	A,A
0B0A2A CD 67 2B 0B         A  2637    	CALL	__lcmps
0B0A2E 28 44               A  2638    	JR	Z,L_72
0B0A30 DD27F7              A  2639    	LD	HL,(IX+%FFFFFFF7)
0B0A33 DD5EFA              A  2640    	LD	E,(IX+%FFFFFFFA)
0B0A36 01080000            A  2641    	LD	BC,8
0B0A3A AF                  A  2642    	XOR	A,A
0B0A3B CD 67 2B 0B         A  2643    	CALL	__lcmps
0B0A3F 28 33               A  2644    	JR	Z,L_72
                           A  2645    ;  215	        printf("Error: unsupported bit 
                           A  2646    .LINE 215
                           A  2647    
0B0A41 01 48 29 0B         A  2648    	LD	BC,___print_uputch
0B0A45 ED43 A2 2C 0B       A  2649    	LD	(___print_xputch),BC
0B0A4A 01 0B 2D 0B         A  2650    	LD	BC,L__56
0B0A4E C5                  A  2651    	PUSH	BC
0B0A4F CD AD 27 0B         A  2652    	CALL	___print_sendstring
0B0A53 C1                  A  2653    	POP	BC
                           A  2654    ;  216	        mos_fclose(file);
                           A  2655    .LINE 216
                           A  2656    
0B0A54 DD4EFF              A  2657    	LD	C,(IX+%FFFFFFFF)
0B0A57 0600                A  2658    	LD	B,%0
0B0A59 C5                  A  2659    	PUSH	BC
0B0A5A CD 0F 24 0B         A  2660    	CALL	_mos_fclose
0B0A5E C1                  A  2661    	POP	BC
                           A  2662    ;  217	        return return_info;
                           A  2663    .LINE 217
                           A  2664    
0B0A5F ED2206              A  2665    	LEA	HL,IX+%6
0B0A62 ED17                A  2666    	LD	DE,(HL)
0B0A64 ED22E7              A  2667    	LEA	HL,IX+%FFFFFFE7
0B0A67 01050000            A  2668    	LD	BC,5
0B0A6B EDB0                A  2669    	LDIR	
0B0A6D DD2706              A  2670    	LD	HL,(IX+%6)
0B0A70 C3 BD 10 0B         A  2671    	JR	L_96
                           A  2672    ;  218	    }
0B0A74                     A  2673    L_72:
                           A  2674    .LINE 218
                           A  2675    
                           A  2676    ;  219	
                           A  2677    ;  220	    row_padding = (4 - (width * (bit_de
                           A  2678    .LINE 220
                           A  2679    
0B0A74 DD27F7              A  2680    	LD	HL,(IX+%FFFFFFF7)
0B0A77 DD5EFA              A  2681    	LD	E,(IX+%FFFFFFFA)
0B0A7A 01080000            A  2682    	LD	BC,8
0B0A7E AF                  A  2683    	XOR	A,A
0B0A7F CD CE 29 0B         A  2684    	CALL	__ldivs
0B0A83 DD07E3              A  2685    	LD	BC,(IX+%FFFFFFE3)
0B0A86 DD7EE6              A  2686    	LD	A,(IX+%FFFFFFE6)
0B0A89 CD E1 2B 0B         A  2687    	CALL	__lmuls
0B0A8D 01040000            A  2688    	LD	BC,4
0B0A91 AF                  A  2689    	XOR	A,A
0B0A92 CD 86 2B 0B         A  2690    	CALL	__lrems
0B0A96 7B                  A  2691    	LD	A,E
0B0A97 E5C1                A  2692    	LD	BC,HL
0B0A99 21040000            A  2693    	LD	HL,4
0B0A9D 1E00                A  2694    	LD	E,%0
0B0A9F CD 7D 2A 0B         A  2695    	CALL	__lsub
0B0AA3 01040000            A  2696    	LD	BC,4
0B0AA7 AF                  A  2697    	XOR	A,A
0B0AA8 CD 86 2B 0B         A  2698    	CALL	__lrems
0B0AAC DD2FDB              A  2699    	LD	(IX+%FFFFFFDB),HL
0B0AAF DD73DE              A  2700    	LD	(IX+%FFFFFFDE),E
                           A  2701    ;  221	
                           A  2702    ;  222		//clear_buffer(slot);
                           A  2703    ;  223		
                           A  2704    ;  224	    vdp_bitmapSelect(slot);
                           A  2705    .LINE 224
                           A  2706    
0B0AB2 DD4E0C              A  2707    	LD	C,(IX+%C)
0B0AB5 0600                A  2708    	LD	B,%0
0B0AB7 C5                  A  2709    	PUSH	BC
0B0AB8 CD 3E 1A 0B         A  2710    	CALL	_vdp_bitmapSelect
0B0ABC C1                  A  2711    	POP	BC
                           A  2712    ;  225	    putch(23); // vdu_sys
                           A  2713    .LINE 225
                           A  2714    
0B0ABD 01170000            A  2715    	LD	BC,23
0B0AC1 C5                  A  2716    	PUSH	BC
0B0AC2 CD 9F 21 0B         A  2717    	CALL	_putch
0B0AC6 C1                  A  2718    	POP	BC
                           A  2719    ;  226	    putch(27); // sprite command
                           A  2720    .LINE 226
                           A  2721    
0B0AC7 011B0000            A  2722    	LD	BC,27
0B0ACB C5                  A  2723    	PUSH	BC
0B0ACC CD 9F 21 0B         A  2724    	CALL	_putch
0B0AD0 C1                  A  2725    	POP	BC
                           A  2726    ;  227	    putch(1); // send data to selected 
                           A  2727    .LINE 227
                           A  2728    
0B0AD1 01010000            A  2729    	LD	BC,1
0B0AD5 C5                  A  2730    	PUSH	BC
0B0AD6 CD 9F 21 0B         A  2731    	CALL	_putch
0B0ADA C1                  A  2732    	POP	BC
                           A  2733    ;  228	
                           A  2734    ;  229	    write16bit(width);
                           A  2735    .LINE 229
                           A  2736    
0B0ADB DD07E3              A  2737    	LD	BC,(IX+%FFFFFFE3)
0B0ADE C5                  A  2738    	PUSH	BC
0B0ADF CD DD 15 0B         A  2739    	CALL	_write16bit
0B0AE3 C1                  A  2740    	POP	BC
                           A  2741    ;  230	    write16bit(height);
                           A  2742    .LINE 230
                           A  2743    
0B0AE4 DD07EC              A  2744    	LD	BC,(IX+%FFFFFFEC)
0B0AE7 C5                  A  2745    	PUSH	BC
0B0AE8 CD DD 15 0B         A  2746    	CALL	_write16bit
0B0AEC C1                  A  2747    	POP	BC
                           A  2748    ;  231		
                           A  2749    ;  232	    if (bit_depth == 8) {
                           A  2750    .LINE 232
                           A  2751    
0B0AED DD27F7              A  2752    	LD	HL,(IX+%FFFFFFF7)
0B0AF0 DD5EFA              A  2753    	LD	E,(IX+%FFFFFFFA)
0B0AF3 01080000            A  2754    	LD	BC,8
0B0AF7 AF                  A  2755    	XOR	A,A
0B0AF8 CD 67 2B 0B         A  2756    	CALL	__lcmps
0B0AFC C2 0F 0D 0B         A  2757    	JR	NZ,L_94
                           A  2758    ;  233			uint8_t a = 0xFF;
                           A  2759    ;  234			int non_pad_row = width * bit_d
                           A  2760    .LINE 234
                           A  2761    
0B0B00 DD27E3              A  2762    	LD	HL,(IX+%FFFFFFE3)
0B0B03 DD5EE6              A  2763    	LD	E,(IX+%FFFFFFE6)
0B0B06 DD07F7              A  2764    	LD	BC,(IX+%FFFFFFF7)
0B0B09 DD7EFA              A  2765    	LD	A,(IX+%FFFFFFFA)
0B0B0C CD E1 2B 0B         A  2766    	CALL	__lmuls
0B0B10 01080000            A  2767    	LD	BC,8
0B0B14 AF                  A  2768    	XOR	A,A
0B0B15 CD CE 29 0B         A  2769    	CALL	__ldivs
0B0B19 DD2FC1              A  2770    	LD	(IX+%FFFFFFC1),HL
                           A  2771    ;  235			mos_flseek(file, image_start + 
                           A  2772    .LINE 235
                           A  2773    
0B0B1C E5C1                A  2774    	LD	BC,HL
0B0B1E CD 60 2B 0B         A  2775    	CALL	__itol
0B0B22 DD27DB              A  2776    	LD	HL,(IX+%FFFFFFDB)
0B0B25 DD5EDE              A  2777    	LD	E,(IX+%FFFFFFDE)
0B0B28 CD A2 25 0B         A  2778    	CALL	__ladd
0B0B2C 7B                  A  2779    	LD	A,E
0B0B2D FD2159FB FF         A  2780    	LD	IY,-1191	; spill
0B0B32 DDE5C1              A  2781    	LD	BC,IX	; spill
0B0B35 FD09                A  2782    	ADD	IY,BC
0B0B37 FD7700              A  2783    	LD	(IY),A
0B0B3A 0156FBFF            A  2784    	LD	BC,-1194	; spill
0B0B3E CD 98 27 0B         A  2785    	CALL	__istix
0B0B42 DD27EC              A  2786    	LD	HL,(IX+%FFFFFFEC)
0B0B45 DD5EEF              A  2787    	LD	E,(IX+%FFFFFFEF)
0B0B48 01010000            A  2788    	LD	BC,1
0B0B4C AF                  A  2789    	XOR	A,A
0B0B4D CD 7D 2A 0B         A  2790    	CALL	__lsub
0B0B51 7B                  A  2791    	LD	A,E
0B0B52 E5C1                A  2792    	LD	BC,HL
0B0B54 C5                  A  2793    	PUSH	BC
0B0B55 FD2165FB FF         A  2794    	LD	IY,-1179	; spill
0B0B5A DDE5C1              A  2795    	LD	BC,IX	; spill
0B0B5D FD09                A  2796    	ADD	IY,BC
0B0B5F FD7700              A  2797    	LD	(IY),A
0B0B62 FD2159FB FF         A  2798    	LD	IY,-1191	; unspill
0B0B67 DDE5C1              A  2799    	LD	BC,IX	; unspill
0B0B6A FD09                A  2800    	ADD	IY,BC
0B0B6C FD7E00              A  2801    	LD	A,(IY)
0B0B6F C1                  A  2802    	POP	BC
0B0B70 5F                  A  2803    	LD	E,A
0B0B71 C5                  A  2804    	PUSH	BC
0B0B72 FD2165FB FF         A  2805    	LD	IY,-1179	; unspill
0B0B77 DDE5C1              A  2806    	LD	BC,IX	; unspill
0B0B7A FD09                A  2807    	ADD	IY,BC
0B0B7C FD7E00              A  2808    	LD	A,(IY)
0B0B7F C1                  A  2809    	POP	BC
0B0B80 C5E1                A  2810    	LD	HL,BC
0B0B82 0161FBFF            A  2811    	LD	BC,-1183	; spill
0B0B86 CD 98 27 0B         A  2812    	CALL	__istix
0B0B8A 0156FBFF            A  2813    	LD	BC,-1194	; unspill
0B0B8E CD 4E 2C 0B         A  2814    	CALL	__ildix
0B0B92 E5C1                A  2815    	LD	BC,HL
0B0B94 C5E1                A  2816    	LD	HL,BC
0B0B96 0161FBFF            A  2817    	LD	BC,-1183	; unspill
0B0B9A E5                  A  2818    	PUSH	HL
0B0B9B CD 4E 2C 0B         A  2819    	CALL	__ildix
0B0B9F E5C1                A  2820    	LD	BC,HL
0B0BA1 E1                  A  2821    	POP	HL
0B0BA2 CD E1 2B 0B         A  2822    	CALL	__lmulu
0B0BA6 DD07B8              A  2823    	LD	BC,(IX+%FFFFFFB8)
0B0BA9 DD7EBB              A  2824    	LD	A,(IX+%FFFFFFBB)
0B0BAC CD A2 25 0B         A  2825    	CALL	__ladd
0B0BB0 4B                  A  2826    	LD	C,E
0B0BB1 0600                A  2827    	LD	B,%0
0B0BB3 C5                  A  2828    	PUSH	BC
0B0BB4 E5                  A  2829    	PUSH	HL
0B0BB5 DD4EFF              A  2830    	LD	C,(IX+%FFFFFFFF)
0B0BB8 C5                  A  2831    	PUSH	BC
0B0BB9 CD 5E 25 0B         A  2832    	CALL	_mos_flseek
0B0BBD C1                  A  2833    	POP	BC
0B0BBE C1                  A  2834    	POP	BC
0B0BBF C1                  A  2835    	POP	BC
                           A  2836    ;  236			
                           A  2837    ;  237	        for (y = height - 1; y >= 0; y-
                           A  2838    .LINE 237
                           A  2839    
0B0BC0 DD27EC              A  2840    	LD	HL,(IX+%FFFFFFEC)
0B0BC3 DD5EEF              A  2841    	LD	E,(IX+%FFFFFFEF)
0B0BC6 01FFFFFF            A  2842    	LD	BC,16777215
0B0BCA 3EFF                A  2843    	LD	A,%FF
0B0BCC CD A2 25 0B         A  2844    	CALL	__ladd
0B0BD0 DD2FFB              A  2845    	LD	(IX+%FFFFFFFB),HL
0B0BD3 DD73FE              A  2846    	LD	(IX+%FFFFFFFE),E
0B0BD6 C3 EE 0C 0B         A  2847    	JR	L_81
0B0BDA                     A  2848    L_79:
                           A  2849    ;  238	            for (x = 0; x < width; x++)
                           A  2850    .LINE 238
                           A  2851    
0B0BDA 01000000            A  2852    	LD	BC,0
0B0BDE AF                  A  2853    	XOR	A,A
0B0BDF DD0FC7              A  2854    	LD	(IX+%FFFFFFC7),BC
0B0BE2 DD77CA              A  2855    	LD	(IX+%FFFFFFCA),A
0B0BE5 C3 83 0C 0B         A  2856    	JR	L_77
0B0BE9                     A  2857    L_75:
                           A  2858    ;  239	
                           A  2859    ;  240	                index = (char) mos_fget
                           A  2860    .LINE 240
                           A  2861    
0B0BE9 DD4EFF              A  2862    	LD	C,(IX+%FFFFFFFF)
0B0BEC 0600                A  2863    	LD	B,%0
0B0BEE C5                  A  2864    	PUSH	BC
0B0BEF CD 24 24 0B         A  2865    	CALL	_mos_fgetc
0B0BF3 C1                  A  2866    	POP	BC
0B0BF4 DD77D6              A  2867    	LD	(IX+%FFFFFFD6),A
                           A  2868    ;  241	                b = color_table[index *
                           A  2869    .LINE 241
                           A  2870    
0B0BF7 B7ED62              A  2871    	UEXT	HL
0B0BFA 6F                  A  2872    	LD	L,A
0B0BFB 29                  A  2873    	ADD	HL,HL
0B0BFC 29                  A  2874    	ADD	HL,HL
0B0BFD E5C1                A  2875    	LD	BC,HL
0B0BFF DDE5E1              A  2876    	LD	HL,IX
0B0C02 1169FBFF            A  2877    	LD	DE,-1175
0B0C06 19                  A  2878    	ADD	HL,DE
0B0C07 09                  A  2879    	ADD	HL,BC
0B0C08 FD2166FB FF         A  2880    	LD	IY,-1178
0B0C0D DDE5C1              A  2881    	LD	BC,IX
0B0C10 FD09                A  2882    	ADD	IY,BC
0B0C12 FD2F00              A  2883    	LD	(IY),HL
0B0C15 2166FBFF            A  2884    	LD	HL,-1178
0B0C19 DDE5C1              A  2885    	LD	BC,IX
0B0C1C 09                  A  2886    	ADD	HL,BC
0B0C1D ED27                A  2887    	LD	HL,(HL)
0B0C1F 7E                  A  2888    	LD	A,(HL)
0B0C20 DD77C4              A  2889    	LD	(IX+%FFFFFFC4),A
                           A  2890    ;  242	                g = color_table[index *
                           A  2891    .LINE 242
                           A  2892    
0B0C23 2166FBFF            A  2893    	LD	HL,-1178
0B0C27 DDE5C1              A  2894    	LD	BC,IX
0B0C2A 09                  A  2895    	ADD	HL,BC
0B0C2B ED27                A  2896    	LD	HL,(HL)
0B0C2D 23                  A  2897    	INC	HL
0B0C2E 7E                  A  2898    	LD	A,(HL)
0B0C2F DD77C5              A  2899    	LD	(IX+%FFFFFFC5),A
                           A  2900    ;  243	                r = color_table[index *
                           A  2901    .LINE 243
                           A  2902    
0B0C32 2166FBFF            A  2903    	LD	HL,-1178
0B0C36 DDE5C1              A  2904    	LD	BC,IX
0B0C39 09                  A  2905    	ADD	HL,BC
0B0C3A ED31                A  2906    	LD	IY,(HL)
0B0C3C ED2302              A  2907    	LEA	HL,IY+%2
0B0C3F 7E                  A  2908    	LD	A,(HL)
0B0C40 DD77C6              A  2909    	LD	(IX+%FFFFFFC6),A
                           A  2910    ;  244					
                           A  2911    ;  245					putch(r);
                           A  2912    .LINE 245
                           A  2913    
0B0C43 B7ED62              A  2914    	UEXT	HL
0B0C46 6F                  A  2915    	LD	L,A
0B0C47 E5                  A  2916    	PUSH	HL
0B0C48 CD 9F 21 0B         A  2917    	CALL	_putch
0B0C4C C1                  A  2918    	POP	BC
                           A  2919    ;  246					putch(g);
                           A  2920    .LINE 246
                           A  2921    
0B0C4D DD7EC5              A  2922    	LD	A,(IX+%FFFFFFC5)
0B0C50 B7ED62              A  2923    	UEXT	HL
0B0C53 6F                  A  2924    	LD	L,A
0B0C54 E5                  A  2925    	PUSH	HL
0B0C55 CD 9F 21 0B         A  2926    	CALL	_putch
0B0C59 C1                  A  2927    	POP	BC
                           A  2928    ;  247					putch(b);
                           A  2929    .LINE 247
                           A  2930    
0B0C5A DD7EC4              A  2931    	LD	A,(IX+%FFFFFFC4)
0B0C5D B7ED62              A  2932    	UEXT	HL
0B0C60 6F                  A  2933    	LD	L,A
0B0C61 E5                  A  2934    	PUSH	HL
0B0C62 CD 9F 21 0B         A  2935    	CALL	_putch
0B0C66 C1                  A  2936    	POP	BC
                           A  2937    ;  248					putch(0xFF);
                           A  2938    .LINE 248
                           A  2939    
0B0C67 01FF0000            A  2940    	LD	BC,255
0B0C6B C5                  A  2941    	PUSH	BC
0B0C6C CD 9F 21 0B         A  2942    	CALL	_putch
0B0C70 C1                  A  2943    	POP	BC
0B0C71 DD27C7              A  2944    	LD	HL,(IX+%FFFFFFC7)
0B0C74 DD5ECA              A  2945    	LD	E,(IX+%FFFFFFCA)
0B0C77 3E01                A  2946    	LD	A,%1
0B0C79 CD 93 25 0B         A  2947    	CALL	__ladd_b
0B0C7D DD2FC7              A  2948    	LD	(IX+%FFFFFFC7),HL
0B0C80 DD73CA              A  2949    	LD	(IX+%FFFFFFCA),E
                           A  2950    ;  249					
                           A  2951    ;  250	
                           A  2952    ;  251	            }
0B0C83                     A  2953    L_77:
                           A  2954    .LINE 251
                           A  2955    
0B0C83 DD27C7              A  2956    	LD	HL,(IX+%FFFFFFC7)
0B0C86 DD5ECA              A  2957    	LD	E,(IX+%FFFFFFCA)
0B0C89 DD07E3              A  2958    	LD	BC,(IX+%FFFFFFE3)
0B0C8C DD7EE6              A  2959    	LD	A,(IX+%FFFFFFE6)
0B0C8F CD 67 2B 0B         A  2960    	CALL	__lcmps
0B0C93 FA 9D 0C 0B         A  2961    	JP	M,L__66
0B0C97 EA E9 0B 0B         A  2962    	JP	PE,L_75
0B0C9B 18 04               A  2963    	JR	L__67
0B0C9D                     A  2964    L__66:
0B0C9D E2 E9 0B 0B         A  2965    	JP	PO,L_75
0B0CA1                     A  2966    L__67:
                           A  2967    ;  252				
                           A  2968    ;  253				//add_stream_to_buffer(slot
                           A  2969    ;  254				mos_flseek(file, fo -> fptr
                           A  2970    .LINE 254
                           A  2971    
0B0CA1 DD27C1              A  2972    	LD	HL,(IX+%FFFFFFC1)
0B0CA4 29                  A  2973    	ADD	HL,HL
0B0CA5 E5C1                A  2974    	LD	BC,HL
0B0CA7 CD 60 2B 0B         A  2975    	CALL	__itol
0B0CAB 5F                  A  2976    	LD	E,A
0B0CAC C5E1                A  2977    	LD	HL,BC
0B0CAE DD07DB              A  2978    	LD	BC,(IX+%FFFFFFDB)
0B0CB1 DD7EDE              A  2979    	LD	A,(IX+%FFFFFFDE)
0B0CB4 CD A2 25 0B         A  2980    	CALL	__ladd
0B0CB8 7B                  A  2981    	LD	A,E
0B0CB9 E5C1                A  2982    	LD	BC,HL
0B0CBB DD31CB              A  2983    	LD	IY,(IX+%FFFFFFCB)
0B0CBE FD2711              A  2984    	LD	HL,(IY+%11)
0B0CC1 FD5E14              A  2985    	LD	E,(IY+%14)
0B0CC4 CD 7D 2A 0B         A  2986    	CALL	__lsub
0B0CC8 4B                  A  2987    	LD	C,E
0B0CC9 0600                A  2988    	LD	B,%0
0B0CCB C5                  A  2989    	PUSH	BC
0B0CCC E5                  A  2990    	PUSH	HL
0B0CCD DD4EFF              A  2991    	LD	C,(IX+%FFFFFFFF)
0B0CD0 C5                  A  2992    	PUSH	BC
0B0CD1 CD 5E 25 0B         A  2993    	CALL	_mos_flseek
0B0CD5 C1                  A  2994    	POP	BC
0B0CD6 C1                  A  2995    	POP	BC
0B0CD7 C1                  A  2996    	POP	BC
0B0CD8 DD27FB              A  2997    	LD	HL,(IX+%FFFFFFFB)
0B0CDB DD5EFE              A  2998    	LD	E,(IX+%FFFFFFFE)
0B0CDE 01FFFFFF            A  2999    	LD	BC,16777215
0B0CE2 3EFF                A  3000    	LD	A,%FF
0B0CE4 CD A2 25 0B         A  3001    	CALL	__ladd
0B0CE8 DD2FFB              A  3002    	LD	(IX+%FFFFFFFB),HL
0B0CEB DD73FE              A  3003    	LD	(IX+%FFFFFFFE),E
                           A  3004    ;  255	            // for (i = 0; i < row_padd
                           A  3005    ;  256	                // mos_fgetc(file);
                           A  3006    ;  257	            // }
                           A  3007    ;  258	
                           A  3008    ;  259	        }
0B0CEE                     A  3009    L_81:
                           A  3010    .LINE 259
                           A  3011    
0B0CEE DD27FB              A  3012    	LD	HL,(IX+%FFFFFFFB)
0B0CF1 DD5EFE              A  3013    	LD	E,(IX+%FFFFFFFE)
0B0CF4 01000000            A  3014    	LD	BC,0
0B0CF8 AF                  A  3015    	XOR	A,A
0B0CF9 CD 67 2B 0B         A  3016    	CALL	__lcmps
0B0CFD F2 07 0D 0B         A  3017    	JP	P,L__68
0B0D01 EA DA 0B 0B         A  3018    	JP	PE,L_79
0B0D05 18 04               A  3019    	JR	L__69
0B0D07                     A  3020    L__68:
0B0D07 E2 DA 0B 0B         A  3021    	JP	PO,L_79
0B0D0B                     A  3022    L__69:
0B0D0B C3 80 10 0B         A  3023    	JR	L_95
                           A  3024    ;  260	
                           A  3025    ;  261	    } else if (bit_depth == 32) {
0B0D0F                     A  3026    L_94:
                           A  3027    .LINE 261
                           A  3028    
0B0D0F DD27F7              A  3029    	LD	HL,(IX+%FFFFFFF7)
0B0D12 DD5EFA              A  3030    	LD	E,(IX+%FFFFFFFA)
0B0D15 01200000            A  3031    	LD	BC,32
0B0D19 AF                  A  3032    	XOR	A,A
0B0D1A CD 67 2B 0B         A  3033    	CALL	__lcmps
0B0D1E C2 BC 0E 0B         A  3034    	JR	NZ,L_92
                           A  3035    ;  262	        
                           A  3036    ;  263			int non_pad_row = width * bit_d
                           A  3037    .LINE 263
                           A  3038    
0B0D22 DD27E3              A  3039    	LD	HL,(IX+%FFFFFFE3)
0B0D25 DD5EE6              A  3040    	LD	E,(IX+%FFFFFFE6)
0B0D28 DD07F7              A  3041    	LD	BC,(IX+%FFFFFFF7)
0B0D2B DD7EFA              A  3042    	LD	A,(IX+%FFFFFFFA)
0B0D2E CD E1 2B 0B         A  3043    	CALL	__lmuls
0B0D32 01080000            A  3044    	LD	BC,8
0B0D36 AF                  A  3045    	XOR	A,A
0B0D37 CD CE 29 0B         A  3046    	CALL	__ldivs
0B0D3B DD2FDF              A  3047    	LD	(IX+%FFFFFFDF),HL
0B0D3E DD73E2              A  3048    	LD	(IX+%FFFFFFE2),E
0B0D41 DD2F9F              A  3049    	LD	(IX+%FFFFFF9F),HL
                           A  3050    ;  264	        src = (char * ) malloc(width * 
                           A  3051    .LINE 264
                           A  3052    
0B0D44 E5C1                A  3053    	LD	BC,HL
0B0D46 C5                  A  3054    	PUSH	BC
0B0D47 CD AD 26 0B         A  3055    	CALL	_malloc
0B0D4B C1                  A  3056    	POP	BC
0B0D4C DD2FF0              A  3057    	LD	(IX+%FFFFFFF0),HL
                           A  3058    ;  265			mos_flseek(file, image_start + 
                           A  3059    .LINE 265
                           A  3060    
0B0D4F DD07DF              A  3061    	LD	BC,(IX+%FFFFFFDF)
0B0D52 CD 60 2B 0B         A  3062    	CALL	__itol
0B0D56 DD27DB              A  3063    	LD	HL,(IX+%FFFFFFDB)
0B0D59 DD5EDE              A  3064    	LD	E,(IX+%FFFFFFDE)
0B0D5C CD A2 25 0B         A  3065    	CALL	__ladd
0B0D60 7B                  A  3066    	LD	A,E
0B0D61 FD215DFB FF         A  3067    	LD	IY,-1187	; spill
0B0D66 DDE5C1              A  3068    	LD	BC,IX	; spill
0B0D69 FD09                A  3069    	ADD	IY,BC
0B0D6B FD7700              A  3070    	LD	(IY),A
0B0D6E 015AFBFF            A  3071    	LD	BC,-1190	; spill
0B0D72 CD 98 27 0B         A  3072    	CALL	__istix
0B0D76 DD27EC              A  3073    	LD	HL,(IX+%FFFFFFEC)
0B0D79 DD5EEF              A  3074    	LD	E,(IX+%FFFFFFEF)
0B0D7C 01010000            A  3075    	LD	BC,1
0B0D80 AF                  A  3076    	XOR	A,A
0B0D81 CD 7D 2A 0B         A  3077    	CALL	__lsub
0B0D85 7B                  A  3078    	LD	A,E
0B0D86 E5C1                A  3079    	LD	BC,HL
0B0D88 C5                  A  3080    	PUSH	BC
0B0D89 FD2165FB FF         A  3081    	LD	IY,-1179	; spill
0B0D8E DDE5C1              A  3082    	LD	BC,IX	; spill
0B0D91 FD09                A  3083    	ADD	IY,BC
0B0D93 FD7700              A  3084    	LD	(IY),A
0B0D96 FD215DFB FF         A  3085    	LD	IY,-1187	; unspill
0B0D9B DDE5C1              A  3086    	LD	BC,IX	; unspill
0B0D9E FD09                A  3087    	ADD	IY,BC
0B0DA0 FD7E00              A  3088    	LD	A,(IY)
0B0DA3 C1                  A  3089    	POP	BC
0B0DA4 5F                  A  3090    	LD	E,A
0B0DA5 C5                  A  3091    	PUSH	BC
0B0DA6 FD2165FB FF         A  3092    	LD	IY,-1179	; unspill
0B0DAB DDE5C1              A  3093    	LD	BC,IX	; unspill
0B0DAE FD09                A  3094    	ADD	IY,BC
0B0DB0 FD7E00              A  3095    	LD	A,(IY)
0B0DB3 C1                  A  3096    	POP	BC
0B0DB4 C5E1                A  3097    	LD	HL,BC
0B0DB6 0161FBFF            A  3098    	LD	BC,-1183	; spill
0B0DBA CD 98 27 0B         A  3099    	CALL	__istix
0B0DBE 015AFBFF            A  3100    	LD	BC,-1190	; unspill
0B0DC2 CD 4E 2C 0B         A  3101    	CALL	__ildix
0B0DC6 E5C1                A  3102    	LD	BC,HL
0B0DC8 C5E1                A  3103    	LD	HL,BC
0B0DCA 0161FBFF            A  3104    	LD	BC,-1183	; unspill
0B0DCE E5                  A  3105    	PUSH	HL
0B0DCF CD 4E 2C 0B         A  3106    	CALL	__ildix
0B0DD3 E5C1                A  3107    	LD	BC,HL
0B0DD5 E1                  A  3108    	POP	HL
0B0DD6 CD E1 2B 0B         A  3109    	CALL	__lmulu
0B0DDA DD07B8              A  3110    	LD	BC,(IX+%FFFFFFB8)
0B0DDD DD7EBB              A  3111    	LD	A,(IX+%FFFFFFBB)
0B0DE0 CD A2 25 0B         A  3112    	CALL	__ladd
0B0DE4 4B                  A  3113    	LD	C,E
0B0DE5 0600                A  3114    	LD	B,%0
0B0DE7 C5                  A  3115    	PUSH	BC
0B0DE8 E5                  A  3116    	PUSH	HL
0B0DE9 DD4EFF              A  3117    	LD	C,(IX+%FFFFFFFF)
0B0DEC C5                  A  3118    	PUSH	BC
0B0DED CD 5E 25 0B         A  3119    	CALL	_mos_flseek
0B0DF1 C1                  A  3120    	POP	BC
0B0DF2 C1                  A  3121    	POP	BC
0B0DF3 C1                  A  3122    	POP	BC
                           A  3123    ;  266	
                           A  3124    ;  267	        for (y = height - 1; y >= 0; y-
                           A  3125    .LINE 267
                           A  3126    
0B0DF4 DD27EC              A  3127    	LD	HL,(IX+%FFFFFFEC)
0B0DF7 DD5EEF              A  3128    	LD	E,(IX+%FFFFFFEF)
0B0DFA 01FFFFFF            A  3129    	LD	BC,16777215
0B0DFE 3EFF                A  3130    	LD	A,%FF
0B0E00 CD A2 25 0B         A  3131    	CALL	__ladd
0B0E04 DD2FFB              A  3132    	LD	(IX+%FFFFFFFB),HL
0B0E07 DD73FE              A  3133    	LD	(IX+%FFFFFFFE),E
0B0E0A C3 9B 0E 0B         A  3134    	JR	L_85
0B0E0E                     A  3135    L_83:
                           A  3136    ;  268	
                           A  3137    ;  269	            mos_fread(file, src, non_pa
                           A  3138    .LINE 269
                           A  3139    
0B0E0E DD07DF              A  3140    	LD	BC,(IX+%FFFFFFDF)
0B0E11 C5                  A  3141    	PUSH	BC
0B0E12 DD07F0              A  3142    	LD	BC,(IX+%FFFFFFF0)
0B0E15 C5                  A  3143    	PUSH	BC
0B0E16 DD4EFF              A  3144    	LD	C,(IX+%FFFFFFFF)
0B0E19 0600                A  3145    	LD	B,%0
0B0E1B C5                  A  3146    	PUSH	BC
0B0E1C CD 24 25 0B         A  3147    	CALL	_mos_fread
0B0E20 C1                  A  3148    	POP	BC
0B0E21 C1                  A  3149    	POP	BC
0B0E22 C1                  A  3150    	POP	BC
                           A  3151    ;  270				reorder(src, non_pad_row);
                           A  3152    .LINE 270
                           A  3153    
0B0E23 DD07DF              A  3154    	LD	BC,(IX+%FFFFFFDF)
0B0E26 C5                  A  3155    	PUSH	BC
0B0E27 DD07F0              A  3156    	LD	BC,(IX+%FFFFFFF0)
0B0E2A C5                  A  3157    	PUSH	BC
0B0E2B CD 9A 04 0B         A  3158    	CALL	_reorder
0B0E2F C1                  A  3159    	POP	BC
0B0E30 C1                  A  3160    	POP	BC
                           A  3161    ;  271	            mos_puts(src, non_pad_row, 
                           A  3162    .LINE 271
                           A  3163    
0B0E31 01000000            A  3164    	LD	BC,0
0B0E35 C5                  A  3165    	PUSH	BC
0B0E36 DD07DF              A  3166    	LD	BC,(IX+%FFFFFFDF)
0B0E39 C5                  A  3167    	PUSH	BC
0B0E3A DD07F0              A  3168    	LD	BC,(IX+%FFFFFFF0)
0B0E3D C5                  A  3169    	PUSH	BC
0B0E3E CD B7 21 0B         A  3170    	CALL	_mos_puts
0B0E42 C1                  A  3171    	POP	BC
0B0E43 C1                  A  3172    	POP	BC
0B0E44 C1                  A  3173    	POP	BC
                           A  3174    ;  272				//add_stream_to_buffer(slot
                           A  3175    ;  273	            mos_flseek(file, fo -> fptr
                           A  3176    .LINE 273
                           A  3177    
0B0E45 DD27DF              A  3178    	LD	HL,(IX+%FFFFFFDF)
0B0E48 29                  A  3179    	ADD	HL,HL
0B0E49 E5C1                A  3180    	LD	BC,HL
0B0E4B CD 60 2B 0B         A  3181    	CALL	__itol
0B0E4F 5F                  A  3182    	LD	E,A
0B0E50 C5E1                A  3183    	LD	HL,BC
0B0E52 DD07DB              A  3184    	LD	BC,(IX+%FFFFFFDB)
0B0E55 DD7EDE              A  3185    	LD	A,(IX+%FFFFFFDE)
0B0E58 CD A2 25 0B         A  3186    	CALL	__ladd
0B0E5C 7B                  A  3187    	LD	A,E
0B0E5D E5C1                A  3188    	LD	BC,HL
0B0E5F DD31CB              A  3189    	LD	IY,(IX+%FFFFFFCB)
0B0E62 FD2711              A  3190    	LD	HL,(IY+%11)
0B0E65 FD5E14              A  3191    	LD	E,(IY+%14)
0B0E68 CD 7D 2A 0B         A  3192    	CALL	__lsub
0B0E6C 4B                  A  3193    	LD	C,E
0B0E6D 0600                A  3194    	LD	B,%0
0B0E6F C5                  A  3195    	PUSH	BC
0B0E70 E5                  A  3196    	PUSH	HL
0B0E71 DD4EFF              A  3197    	LD	C,(IX+%FFFFFFFF)
0B0E74 C5                  A  3198    	PUSH	BC
0B0E75 CD 5E 25 0B         A  3199    	CALL	_mos_flseek
0B0E79 C1                  A  3200    	POP	BC
0B0E7A C1                  A  3201    	POP	BC
0B0E7B C1                  A  3202    	POP	BC
                           A  3203    ;  274				free(src);			
                           A  3204    .LINE 274
                           A  3205    
0B0E7C DD07F0              A  3206    	LD	BC,(IX+%FFFFFFF0)
0B0E7F C5                  A  3207    	PUSH	BC
0B0E80 CD A8 25 0B         A  3208    	CALL	_free
0B0E84 C1                  A  3209    	POP	BC
0B0E85 DD27FB              A  3210    	LD	HL,(IX+%FFFFFFFB)
0B0E88 DD5EFE              A  3211    	LD	E,(IX+%FFFFFFFE)
0B0E8B 01FFFFFF            A  3212    	LD	BC,16777215
0B0E8F 3EFF                A  3213    	LD	A,%FF
0B0E91 CD A2 25 0B         A  3214    	CALL	__ladd
0B0E95 DD2FFB              A  3215    	LD	(IX+%FFFFFFFB),HL
0B0E98 DD73FE              A  3216    	LD	(IX+%FFFFFFFE),E
                           A  3217    ;  275	
                           A  3218    ;  276	        }
0B0E9B                     A  3219    L_85:
                           A  3220    .LINE 276
                           A  3221    
0B0E9B DD27FB              A  3222    	LD	HL,(IX+%FFFFFFFB)
0B0E9E DD5EFE              A  3223    	LD	E,(IX+%FFFFFFFE)
0B0EA1 01000000            A  3224    	LD	BC,0
0B0EA5 AF                  A  3225    	XOR	A,A
0B0EA6 CD 67 2B 0B         A  3226    	CALL	__lcmps
0B0EAA F2 B4 0E 0B         A  3227    	JP	P,L__70
0B0EAE EA 0E 0E 0B         A  3228    	JP	PE,L_83
0B0EB2 18 04               A  3229    	JR	L__71
0B0EB4                     A  3230    L__70:
0B0EB4 E2 0E 0E 0B         A  3231    	JP	PO,L_83
0B0EB8                     A  3232    L__71:
0B0EB8 C3 80 10 0B         A  3233    	JR	L_95
                           A  3234    ;  277	
                           A  3235    ;  278	    } else if (bit_depth == 24) {
0B0EBC                     A  3236    L_92:
                           A  3237    .LINE 278
                           A  3238    
0B0EBC DD27F7              A  3239    	LD	HL,(IX+%FFFFFFF7)
0B0EBF DD5EFA              A  3240    	LD	E,(IX+%FFFFFFFA)
0B0EC2 01180000            A  3241    	LD	BC,24
0B0EC6 AF                  A  3242    	XOR	A,A
0B0EC7 CD 67 2B 0B         A  3243    	CALL	__lcmps
0B0ECB C2 80 10 0B         A  3244    	JR	NZ,L_95
                           A  3245    ;  279			
                           A  3246    ;  280			uint16_t new_row_size;
                           A  3247    ;  281			int non_pad_row = width * bit_d
                           A  3248    .LINE 281
                           A  3249    
0B0ECF DD27E3              A  3250    	LD	HL,(IX+%FFFFFFE3)
0B0ED2 DD5EE6              A  3251    	LD	E,(IX+%FFFFFFE6)
0B0ED5 DD07F7              A  3252    	LD	BC,(IX+%FFFFFFF7)
0B0ED8 DD7EFA              A  3253    	LD	A,(IX+%FFFFFFFA)
0B0EDB CD E1 2B 0B         A  3254    	CALL	__lmuls
0B0EDF 01080000            A  3255    	LD	BC,8
0B0EE3 AF                  A  3256    	XOR	A,A
0B0EE4 CD CE 29 0B         A  3257    	CALL	__ldivs
0B0EE8 DD2FD7              A  3258    	LD	(IX+%FFFFFFD7),HL
0B0EEB DD73DA              A  3259    	LD	(IX+%FFFFFFDA),E
0B0EEE DD2FAE              A  3260    	LD	(IX+%FFFFFFAE),HL
                           A  3261    ;  282			
                           A  3262    ;  283	        src = (char * ) malloc(width * 
                           A  3263    .LINE 283
                           A  3264    
0B0EF1 E5C1                A  3265    	LD	BC,HL
0B0EF3 C5                  A  3266    	PUSH	BC
0B0EF4 CD AD 26 0B         A  3267    	CALL	_malloc
0B0EF8 C1                  A  3268    	POP	BC
0B0EF9 DD2FF0              A  3269    	LD	(IX+%FFFFFFF0),HL
                           A  3270    ;  284			mos_flseek(file, image_start + 
                           A  3271    .LINE 284
                           A  3272    
0B0EFC DD07D7              A  3273    	LD	BC,(IX+%FFFFFFD7)
0B0EFF CD 60 2B 0B         A  3274    	CALL	__itol
0B0F03 DD27DB              A  3275    	LD	HL,(IX+%FFFFFFDB)
0B0F06 DD5EDE              A  3276    	LD	E,(IX+%FFFFFFDE)
0B0F09 CD A2 25 0B         A  3277    	CALL	__ladd
0B0F0D 7B                  A  3278    	LD	A,E
0B0F0E FD2164FB FF         A  3279    	LD	IY,-1180	; spill
0B0F13 DDE5C1              A  3280    	LD	BC,IX	; spill
0B0F16 FD09                A  3281    	ADD	IY,BC
0B0F18 FD7700              A  3282    	LD	(IY),A
0B0F1B 015EFBFF            A  3283    	LD	BC,-1186	; spill
0B0F1F CD 98 27 0B         A  3284    	CALL	__istix
0B0F23 DD27EC              A  3285    	LD	HL,(IX+%FFFFFFEC)
0B0F26 DD5EEF              A  3286    	LD	E,(IX+%FFFFFFEF)
0B0F29 01010000            A  3287    	LD	BC,1
0B0F2D AF                  A  3288    	XOR	A,A
0B0F2E CD 7D 2A 0B         A  3289    	CALL	__lsub
0B0F32 7B                  A  3290    	LD	A,E
0B0F33 E5C1                A  3291    	LD	BC,HL
0B0F35 C5                  A  3292    	PUSH	BC
0B0F36 FD2165FB FF         A  3293    	LD	IY,-1179	; spill
0B0F3B DDE5C1              A  3294    	LD	BC,IX	; spill
0B0F3E FD09                A  3295    	ADD	IY,BC
0B0F40 FD7700              A  3296    	LD	(IY),A
0B0F43 FD2164FB FF         A  3297    	LD	IY,-1180	; unspill
0B0F48 DDE5C1              A  3298    	LD	BC,IX	; unspill
0B0F4B FD09                A  3299    	ADD	IY,BC
0B0F4D FD7E00              A  3300    	LD	A,(IY)
0B0F50 C1                  A  3301    	POP	BC
0B0F51 5F                  A  3302    	LD	E,A
0B0F52 C5                  A  3303    	PUSH	BC
0B0F53 FD2165FB FF         A  3304    	LD	IY,-1179	; unspill
0B0F58 DDE5C1              A  3305    	LD	BC,IX	; unspill
0B0F5B FD09                A  3306    	ADD	IY,BC
0B0F5D FD7E00              A  3307    	LD	A,(IY)
0B0F60 C1                  A  3308    	POP	BC
0B0F61 C5E1                A  3309    	LD	HL,BC
0B0F63 0161FBFF            A  3310    	LD	BC,-1183	; spill
0B0F67 CD 98 27 0B         A  3311    	CALL	__istix
0B0F6B 015EFBFF            A  3312    	LD	BC,-1186	; unspill
0B0F6F CD 4E 2C 0B         A  3313    	CALL	__ildix
0B0F73 E5C1                A  3314    	LD	BC,HL
0B0F75 C5E1                A  3315    	LD	HL,BC
0B0F77 0161FBFF            A  3316    	LD	BC,-1183	; unspill
0B0F7B E5                  A  3317    	PUSH	HL
0B0F7C CD 4E 2C 0B         A  3318    	CALL	__ildix
0B0F80 E5C1                A  3319    	LD	BC,HL
0B0F82 E1                  A  3320    	POP	HL
0B0F83 CD E1 2B 0B         A  3321    	CALL	__lmulu
0B0F87 DD07B8              A  3322    	LD	BC,(IX+%FFFFFFB8)
0B0F8A DD7EBB              A  3323    	LD	A,(IX+%FFFFFFBB)
0B0F8D CD A2 25 0B         A  3324    	CALL	__ladd
0B0F91 4B                  A  3325    	LD	C,E
0B0F92 0600                A  3326    	LD	B,%0
0B0F94 C5                  A  3327    	PUSH	BC
0B0F95 E5                  A  3328    	PUSH	HL
0B0F96 DD4EFF              A  3329    	LD	C,(IX+%FFFFFFFF)
0B0F99 C5                  A  3330    	PUSH	BC
0B0F9A CD 5E 25 0B         A  3331    	CALL	_mos_flseek
0B0F9E C1                  A  3332    	POP	BC
0B0F9F C1                  A  3333    	POP	BC
0B0FA0 C1                  A  3334    	POP	BC
                           A  3335    ;  285			
                           A  3336    ;  286	        for (y = height - 1; y >= 0; y-
                           A  3337    .LINE 286
                           A  3338    
0B0FA1 DD27EC              A  3339    	LD	HL,(IX+%FFFFFFEC)
0B0FA4 DD5EEF              A  3340    	LD	E,(IX+%FFFFFFEF)
0B0FA7 01FFFFFF            A  3341    	LD	BC,16777215
0B0FAB 3EFF                A  3342    	LD	A,%FF
0B0FAD CD A2 25 0B         A  3343    	CALL	__ladd
0B0FB1 DD2FFB              A  3344    	LD	(IX+%FFFFFFFB),HL
0B0FB4 DD73FE              A  3345    	LD	(IX+%FFFFFFFE),E
0B0FB7 C3 63 10 0B         A  3346    	JR	L_89
0B0FBB                     A  3347    L_87:
                           A  3348    ;  287	
                           A  3349    ;  288	            mos_fread(file, src, non_pa
                           A  3350    .LINE 288
                           A  3351    
0B0FBB DD07D7              A  3352    	LD	BC,(IX+%FFFFFFD7)
0B0FBE C5                  A  3353    	PUSH	BC
0B0FBF DD07F0              A  3354    	LD	BC,(IX+%FFFFFFF0)
0B0FC2 C5                  A  3355    	PUSH	BC
0B0FC3 DD4EFF              A  3356    	LD	C,(IX+%FFFFFFFF)
0B0FC6 0600                A  3357    	LD	B,%0
0B0FC8 C5                  A  3358    	PUSH	BC
0B0FC9 CD 24 25 0B         A  3359    	CALL	_mos_fread
0B0FCD C1                  A  3360    	POP	BC
0B0FCE C1                  A  3361    	POP	BC
0B0FCF C1                  A  3362    	POP	BC
                           A  3363    ;  289				reorder_and_insert(src, non
                           A  3364    .LINE 289
                           A  3365    
0B0FD0 01FFFFFF            A  3366    	LD	BC,16777215
0B0FD4 C5                  A  3367    	PUSH	BC
0B0FD5 ED65BF              A  3368    	PEA	IX+%FFFFFFBF
0B0FD8 ED65BC              A  3369    	PEA	IX+%FFFFFFBC
0B0FDB DD07D7              A  3370    	LD	BC,(IX+%FFFFFFD7)
0B0FDE C5                  A  3371    	PUSH	BC
0B0FDF DD07F0              A  3372    	LD	BC,(IX+%FFFFFFF0)
0B0FE2 C5                  A  3373    	PUSH	BC
0B0FE3 CD 28 05 0B         A  3374    	CALL	_reorder_and_insert
0B0FE7 C1                  A  3375    	POP	BC
0B0FE8 C1                  A  3376    	POP	BC
0B0FE9 C1                  A  3377    	POP	BC
0B0FEA C1                  A  3378    	POP	BC
0B0FEB C1                  A  3379    	POP	BC
                           A  3380    ;  290	            mos_puts(row_24bpp, new_row
                           A  3381    .LINE 290
                           A  3382    
0B0FEC 01000000            A  3383    	LD	BC,0
0B0FF0 C5                  A  3384    	PUSH	BC
0B0FF1 DD07BF              A  3385    	LD	BC,(IX+%FFFFFFBF)
0B0FF4 CD 42 29 0B         A  3386    	CALL	__stoiu
0B0FF8 E5                  A  3387    	PUSH	HL
0B0FF9 DD07BC              A  3388    	LD	BC,(IX+%FFFFFFBC)
0B0FFC C5                  A  3389    	PUSH	BC
0B0FFD CD B7 21 0B         A  3390    	CALL	_mos_puts
0B1001 C1                  A  3391    	POP	BC
0B1002 C1                  A  3392    	POP	BC
0B1003 C1                  A  3393    	POP	BC
                           A  3394    ;  291				//add_stream_to_buffer(slot
                           A  3395    ;  292	            mos_flseek(file, fo -> fptr
                           A  3396    .LINE 292
                           A  3397    
0B1004 DD27D7              A  3398    	LD	HL,(IX+%FFFFFFD7)
0B1007 29                  A  3399    	ADD	HL,HL
0B1008 E5C1                A  3400    	LD	BC,HL
0B100A CD 60 2B 0B         A  3401    	CALL	__itol
0B100E 5F                  A  3402    	LD	E,A
0B100F C5E1                A  3403    	LD	HL,BC
0B1011 DD07DB              A  3404    	LD	BC,(IX+%FFFFFFDB)
0B1014 DD7EDE              A  3405    	LD	A,(IX+%FFFFFFDE)
0B1017 CD A2 25 0B         A  3406    	CALL	__ladd
0B101B 7B                  A  3407    	LD	A,E
0B101C E5C1                A  3408    	LD	BC,HL
0B101E DD31CB              A  3409    	LD	IY,(IX+%FFFFFFCB)
0B1021 FD2711              A  3410    	LD	HL,(IY+%11)
0B1024 FD5E14              A  3411    	LD	E,(IY+%14)
0B1027 CD 7D 2A 0B         A  3412    	CALL	__lsub
0B102B 4B                  A  3413    	LD	C,E
0B102C 0600                A  3414    	LD	B,%0
0B102E C5                  A  3415    	PUSH	BC
0B102F E5                  A  3416    	PUSH	HL
0B1030 DD4EFF              A  3417    	LD	C,(IX+%FFFFFFFF)
0B1033 C5                  A  3418    	PUSH	BC
0B1034 CD 5E 25 0B         A  3419    	CALL	_mos_flseek
0B1038 C1                  A  3420    	POP	BC
0B1039 C1                  A  3421    	POP	BC
0B103A C1                  A  3422    	POP	BC
                           A  3423    ;  293				free(row_24bpp);
                           A  3424    .LINE 293
                           A  3425    
0B103B DD07BC              A  3426    	LD	BC,(IX+%FFFFFFBC)
0B103E C5                  A  3427    	PUSH	BC
0B103F CD A8 25 0B         A  3428    	CALL	_free
0B1043 C1                  A  3429    	POP	BC
                           A  3430    ;  294				free(src);
                           A  3431    .LINE 294
                           A  3432    
0B1044 DD07F0              A  3433    	LD	BC,(IX+%FFFFFFF0)
0B1047 C5                  A  3434    	PUSH	BC
0B1048 CD A8 25 0B         A  3435    	CALL	_free
0B104C C1                  A  3436    	POP	BC
0B104D DD27FB              A  3437    	LD	HL,(IX+%FFFFFFFB)
0B1050 DD5EFE              A  3438    	LD	E,(IX+%FFFFFFFE)
0B1053 01FFFFFF            A  3439    	LD	BC,16777215
0B1057 3EFF                A  3440    	LD	A,%FF
0B1059 CD A2 25 0B         A  3441    	CALL	__ladd
0B105D DD2FFB              A  3442    	LD	(IX+%FFFFFFFB),HL
0B1060 DD73FE              A  3443    	LD	(IX+%FFFFFFFE),E
                           A  3444    ;  295	
                           A  3445    ;  296	        }		
0B1063                     A  3446    L_89:
                           A  3447    .LINE 296
                           A  3448    
0B1063 DD27FB              A  3449    	LD	HL,(IX+%FFFFFFFB)
0B1066 DD5EFE              A  3450    	LD	E,(IX+%FFFFFFFE)
0B1069 01000000            A  3451    	LD	BC,0
0B106D AF                  A  3452    	XOR	A,A
0B106E CD 67 2B 0B         A  3453    	CALL	__lcmps
0B1072 F2 7C 10 0B         A  3454    	JP	P,L__72
0B1076 EA BB 0F 0B         A  3455    	JP	PE,L_87
0B107A 18 04               A  3456    	JR	L__73
0B107C                     A  3457    L__72:
0B107C E2 BB 0F 0B         A  3458    	JP	PO,L_87
0B1080                     A  3459    L__73:
                           A  3460    ;  297			
                           A  3461    ;  298		}
0B1080                     A  3462    L_95:
                           A  3463    .LINE 298
                           A  3464    
                           A  3465    ;  299	
                           A  3466    ;  300		//assign_buffer_to_bitmap(slot,0,wi
                           A  3467    ;  301		
                           A  3468    ;  302	    mos_fclose(file);
                           A  3469    .LINE 302
                           A  3470    
0B1080 DD4EFF              A  3471    	LD	C,(IX+%FFFFFFFF)
0B1083 0600                A  3472    	LD	B,%0
0B1085 C5                  A  3473    	PUSH	BC
0B1086 CD 0F 24 0B         A  3474    	CALL	_mos_fclose
0B108A C1                  A  3475    	POP	BC
                           A  3476    ;  303	    free(image_buffer);
                           A  3477    .LINE 303
                           A  3478    
0B108B DD07B5              A  3479    	LD	BC,(IX+%FFFFFFB5)
0B108E C5                  A  3480    	PUSH	BC
0B108F CD A8 25 0B         A  3481    	CALL	_free
0B1093 C1                  A  3482    	POP	BC
                           A  3483    ;  304	    //return width * height;
                           A  3484    ;  305		return_info.bmp_width = width;
                           A  3485    .LINE 305
                           A  3486    
0B1094 DD27E3              A  3487    	LD	HL,(IX+%FFFFFFE3)
0B1097 DD75E7              A  3488    	LD	(IX+%FFFFFFE7),L
0B109A DD74E8              A  3489    	LD	(IX+%FFFFFFE8),H
                           A  3490    ;  306		return_info.bmp_height = height;
                           A  3491    .LINE 306
                           A  3492    
0B109D DD27EC              A  3493    	LD	HL,(IX+%FFFFFFEC)
0B10A0 DD75E9              A  3494    	LD	(IX+%FFFFFFE9),L
0B10A3 DD74EA              A  3495    	LD	(IX+%FFFFFFEA),H
                           A  3496    ;  307		return_info.bmp_bitdepth = bit_dept
                           A  3497    .LINE 307
                           A  3498    
0B10A6 DD7EF7              A  3499    	LD	A,(IX+%FFFFFFF7)
0B10A9 DD77EB              A  3500    	LD	(IX+%FFFFFFEB),A
                           A  3501    ;  308		return return_info;
                           A  3502    .LINE 308
                           A  3503    
0B10AC ED2206              A  3504    	LEA	HL,IX+%6
0B10AF ED17                A  3505    	LD	DE,(HL)
0B10B1 ED22E7              A  3506    	LEA	HL,IX+%FFFFFFE7
0B10B4 01050000            A  3507    	LD	BC,5
0B10B8 EDB0                A  3508    	LDIR	
0B10BA DD2706              A  3509    	LD	HL,(IX+%6)
                           A  3510    ;  309	
                           A  3511    ;  310	}
0B10BD                     A  3512    L_96:
                           A  3513    .LINE 310
                           A  3514    
0B10BD DDF9                A  3515    	LD	SP,IX
0B10BF DDE1                A  3516    	POP	IX
0B10C1 C9                  A  3517    	RET	
                           A  3518    
                           A  3519    
                           A  3520    ;**************************** _load_bmp_big ***
                           A  3521    ;Name                         Addr/Register   S
                           A  3522    ;_free                               IMPORT  --
                           A  3523    ;_mos_puts                           IMPORT  --
                           A  3524    ;_mos_flseek                         IMPORT  --
                           A  3525    ;_write16bit                         IMPORT  --
                           A  3526    ;_putch                              IMPORT  --
                           A  3527    ;_vdp_bitmapSelect                   IMPORT  --
                           A  3528    ;_mos_fgetc                          IMPORT  --
                           A  3529    ;_mos_fclose                         IMPORT  --
                           A  3530    ;_memcmp                             IMPORT  --
                           A  3531    ;_malloc                             IMPORT  --
                           A  3532    ;_mos_fread                          IMPORT  --
                           A  3533    ;_mos_getfil                         IMPORT  --
                           A  3534    ;___print_sendstring                 IMPORT  --
                           A  3535    ;___print_xputch                     IMPORT    
                           A  3536    ;___print_uputch                     IMPORT  --
                           A  3537    ;_mos_fopen                          IMPORT  --
                           A  3538    ;color_table                        IX-1175   1
                           A  3539    ;header                              IX-151    
                           A  3540    ;non_pad_row                          IX-97    
                           A  3541    ;redMask                              IX-94    
                           A  3542    ;alphaMask                            IX-90    
                           A  3543    ;blueMask                             IX-86    
                           A  3544    ;non_pad_row                          IX-82    
                           A  3545    ;greenMask                            IX-79    
                           A  3546    ;image_buffer                         IX-75    
                           A  3547    ;image_start                          IX-72    
                           A  3548    ;row_24bpp                            IX-68    
                           A  3549    ;new_row_size                         IX-65    
                           A  3550    ;non_pad_row                          IX-63    
                           A  3551    ;b                                    IX-60    
                           A  3552    ;g                                    IX-59    
                           A  3553    ;r                                    IX-58    
                           A  3554    ;x                                    IX-57    
                           A  3555    ;fo                                   IX-53    
                           A  3556    ;biSize                               IX-50    
                           A  3557    ;color_table_size                     IX-46    
                           A  3558    ;index                                IX-42    
                           A  3559    ;O_17                                 IX-41    
                           A  3560    ;row_padding                          IX-37    
                           A  3561    ;O_15                                 IX-33    
                           A  3562    ;width                                IX-29    
                           A  3563    ;return_info                          IX-25    
                           A  3564    ;height                               IX-20    
                           A  3565    ;src                                  IX-16    
                           A  3566    ;i                                    IX-13    
                           A  3567    ;bit_depth                             IX-9    
                           A  3568    ;y                                     IX-5    
                           A  3569    ;file                                  IX-1    
                           A  3570    ;slot                                 IX+12    
                           A  3571    ;filename                              IX+9    
                           A  3572    
                           A  3573    
                           A  3574    ; Stack Frame Size: 1209 (bytes)
                           A  3575    ;       Spill Code: -3 (instruction)
                           A  3576    
                           A  3577    
                           A  3578    .ENDFUNC "load_bmp_big",310,"_load_bmp_big"
                           A  3579    	SEGMENT STRSECT
0B2CA8                     A  3580    L__35:
0B2CA8 4572726F 723A2063   A  3581    	DB	"Error: could not open "
0B2CB0 6F756C64 206E6F74 
0B2CB8 206F7065 6E20 
0B2CBE 00                  A  3582    	DB	0
0B2CBF                     A  3583    L__36:
0B2CBF 2E                  A  3584    	DB	"."
0B2CC0 0D0A00              A  3585    	DB	13,10,0
0B2CC3                     A  3586    L__42:
0B2CC3 0000FF00 00         A  3587    	DB	0,0,-1,0,0
0B2CC8                     A  3588    L__44:
0B2CC8 00FF0000 00         A  3589    	DB	0,-1,0,0,0
0B2CCD                     A  3590    L__46:
0B2CCD FF000000 00         A  3591    	DB	-1,0,0,0,0
0B2CD2                     A  3592    L__48:
0B2CD2 000000FF 00         A  3593    	DB	0,0,0,-1,0
0B2CD7                     A  3594    L__50:
0B2CD7 4572726F 723A2050   A  3595    	DB	"Error: Pixel format is NOT standard BG
0B2CDF 6978656C 20666F72 
0B2CE7 6D617420 6973204E 
0B2CEF 4F542073 74616E64 
0B2CF7 61726420 42475241 
0B2CFF 2E204578 6974696E 
0B2D07 672E 
0B2D09 0A00                A  3596    	DB	10,0
0B2D0B                     A  3597    L__56:
0B2D0B 4572726F 723A2075   A  3598    	DB	"Error: unsupported bit depth (not 8, 2
0B2D13 6E737570 706F7274 
0B2D1B 65642062 69742064 
0B2D23 65707468 20286E6F 
0B2D2B 7420382C 20323420 
0B2D33 6F722033 322D6269 
0B2D3B 74292E 
0B2D3E 0A00                A  3599    	DB	10,0
                           A  3600    	SEGMENT CODE
                           A  3601    ;  311	
                           A  3602    ;  312	uint16_t strtou16(const char *str) {
0B10C2                     A  3603    _strtou16:
                           A  3604    .DEFINE "_strtou16"
                           A  3605    
                           A  3606    .VALUE _strtou16
                           A  3607    
                           A  3608    .CLASS 2
                           A  3609    
                           A  3610    .TYPE 77
                           A  3611    
                           A  3612    .ENDEF
                           A  3613    
                           A  3614    .BEGFUNC "strtou16",312,"_strtou16"
                           A  3615    
                           A  3616    .LINE 312
                           A  3617    
                           A  3618    .DEFINE "str"
                           A  3619    
                           A  3620    .CLASS 65
                           A  3621    
                           A  3622    .VALUE 6
                           A  3623    
                           A  3624    .TYPE 194
                           A  3625    
                           A  3626    .ENDEF
                           A  3627    
                           A  3628    .DEFINE "result"
                           A  3629    
                           A  3630    .CLASS 65
                           A  3631    
                           A  3632    .VALUE -2
                           A  3633    
                           A  3634    .TYPE 13
                           A  3635    
                           A  3636    .ENDEF
                           A  3637    
                           A  3638    .DEFINE "digit"
                           A  3639    
                           A  3640    .CLASS 65
                           A  3641    
                           A  3642    .VALUE -4
                           A  3643    
                           A  3644    .TYPE 13
                           A  3645    
                           A  3646    .ENDEF
                           A  3647    
0B10C2 DDE5                A  3648    	PUSH	IX
0B10C4 DD210000 00         A  3649    	LD	IX,0
0B10C9 DD39                A  3650    	ADD	IX,SP
0B10CB C5                  A  3651    	PUSH	BC
0B10CC 3B                  A  3652    	DEC	SP
                           A  3653    ;  313	    uint16_t result = 0;
                           A  3654    .LINE 313
                           A  3655    
0B10CD DD36FE00            A  3656    	LD	(IX+%FFFFFFFE),%0
0B10D1 DD36FF00            A  3657    	LD	(IX+%FFFFFFFF),%0
                           A  3658    ;  314	    const uint16_t maxDiv10 = 6553;  //
                           A  3659    ;  315	    const uint16_t maxMod10 = 5;     //
                           A  3660    ;  316	
                           A  3661    ;  317	    while (*str == ' ' || *str == '\t' 
                           A  3662    .LINE 317
                           A  3663    
0B10D5 18 07               A  3664    	JR	L_100
0B10D7                     A  3665    L_101:
                           A  3666    ;  318	        str++;
                           A  3667    .LINE 318
                           A  3668    
0B10D7 DD0706              A  3669    	LD	BC,(IX+%6)
0B10DA 03                  A  3670    	INC	BC
0B10DB DD0F06              A  3671    	LD	(IX+%6),BC
                           A  3672    ;  319	    }
0B10DE                     A  3673    L_100:
                           A  3674    .LINE 319
                           A  3675    
0B10DE DD2706              A  3676    	LD	HL,(IX+%6)
0B10E1 7E                  A  3677    	LD	A,(HL)
0B10E2 47                  A  3678    	LD	B,A
0B10E3 17ED62              A  3679    	SEXT	HL
0B10E6 68                  A  3680    	LD	L,B
0B10E7 01200000            A  3681    	LD	BC,32
0B10EB B7                  A  3682    	OR	A,A
0B10EC ED42                A  3683    	SBC	HL,BC
0B10EE 28 E7               A  3684    	JR	Z,L_101
0B10F0 DD2706              A  3685    	LD	HL,(IX+%6)
0B10F3 7E                  A  3686    	LD	A,(HL)
0B10F4 47                  A  3687    	LD	B,A
0B10F5 17ED62              A  3688    	SEXT	HL
0B10F8 68                  A  3689    	LD	L,B
0B10F9 01090000            A  3690    	LD	BC,9
0B10FD B7                  A  3691    	OR	A,A
0B10FE ED42                A  3692    	SBC	HL,BC
0B1100 28 D5               A  3693    	JR	Z,L_101
0B1102 DD2706              A  3694    	LD	HL,(IX+%6)
0B1105 7E                  A  3695    	LD	A,(HL)
0B1106 47                  A  3696    	LD	B,A
0B1107 17ED62              A  3697    	SEXT	HL
0B110A 68                  A  3698    	LD	L,B
0B110B 010A0000            A  3699    	LD	BC,10
0B110F B7                  A  3700    	OR	A,A
0B1110 ED42                A  3701    	SBC	HL,BC
0B1112 28 C3               A  3702    	JR	Z,L_101
                           A  3703    ;  320	
                           A  3704    ;  321	    while (*str >= '0' && *str <= '9') 
                           A  3705    .LINE 321
                           A  3706    
0B1114 18 5F               A  3707    	JR	L_108
0B1116                     A  3708    L_109:
                           A  3709    ;  322	        uint16_t digit = *str - '0';
                           A  3710    .LINE 322
                           A  3711    
0B1116 DD2706              A  3712    	LD	HL,(IX+%6)
0B1119 7E                  A  3713    	LD	A,(HL)
0B111A 47                  A  3714    	LD	B,A
0B111B 17ED62              A  3715    	SEXT	HL
0B111E 68                  A  3716    	LD	L,B
0B111F E5FDE1              A  3717    	LD	IY,HL
0B1122 ED23D0              A  3718    	LEA	HL,IY+%FFFFFFD0
0B1125 DD75FC              A  3719    	LD	(IX+%FFFFFFFC),L
0B1128 DD74FD              A  3720    	LD	(IX+%FFFFFFFD),H
                           A  3721    ;  323	        if (result > maxDiv10 || (resul
                           A  3722    .LINE 323
                           A  3723    
0B112B DD07FE              A  3724    	LD	BC,(IX+%FFFFFFFE)
0B112E 49219919            A  3725    	LD.LIS	HL,6553
0B1132 B7                  A  3726    	OR	A,A
0B1133 40ED42              A  3727    	SBC.SIS	HL,BC
0B1136 38 1A               A  3728    	JR	C,L_105
0B1138 49019919            A  3729    	LD.LIS	BC,6553
0B113C DD27FE              A  3730    	LD	HL,(IX+%FFFFFFFE)
0B113F B7                  A  3731    	OR	A,A
0B1140 40ED42              A  3732    	SBC.SIS	HL,BC
0B1143 20 13               A  3733    	JR	NZ,L_106
0B1145 DD07FC              A  3734    	LD	BC,(IX+%FFFFFFFC)
0B1148 49210500            A  3735    	LD.LIS	HL,5
0B114C B7                  A  3736    	OR	A,A
0B114D 40ED42              A  3737    	SBC.SIS	HL,BC
0B1150 30 06               A  3738    	JR	NC,L_106
0B1152                     A  3739    L_105:
                           A  3740    ;  324	            return 65535;
                           A  3741    .LINE 324
                           A  3742    
0B1152 4921FFFF            A  3743    	LD.LIS	HL,65535
0B1156 18 5E               A  3744    	JR	L_112
                           A  3745    ;  325	        }
0B1158                     A  3746    L_106:
                           A  3747    .LINE 325
                           A  3748    
                           A  3749    ;  326	        result = result * 10 + digit;
                           A  3750    .LINE 326
                           A  3751    
0B1158 49210A00            A  3752    	LD.LIS	HL,10
0B115C DD07FE              A  3753    	LD	BC,(IX+%FFFFFFFE)
0B115F CD 5A 2C 0B         A  3754    	CALL	__smulu
0B1163 DD07FC              A  3755    	LD	BC,(IX+%FFFFFFFC)
0B1166 4009                A  3756    	ADD.SIS	HL,BC
0B1168 DD75FE              A  3757    	LD	(IX+%FFFFFFFE),L
0B116B DD74FF              A  3758    	LD	(IX+%FFFFFFFF),H
                           A  3759    ;  327	        str++;
                           A  3760    .LINE 327
                           A  3761    
0B116E DD0706              A  3762    	LD	BC,(IX+%6)
0B1171 03                  A  3763    	INC	BC
0B1172 DD0F06              A  3764    	LD	(IX+%6),BC
                           A  3765    ;  328	    }
0B1175                     A  3766    L_108:
                           A  3767    .LINE 328
                           A  3768    
0B1175 DD2706              A  3769    	LD	HL,(IX+%6)
0B1178 7E                  A  3770    	LD	A,(HL)
0B1179 47                  A  3771    	LD	B,A
0B117A 17ED62              A  3772    	SEXT	HL
0B117D 68                  A  3773    	LD	L,B
0B117E 01300000            A  3774    	LD	BC,48
0B1182 B7                  A  3775    	OR	A,A
0B1183 ED42                A  3776    	SBC	HL,BC
0B1185 FA 8F 11 0B         A  3777    	JP	M,L__83
0B1189 EA B3 11 0B         A  3778    	JP	PE,L_111
0B118D 18 04               A  3779    	JR	L__84
0B118F                     A  3780    L__83:
0B118F E2 B3 11 0B         A  3781    	JP	PO,L_111
0B1193                     A  3782    L__84:
0B1193 DD2706              A  3783    	LD	HL,(IX+%6)
0B1196 7E                  A  3784    	LD	A,(HL)
0B1197 47                  A  3785    	LD	B,A
0B1198 17ED62              A  3786    	SEXT	HL
0B119B 68                  A  3787    	LD	L,B
0B119C E5C1                A  3788    	LD	BC,HL
0B119E 21390000            A  3789    	LD	HL,57
0B11A2 B7                  A  3790    	OR	A,A
0B11A3 ED42                A  3791    	SBC	HL,BC
0B11A5 F2 AF 11 0B         A  3792    	JP	P,L__85
0B11A9 EA 16 11 0B         A  3793    	JP	PE,L_109
0B11AD 18 04               A  3794    	JR	L__86
0B11AF                     A  3795    L__85:
0B11AF E2 16 11 0B         A  3796    	JP	PO,L_109
0B11B3                     A  3797    L__86:
0B11B3                     A  3798    L_111:
                           A  3799    ;  329	
                           A  3800    ;  330	    return result;
                           A  3801    .LINE 330
                           A  3802    
0B11B3 DD27FE              A  3803    	LD	HL,(IX+%FFFFFFFE)
                           A  3804    ;  331	}
0B11B6                     A  3805    L_112:
                           A  3806    .LINE 331
                           A  3807    
0B11B6 DDF9                A  3808    	LD	SP,IX
0B11B8 DDE1                A  3809    	POP	IX
0B11BA C9                  A  3810    	RET	
                           A  3811    
                           A  3812    
                           A  3813    ;**************************** _strtou16 *******
                           A  3814    ;Name                         Addr/Register   S
                           A  3815    ;digit                                 IX-4    
                           A  3816    ;result                                IX-2    
                           A  3817    ;str                                   IX+6    
                           A  3818    
                           A  3819    
                           A  3820    ; Stack Frame Size: 13 (bytes)
                           A  3821    ;       Spill Code: -3 (instruction)
                           A  3822    
                           A  3823    
                           A  3824    .ENDFUNC "strtou16",331,"_strtou16"
                           A  3825    ;  332	
                           A  3826    ;  333	uint8_t strtou8(const char *str) {
0B11BB                     A  3827    _strtou8:
                           A  3828    .DEFINE "_strtou8"
                           A  3829    
                           A  3830    .VALUE _strtou8
                           A  3831    
                           A  3832    .CLASS 2
                           A  3833    
                           A  3834    .TYPE 76
                           A  3835    
                           A  3836    .ENDEF
                           A  3837    
                           A  3838    .BEGFUNC "strtou8",333,"_strtou8"
                           A  3839    
                           A  3840    .LINE 333
                           A  3841    
                           A  3842    .DEFINE "str"
                           A  3843    
                           A  3844    .CLASS 65
                           A  3845    
                           A  3846    .VALUE 6
                           A  3847    
                           A  3848    .TYPE 194
                           A  3849    
                           A  3850    .ENDEF
                           A  3851    
                           A  3852    .DEFINE "result"
                           A  3853    
                           A  3854    .CLASS 65
                           A  3855    
                           A  3856    .VALUE -1
                           A  3857    
                           A  3858    .TYPE 12
                           A  3859    
                           A  3860    .ENDEF
                           A  3861    
                           A  3862    .DEFINE "digit"
                           A  3863    
                           A  3864    .CLASS 65
                           A  3865    
                           A  3866    .VALUE -2
                           A  3867    
                           A  3868    .TYPE 12
                           A  3869    
                           A  3870    .ENDEF
                           A  3871    
0B11BB DDE5                A  3872    	PUSH	IX
0B11BD DD210000 00         A  3873    	LD	IX,0
0B11C2 DD39                A  3874    	ADD	IX,SP
0B11C4 3B                  A  3875    	DEC	SP
0B11C5 3B                  A  3876    	DEC	SP
                           A  3877    ;  334	    uint8_t result = 0;
                           A  3878    .LINE 334
                           A  3879    
0B11C6 DD36FF00            A  3880    	LD	(IX+%FFFFFFFF),%0
                           A  3881    ;  335	    const uint8_t maxDiv10 = 255 / 10;
                           A  3882    ;  336	    const uint8_t maxMod10 = 255 % 10;
                           A  3883    ;  337	
                           A  3884    ;  338	    while (*str == ' ' || *str == '\t' 
                           A  3885    .LINE 338
                           A  3886    
0B11CA 18 07               A  3887    	JR	L_116
0B11CC                     A  3888    L_117:
                           A  3889    ;  339	        str++;
                           A  3890    .LINE 339
                           A  3891    
0B11CC DD0706              A  3892    	LD	BC,(IX+%6)
0B11CF 03                  A  3893    	INC	BC
0B11D0 DD0F06              A  3894    	LD	(IX+%6),BC
                           A  3895    ;  340	    }
0B11D3                     A  3896    L_116:
                           A  3897    .LINE 340
                           A  3898    
0B11D3 DD2706              A  3899    	LD	HL,(IX+%6)
0B11D6 7E                  A  3900    	LD	A,(HL)
0B11D7 47                  A  3901    	LD	B,A
0B11D8 17ED62              A  3902    	SEXT	HL
0B11DB 68                  A  3903    	LD	L,B
0B11DC 01200000            A  3904    	LD	BC,32
0B11E0 B7                  A  3905    	OR	A,A
0B11E1 ED42                A  3906    	SBC	HL,BC
0B11E3 28 E7               A  3907    	JR	Z,L_117
0B11E5 DD2706              A  3908    	LD	HL,(IX+%6)
0B11E8 7E                  A  3909    	LD	A,(HL)
0B11E9 47                  A  3910    	LD	B,A
0B11EA 17ED62              A  3911    	SEXT	HL
0B11ED 68                  A  3912    	LD	L,B
0B11EE 01090000            A  3913    	LD	BC,9
0B11F2 B7                  A  3914    	OR	A,A
0B11F3 ED42                A  3915    	SBC	HL,BC
0B11F5 28 D5               A  3916    	JR	Z,L_117
0B11F7 DD2706              A  3917    	LD	HL,(IX+%6)
0B11FA 7E                  A  3918    	LD	A,(HL)
0B11FB 47                  A  3919    	LD	B,A
0B11FC 17ED62              A  3920    	SEXT	HL
0B11FF 68                  A  3921    	LD	L,B
0B1200 010A0000            A  3922    	LD	BC,10
0B1204 B7                  A  3923    	OR	A,A
0B1205 ED42                A  3924    	SBC	HL,BC
0B1207 28 C3               A  3925    	JR	Z,L_117
                           A  3926    ;  341	
                           A  3927    ;  342	    while (*str >= '0' && *str <= '9') 
                           A  3928    .LINE 342
                           A  3929    
0B1209 18 37               A  3930    	JR	L_124
0B120B                     A  3931    L_125:
                           A  3932    ;  343	        uint8_t digit = *str - '0';
                           A  3933    .LINE 343
                           A  3934    
0B120B DD2706              A  3935    	LD	HL,(IX+%6)
0B120E 7E                  A  3936    	LD	A,(HL)
0B120F D630                A  3937    	SUB	A,%30
0B1211 DD77FE              A  3938    	LD	(IX+%FFFFFFFE),A
                           A  3939    ;  344	        if (result > maxDiv10 || (resul
                           A  3940    .LINE 344
                           A  3941    
0B1214 3E19                A  3942    	LD	A,%19
0B1216 DDBEFF              A  3943    	CP	A,(IX+%FFFFFFFF)
0B1219 38 0E               A  3944    	JR	C,L_121
0B121B DD7EFF              A  3945    	LD	A,(IX+%FFFFFFFF)
0B121E FE19                A  3946    	CP	A,%19
0B1220 20 0B               A  3947    	JR	NZ,L_122
0B1222 3E05                A  3948    	LD	A,%5
0B1224 DDBEFE              A  3949    	CP	A,(IX+%FFFFFFFE)
0B1227 30 04               A  3950    	JR	NC,L_122
0B1229                     A  3951    L_121:
                           A  3952    ;  345	            return 255;
                           A  3953    .LINE 345
                           A  3954    
0B1229 3EFF                A  3955    	LD	A,%FF
0B122B 18 56               A  3956    	JR	L_128
                           A  3957    ;  346	        }
0B122D                     A  3958    L_122:
                           A  3959    .LINE 346
                           A  3960    
                           A  3961    ;  347	        result = result * 10 + digit;
                           A  3962    .LINE 347
                           A  3963    
0B122D 060A                A  3964    	LD	B,%A
0B122F DD4EFF              A  3965    	LD	C,(IX+%FFFFFFFF)
0B1232 ED4C                A  3966    	MLT	BC
0B1234 79                  A  3967    	LD	A,C
0B1235 DD86FE              A  3968    	ADD	A,(IX+%FFFFFFFE)
0B1238 DD77FF              A  3969    	LD	(IX+%FFFFFFFF),A
                           A  3970    ;  348	        str++;
                           A  3971    .LINE 348
                           A  3972    
0B123B DD0706              A  3973    	LD	BC,(IX+%6)
0B123E 03                  A  3974    	INC	BC
0B123F DD0F06              A  3975    	LD	(IX+%6),BC
                           A  3976    ;  349	    }
0B1242                     A  3977    L_124:
                           A  3978    .LINE 349
                           A  3979    
0B1242 DD2706              A  3980    	LD	HL,(IX+%6)
0B1245 7E                  A  3981    	LD	A,(HL)
0B1246 47                  A  3982    	LD	B,A
0B1247 17ED62              A  3983    	SEXT	HL
0B124A 68                  A  3984    	LD	L,B
0B124B 01300000            A  3985    	LD	BC,48
0B124F B7                  A  3986    	OR	A,A
0B1250 ED42                A  3987    	SBC	HL,BC
0B1252 FA 5C 12 0B         A  3988    	JP	M,L__96
0B1256 EA 80 12 0B         A  3989    	JP	PE,L_127
0B125A 18 04               A  3990    	JR	L__97
0B125C                     A  3991    L__96:
0B125C E2 80 12 0B         A  3992    	JP	PO,L_127
0B1260                     A  3993    L__97:
0B1260 DD2706              A  3994    	LD	HL,(IX+%6)
0B1263 7E                  A  3995    	LD	A,(HL)
0B1264 47                  A  3996    	LD	B,A
0B1265 17ED62              A  3997    	SEXT	HL
0B1268 68                  A  3998    	LD	L,B
0B1269 E5C1                A  3999    	LD	BC,HL
0B126B 21390000            A  4000    	LD	HL,57
0B126F B7                  A  4001    	OR	A,A
0B1270 ED42                A  4002    	SBC	HL,BC
0B1272 F2 7C 12 0B         A  4003    	JP	P,L__98
0B1276 EA 0B 12 0B         A  4004    	JP	PE,L_125
0B127A 18 04               A  4005    	JR	L__99
0B127C                     A  4006    L__98:
0B127C E2 0B 12 0B         A  4007    	JP	PO,L_125
0B1280                     A  4008    L__99:
0B1280                     A  4009    L_127:
                           A  4010    ;  350	
                           A  4011    ;  351	    return result;
                           A  4012    .LINE 351
                           A  4013    
0B1280 DD7EFF              A  4014    	LD	A,(IX+%FFFFFFFF)
                           A  4015    ;  352	}
0B1283                     A  4016    L_128:
                           A  4017    .LINE 352
                           A  4018    
0B1283 DDF9                A  4019    	LD	SP,IX
0B1285 DDE1                A  4020    	POP	IX
0B1287 C9                  A  4021    	RET	
                           A  4022    
                           A  4023    
                           A  4024    ;**************************** _strtou8 ********
                           A  4025    ;Name                         Addr/Register   S
                           A  4026    ;digit                                 IX-2    
                           A  4027    ;result                                IX-1    
                           A  4028    ;str                                   IX+6    
                           A  4029    
                           A  4030    
                           A  4031    ; Stack Frame Size: 11 (bytes)
                           A  4032    ;       Spill Code: -3 (instruction)
                           A  4033    
                           A  4034    
                           A  4035    .ENDFUNC "strtou8",352,"_strtou8"
                           A  4036    ;  353	
                           A  4037    ;  354	uint24_t strtou24(const char *str) {
0B1288                     A  4038    _strtou24:
                           A  4039    .DEFINE "_strtou24"
                           A  4040    
                           A  4041    .VALUE _strtou24
                           A  4042    
                           A  4043    .CLASS 2
                           A  4044    
                           A  4045    .TYPE 78
                           A  4046    
                           A  4047    .ENDEF
                           A  4048    
                           A  4049    .BEGFUNC "strtou24",354,"_strtou24"
                           A  4050    
                           A  4051    .LINE 354
                           A  4052    
                           A  4053    .DEFINE "str"
                           A  4054    
                           A  4055    .CLASS 65
                           A  4056    
                           A  4057    .VALUE 6
                           A  4058    
                           A  4059    .TYPE 194
                           A  4060    
                           A  4061    .ENDEF
                           A  4062    
                           A  4063    .DEFINE "result"
                           A  4064    
                           A  4065    .CLASS 65
                           A  4066    
                           A  4067    .VALUE -4
                           A  4068    
                           A  4069    .TYPE 15
                           A  4070    
                           A  4071    .ENDEF
                           A  4072    
                           A  4073    .DEFINE "digit"
                           A  4074    
                           A  4075    .CLASS 65
                           A  4076    
                           A  4077    .VALUE -8
                           A  4078    
                           A  4079    .TYPE 15
                           A  4080    
                           A  4081    .ENDEF
                           A  4082    
0B1288 DDE5                A  4083    	PUSH	IX
0B128A DD210000 00         A  4084    	LD	IX,0
0B128F DD39                A  4085    	ADD	IX,SP
0B1291 C5                  A  4086    	PUSH	BC
0B1292 C5                  A  4087    	PUSH	BC
0B1293 3B                  A  4088    	DEC	SP
0B1294 3B                  A  4089    	DEC	SP
                           A  4090    ;  355	    uint32_t result = 0;
                           A  4091    .LINE 355
                           A  4092    
0B1295 01000000            A  4093    	LD	BC,0
0B1299 AF                  A  4094    	XOR	A,A
0B129A DD0FFC              A  4095    	LD	(IX+%FFFFFFFC),BC
0B129D DD77FF              A  4096    	LD	(IX+%FFFFFFFF),A
                           A  4097    ;  356	    const uint32_t maxDiv10 = 1677721;
                           A  4098    ;  357	    const uint32_t maxMod10 = 5;
                           A  4099    ;  358	
                           A  4100    ;  359	    while (*str == ' ' || *str == '\t' 
                           A  4101    .LINE 359
                           A  4102    
0B12A0 18 07               A  4103    	JR	L_132
0B12A2                     A  4104    L_133:
                           A  4105    ;  360	        str++;
                           A  4106    .LINE 360
                           A  4107    
0B12A2 DD0706              A  4108    	LD	BC,(IX+%6)
0B12A5 03                  A  4109    	INC	BC
0B12A6 DD0F06              A  4110    	LD	(IX+%6),BC
                           A  4111    ;  361	    }
0B12A9                     A  4112    L_132:
                           A  4113    .LINE 361
                           A  4114    
0B12A9 DD2706              A  4115    	LD	HL,(IX+%6)
0B12AC 7E                  A  4116    	LD	A,(HL)
0B12AD 47                  A  4117    	LD	B,A
0B12AE 17ED62              A  4118    	SEXT	HL
0B12B1 68                  A  4119    	LD	L,B
0B12B2 01200000            A  4120    	LD	BC,32
0B12B6 B7                  A  4121    	OR	A,A
0B12B7 ED42                A  4122    	SBC	HL,BC
0B12B9 28 E7               A  4123    	JR	Z,L_133
0B12BB DD2706              A  4124    	LD	HL,(IX+%6)
0B12BE 7E                  A  4125    	LD	A,(HL)
0B12BF 47                  A  4126    	LD	B,A
0B12C0 17ED62              A  4127    	SEXT	HL
0B12C3 68                  A  4128    	LD	L,B
0B12C4 01090000            A  4129    	LD	BC,9
0B12C8 B7                  A  4130    	OR	A,A
0B12C9 ED42                A  4131    	SBC	HL,BC
0B12CB 28 D5               A  4132    	JR	Z,L_133
0B12CD DD2706              A  4133    	LD	HL,(IX+%6)
0B12D0 7E                  A  4134    	LD	A,(HL)
0B12D1 47                  A  4135    	LD	B,A
0B12D2 17ED62              A  4136    	SEXT	HL
0B12D5 68                  A  4137    	LD	L,B
0B12D6 010A0000            A  4138    	LD	BC,10
0B12DA B7                  A  4139    	OR	A,A
0B12DB ED42                A  4140    	SBC	HL,BC
0B12DD 28 C3               A  4141    	JR	Z,L_133
                           A  4142    ;  362		
                           A  4143    ;  363	    while (*str >= '0' && *str <= '9') 
                           A  4144    .LINE 363
                           A  4145    
0B12DF 18 7A               A  4146    	JR	L_140
0B12E1                     A  4147    L_141:
                           A  4148    ;  364	        uint32_t digit = *str - '0';
                           A  4149    .LINE 364
                           A  4150    
0B12E1 DD2706              A  4151    	LD	HL,(IX+%6)
0B12E4 7E                  A  4152    	LD	A,(HL)
0B12E5 47                  A  4153    	LD	B,A
0B12E6 17ED62              A  4154    	SEXT	HL
0B12E9 68                  A  4155    	LD	L,B
0B12EA 5C                  A  4156    	LD	E,H
0B12EB 01300000            A  4157    	LD	BC,48
0B12EF AF                  A  4158    	XOR	A,A
0B12F0 CD 7D 2A 0B         A  4159    	CALL	__lsub
0B12F4 DD2FF8              A  4160    	LD	(IX+%FFFFFFF8),HL
0B12F7 DD73FB              A  4161    	LD	(IX+%FFFFFFFB),E
                           A  4162    ;  365	        if (result > maxDiv10 || (resul
                           A  4163    .LINE 365
                           A  4164    
0B12FA 21999919            A  4165    	LD	HL,1677721
0B12FE 1E00                A  4166    	LD	E,%0
0B1300 DD07FC              A  4167    	LD	BC,(IX+%FFFFFFFC)
0B1303 DD7EFF              A  4168    	LD	A,(IX+%FFFFFFFF)
0B1306 CD 67 2B 0B         A  4169    	CALL	__lcmpu
0B130A 38 23               A  4170    	JR	C,L_137
0B130C DD27FC              A  4171    	LD	HL,(IX+%FFFFFFFC)
0B130F DD5EFF              A  4172    	LD	E,(IX+%FFFFFFFF)
0B1312 01999919            A  4173    	LD	BC,1677721
0B1316 AF                  A  4174    	XOR	A,A
0B1317 CD 67 2B 0B         A  4175    	CALL	__lcmpu
0B131B 20 18               A  4176    	JR	NZ,L_138
0B131D 21050000            A  4177    	LD	HL,5
0B1321 1E00                A  4178    	LD	E,%0
0B1323 DD07F8              A  4179    	LD	BC,(IX+%FFFFFFF8)
0B1326 DD7EFB              A  4180    	LD	A,(IX+%FFFFFFFB)
0B1329 CD 67 2B 0B         A  4181    	CALL	__lcmpu
0B132D 30 06               A  4182    	JR	NC,L_138
0B132F                     A  4183    L_137:
                           A  4184    ;  366	            return 16777215;
                           A  4185    .LINE 366
                           A  4186    
0B132F 21FFFFFF            A  4187    	LD	HL,16777215
0B1333 18 67               A  4188    	JR	L_144
                           A  4189    ;  367	        }
0B1335                     A  4190    L_138:
                           A  4191    .LINE 367
                           A  4192    
                           A  4193    ;  368	        result = result * 10 + digit;
                           A  4194    .LINE 368
                           A  4195    
0B1335 DD27FC              A  4196    	LD	HL,(IX+%FFFFFFFC)
0B1338 DD5EFF              A  4197    	LD	E,(IX+%FFFFFFFF)
0B133B 010A0000            A  4198    	LD	BC,10
0B133F AF                  A  4199    	XOR	A,A
0B1340 CD E1 2B 0B         A  4200    	CALL	__lmulu
0B1344 DD07F8              A  4201    	LD	BC,(IX+%FFFFFFF8)
0B1347 DD7EFB              A  4202    	LD	A,(IX+%FFFFFFFB)
0B134A CD A2 25 0B         A  4203    	CALL	__ladd
0B134E DD2FFC              A  4204    	LD	(IX+%FFFFFFFC),HL
0B1351 DD73FF              A  4205    	LD	(IX+%FFFFFFFF),E
                           A  4206    ;  369	        str++;
                           A  4207    .LINE 369
                           A  4208    
0B1354 DD0706              A  4209    	LD	BC,(IX+%6)
0B1357 03                  A  4210    	INC	BC
0B1358 DD0F06              A  4211    	LD	(IX+%6),BC
                           A  4212    ;  370	    }
0B135B                     A  4213    L_140:
                           A  4214    .LINE 370
                           A  4215    
0B135B DD2706              A  4216    	LD	HL,(IX+%6)
0B135E 7E                  A  4217    	LD	A,(HL)
0B135F 47                  A  4218    	LD	B,A
0B1360 17ED62              A  4219    	SEXT	HL
0B1363 68                  A  4220    	LD	L,B
0B1364 01300000            A  4221    	LD	BC,48
0B1368 B7                  A  4222    	OR	A,A
0B1369 ED42                A  4223    	SBC	HL,BC
0B136B FA 75 13 0B         A  4224    	JP	M,L__109
0B136F EA 99 13 0B         A  4225    	JP	PE,L_143
0B1373 18 04               A  4226    	JR	L__110
0B1375                     A  4227    L__109:
0B1375 E2 99 13 0B         A  4228    	JP	PO,L_143
0B1379                     A  4229    L__110:
0B1379 DD2706              A  4230    	LD	HL,(IX+%6)
0B137C 7E                  A  4231    	LD	A,(HL)
0B137D 47                  A  4232    	LD	B,A
0B137E 17ED62              A  4233    	SEXT	HL
0B1381 68                  A  4234    	LD	L,B
0B1382 E5C1                A  4235    	LD	BC,HL
0B1384 21390000            A  4236    	LD	HL,57
0B1388 B7                  A  4237    	OR	A,A
0B1389 ED42                A  4238    	SBC	HL,BC
0B138B F2 95 13 0B         A  4239    	JP	P,L__111
0B138F EA E1 12 0B         A  4240    	JP	PE,L_141
0B1393 18 04               A  4241    	JR	L__112
0B1395                     A  4242    L__111:
0B1395 E2 E1 12 0B         A  4243    	JP	PO,L_141
0B1399                     A  4244    L__112:
0B1399                     A  4245    L_143:
                           A  4246    ;  371	
                           A  4247    ;  372	    return result;
                           A  4248    .LINE 372
                           A  4249    
0B1399 DD27FC              A  4250    	LD	HL,(IX+%FFFFFFFC)
                           A  4251    ;  373	}
0B139C                     A  4252    L_144:
                           A  4253    .LINE 373
                           A  4254    
0B139C DDF9                A  4255    	LD	SP,IX
0B139E DDE1                A  4256    	POP	IX
0B13A0 C9                  A  4257    	RET	
                           A  4258    
                           A  4259    
                           A  4260    ;**************************** _strtou24 *******
                           A  4261    ;Name                         Addr/Register   S
                           A  4262    ;digit                                 IX-8    
                           A  4263    ;result                                IX-4    
                           A  4264    ;str                                   IX+6    
                           A  4265    
                           A  4266    
                           A  4267    ; Stack Frame Size: 17 (bytes)
                           A  4268    ;       Spill Code: -3 (instruction)
                           A  4269    
                           A  4270    
                           A  4271    .ENDFUNC "strtou24",373,"_strtou24"
                           A  4272    ;  374	
                           A  4273    ;  375	int main(int argc, char * argv[]) {
0B13A1                     A  4274    _main:
                           A  4275    .DEFINE "_main"
                           A  4276    
                           A  4277    .VALUE _main
                           A  4278    
                           A  4279    .CLASS 2
                           A  4280    
                           A  4281    .TYPE 68
                           A  4282    
                           A  4283    .ENDEF
                           A  4284    
                           A  4285    .BEGFUNC "main",375,"_main"
                           A  4286    
                           A  4287    .LINE 375
                           A  4288    
                           A  4289    .DEFINE "argc"
                           A  4290    
                           A  4291    .CLASS 65
                           A  4292    
                           A  4293    .VALUE 6
                           A  4294    
                           A  4295    .TYPE 4
                           A  4296    
                           A  4297    .ENDEF
                           A  4298    
                           A  4299    .DEFINE "argv"
                           A  4300    
                           A  4301    .CLASS 65
                           A  4302    
                           A  4303    .VALUE 9
                           A  4304    
                           A  4305    .TYPE 290
                           A  4306    
                           A  4307    .ENDEF
                           A  4308    
                           A  4309    .DEFINE "bitmap_slot"
                           A  4310    
                           A  4311    .CLASS 65
                           A  4312    
                           A  4313    .VALUE -1
                           A  4314    
                           A  4315    .TYPE 12
                           A  4316    
                           A  4317    .ENDEF
                           A  4318    
                           A  4319    .DEFINE "x"
                           A  4320    
                           A  4321    .CLASS 65
                           A  4322    
                           A  4323    .VALUE -7
                           A  4324    
                           A  4325    .TYPE 14
                           A  4326    
                           A  4327    .ENDEF
                           A  4328    
                           A  4329    .DEFINE "bmp"
                           A  4330    
                           A  4331    .CLASS 65
                           A  4332    
                           A  4333    .VALUE -12
                           A  4334    
                           A  4335    .TAG "NONAME6"
                           A  4336    
                           A  4337    .TYPE 8
                           A  4338    
                           A  4339    .ENDEF
                           A  4340    
                           A  4341    .DEFINE "y"
                           A  4342    
                           A  4343    .CLASS 65
                           A  4344    
                           A  4345    .VALUE -18
                           A  4346    
                           A  4347    .TYPE 14
                           A  4348    
                           A  4349    .ENDEF
                           A  4350    
0B13A1 DDE5                A  4351    	PUSH	IX
0B13A3 DD210000 00         A  4352    	LD	IX,0
0B13A8 DD39                A  4353    	ADD	IX,SP
0B13AA ED22DE              A  4354    	LEA	HL,IX+%FFFFFFDE
0B13AD F9                  A  4355    	LD	SP,HL
                           A  4356    ;  376	
                           A  4357    ;  377	    uint24_t x, y;
                           A  4358    ;  378		uint8_t bitmap_slot = 0;
                           A  4359    .LINE 378
                           A  4360    
0B13AE DD36FF00            A  4361    	LD	(IX+%FFFFFFFF),%0
                           A  4362    ;  379		bmp_info bmp;
                           A  4363    ;  380		
                           A  4364    ;  381		//Args = 0:binary name, 1:filname, 
                           A  4365    ;  382		
                           A  4366    ;  383		if ((argc < 2) || (argc == 4) || (a
                           A  4367    .LINE 383
                           A  4368    
0B13B2 01020000            A  4369    	LD	BC,2
0B13B6 DD2706              A  4370    	LD	HL,(IX+%6)
0B13B9 B7                  A  4371    	OR	A,A
0B13BA ED42                A  4372    	SBC	HL,BC
0B13BC FA C6 13 0B         A  4373    	JP	M,L__127
0B13C0 EA EE 13 0B         A  4374    	JP	PE,L_147
0B13C4 18 04               A  4375    	JR	L__128
0B13C6                     A  4376    L__127:
0B13C6 E2 EE 13 0B         A  4377    	JP	PO,L_147
0B13CA                     A  4378    L__128:
0B13CA 01040000            A  4379    	LD	BC,4
0B13CE DD2706              A  4380    	LD	HL,(IX+%6)
0B13D1 B7                  A  4381    	OR	A,A
0B13D2 ED42                A  4382    	SBC	HL,BC
0B13D4 28 18               A  4383    	JR	Z,L_147
0B13D6 DD0706              A  4384    	LD	BC,(IX+%6)
0B13D9 21050000            A  4385    	LD	HL,5
0B13DD B7                  A  4386    	OR	A,A
0B13DE ED42                A  4387    	SBC	HL,BC
0B13E0 F2 EA 13 0B         A  4388    	JP	P,L__129
0B13E4 EA 1D 14 0B         A  4389    	JP	PE,L_149
0B13E8 18 04               A  4390    	JR	L__130
0B13EA                     A  4391    L__129:
0B13EA E2 1D 14 0B         A  4392    	JP	PO,L_149
0B13EE                     A  4393    L__130:
0B13EE                     A  4394    L_147:
                           A  4395    ;  384	        printf("Usage is %s <filename> 
                           A  4396    .LINE 384
                           A  4397    
0B13EE 01 48 29 0B         A  4398    	LD	BC,___print_uputch
0B13F2 ED43 A2 2C 0B       A  4399    	LD	(___print_xputch),BC
0B13F7 01 40 2D 0B         A  4400    	LD	BC,L__117
0B13FB C5                  A  4401    	PUSH	BC
0B13FC CD AD 27 0B         A  4402    	CALL	___print_sendstring
0B1400 C1                  A  4403    	POP	BC
0B1401 DD2709              A  4404    	LD	HL,(IX+%9)
0B1404 ED07                A  4405    	LD	BC,(HL)
0B1406 C5                  A  4406    	PUSH	BC
0B1407 CD AD 27 0B         A  4407    	CALL	___print_sendstring
0B140B C1                  A  4408    	POP	BC
0B140C 01 4A 2D 0B         A  4409    	LD	BC,L__118
0B1410 C5                  A  4410    	PUSH	BC
0B1411 CD AD 27 0B         A  4411    	CALL	___print_sendstring
0B1415 C1                  A  4412    	POP	BC
                           A  4413    ;  385	        return 0;
                           A  4414    .LINE 385
                           A  4415    
0B1416 B7                  A  4416    	OR	A,A
0B1417 ED62                A  4417    	SBC	HL,HL
0B1419 C3 D8 15 0B         A  4418    	JR	L_165
                           A  4419    ;  386	    }
0B141D                     A  4420    L_149:
                           A  4421    .LINE 386
                           A  4422    
                           A  4423    ;  387		
                           A  4424    ;  388		if (argc > 2) bitmap_slot = strtou8
                           A  4425    .LINE 388
                           A  4426    
0B141D DD0706              A  4427    	LD	BC,(IX+%6)
0B1420 21020000            A  4428    	LD	HL,2
0B1424 B7                  A  4429    	OR	A,A
0B1425 ED42                A  4430    	SBC	HL,BC
0B1427 F2 31 14 0B         A  4431    	JP	P,L__131
0B142B EA 46 14 0B         A  4432    	JP	PE,L_163
0B142F 18 04               A  4433    	JR	L__132
0B1431                     A  4434    L__131:
0B1431 E2 46 14 0B         A  4435    	JP	PO,L_163
0B1435                     A  4436    L__132:
0B1435 DD3109              A  4437    	LD	IY,(IX+%9)
0B1438 ED2306              A  4438    	LEA	HL,IY+%6
0B143B ED07                A  4439    	LD	BC,(HL)
0B143D C5                  A  4440    	PUSH	BC
0B143E CD BB 11 0B         A  4441    	CALL	_strtou8
0B1442 C1                  A  4442    	POP	BC
0B1443 DD77FF              A  4443    	LD	(IX+%FFFFFFFF),A
0B1446                     A  4444    L_163:
                           A  4445    ;  389		
                           A  4446    ;  390	    //vdp_mode(8);
                           A  4447    ;  391		
                           A  4448    ;  392		if (argc == 2) {
                           A  4449    .LINE 392
                           A  4450    
0B1446 01020000            A  4451    	LD	BC,2
0B144A DD2706              A  4452    	LD	HL,(IX+%6)
0B144D B7                  A  4453    	OR	A,A
0B144E ED42                A  4454    	SBC	HL,BC
0B1450 20 25               A  4455    	JR	NZ,L_162
                           A  4456    ;  393	
                           A  4457    ;  394			bmp = load_bmp_big(argv[1], 0);
                           A  4458    .LINE 394
                           A  4459    
0B1452 01000000            A  4460    	LD	BC,0
0B1456 C5                  A  4461    	PUSH	BC
0B1457 DD3109              A  4462    	LD	IY,(IX+%9)
0B145A ED2303              A  4463    	LEA	HL,IY+%3
0B145D ED07                A  4464    	LD	BC,(HL)
0B145F C5                  A  4465    	PUSH	BC
0B1460 ED65E9              A  4466    	PEA	IX+%FFFFFFE9
0B1463 CD AA 06 0B         A  4467    	CALL	_load_bmp_big
0B1467 C1                  A  4468    	POP	BC
0B1468 C1                  A  4469    	POP	BC
0B1469 C1                  A  4470    	POP	BC
0B146A ED12F4              A  4471    	LEA	DE,IX+%FFFFFFF4
0B146D 01050000            A  4472    	LD	BC,5
0B1471 EDB0                A  4473    	LDIR	
                           A  4474    ;  395			
                           A  4475    ;  396		} else if (argc == 3) {
                           A  4476    .LINE 396
                           A  4477    
0B1473 C3 D5 15 0B         A  4478    	JR	L_164
0B1477                     A  4479    L_162:
0B1477 01030000            A  4480    	LD	BC,3
0B147B DD2706              A  4481    	LD	HL,(IX+%6)
0B147E B7                  A  4482    	OR	A,A
0B147F ED42                A  4483    	SBC	HL,BC
0B1481 20 26               A  4484    	JR	NZ,L_160
                           A  4485    ;  397			
                           A  4486    ;  398			bmp = load_bmp_big(argv[1], bit
                           A  4487    .LINE 398
                           A  4488    
0B1483 DD4EFF              A  4489    	LD	C,(IX+%FFFFFFFF)
0B1486 0600                A  4490    	LD	B,%0
0B1488 C5                  A  4491    	PUSH	BC
0B1489 DD3109              A  4492    	LD	IY,(IX+%9)
0B148C ED2303              A  4493    	LEA	HL,IY+%3
0B148F ED07                A  4494    	LD	BC,(HL)
0B1491 C5                  A  4495    	PUSH	BC
0B1492 ED65E4              A  4496    	PEA	IX+%FFFFFFE4
0B1495 CD AA 06 0B         A  4497    	CALL	_load_bmp_big
0B1499 C1                  A  4498    	POP	BC
0B149A C1                  A  4499    	POP	BC
0B149B C1                  A  4500    	POP	BC
0B149C ED12F4              A  4501    	LEA	DE,IX+%FFFFFFF4
0B149F 01050000            A  4502    	LD	BC,5
0B14A3 EDB0                A  4503    	LDIR	
                           A  4504    ;  399			
                           A  4505    ;  400		} else if (argc == 5) {
                           A  4506    .LINE 400
                           A  4507    
0B14A5 C3 D5 15 0B         A  4508    	JR	L_164
0B14A9                     A  4509    L_160:
0B14A9 01050000            A  4510    	LD	BC,5
0B14AD DD2706              A  4511    	LD	HL,(IX+%6)
0B14B0 B7                  A  4512    	OR	A,A
0B14B1 ED42                A  4513    	SBC	HL,BC
0B14B3 C2 D5 15 0B         A  4514    	JR	NZ,L_164
                           A  4515    ;  401		
                           A  4516    ;  402			bmp = load_bmp_big(argv[1], bit
                           A  4517    .LINE 402
                           A  4518    
0B14B7 DD4EFF              A  4519    	LD	C,(IX+%FFFFFFFF)
0B14BA 0600                A  4520    	LD	B,%0
0B14BC C5                  A  4521    	PUSH	BC
0B14BD DD3109              A  4522    	LD	IY,(IX+%9)
0B14C0 ED2303              A  4523    	LEA	HL,IY+%3
0B14C3 ED07                A  4524    	LD	BC,(HL)
0B14C5 C5                  A  4525    	PUSH	BC
0B14C6 ED65DF              A  4526    	PEA	IX+%FFFFFFDF
0B14C9 CD AA 06 0B         A  4527    	CALL	_load_bmp_big
0B14CD C1                  A  4528    	POP	BC
0B14CE C1                  A  4529    	POP	BC
0B14CF C1                  A  4530    	POP	BC
0B14D0 ED12F4              A  4531    	LEA	DE,IX+%FFFFFFF4
0B14D3 01050000            A  4532    	LD	BC,5
0B14D7 EDB0                A  4533    	LDIR	
                           A  4534    ;  403			
                           A  4535    ;  404			if (argv[3][0] == 'C' || argv[3
                           A  4536    .LINE 404
                           A  4537    
0B14D9 DD3109              A  4538    	LD	IY,(IX+%9)
0B14DC ED3309              A  4539    	LEA	IY,IY+%9
0B14DF DD3EF1              A  4540    	LD	(IX+%FFFFFFF1),IY
0B14E2 DD27F1              A  4541    	LD	HL,(IX+%FFFFFFF1)
0B14E5 ED27                A  4542    	LD	HL,(HL)
0B14E7 7E                  A  4543    	LD	A,(HL)
0B14E8 47                  A  4544    	LD	B,A
0B14E9 17ED62              A  4545    	SEXT	HL
0B14EC 68                  A  4546    	LD	L,B
0B14ED 01430000            A  4547    	LD	BC,67
0B14F1 B7                  A  4548    	OR	A,A
0B14F2 ED42                A  4549    	SBC	HL,BC
0B14F4 28 14               A  4550    	JR	Z,L_151
0B14F6 DD27F1              A  4551    	LD	HL,(IX+%FFFFFFF1)
0B14F9 ED27                A  4552    	LD	HL,(HL)
0B14FB 7E                  A  4553    	LD	A,(HL)
0B14FC 47                  A  4554    	LD	B,A
0B14FD 17ED62              A  4555    	SEXT	HL
0B1500 68                  A  4556    	LD	L,B
0B1501 01630000            A  4557    	LD	BC,99
0B1505 B7                  A  4558    	OR	A,A
0B1506 ED42                A  4559    	SBC	HL,BC
0B1508 20 2D               A  4560    	JR	NZ,L_152
0B150A                     A  4561    L_151:
0B150A DD77DE              A  4562    	LD	(IX+%FFFFFFDE),A
0B150D CD 58 22 0B         A  4563    	CALL	_getsysvar_scrwidth
0B1511 DD7EDE              A  4564    	LD	A,(IX+%FFFFFFDE)
0B1514 E5C1                A  4565    	LD	BC,HL
0B1516 CD 42 29 0B         A  4566    	CALL	__stoiu
0B151A E5D1                A  4567    	LD	DE,HL
0B151C DD07F4              A  4568    	LD	BC,(IX+%FFFFFFF4)
0B151F CD 42 29 0B         A  4569    	CALL	__stoiu
0B1523 E5C1                A  4570    	LD	BC,HL
0B1525 D5E1                A  4571    	LD	HL,DE
0B1527 B7                  A  4572    	OR	A,A
0B1528 ED42                A  4573    	SBC	HL,BC
0B152A 01020000            A  4574    	LD	BC,2
0B152E CD 27 2B 0B         A  4575    	CALL	__idivs
0B1532 DD2FF9              A  4576    	LD	(IX+%FFFFFFF9),HL
                           A  4577    ;  405			else x = strtou16(argv[4]);
                           A  4578    .LINE 405
                           A  4579    
0B1535 18 17               A  4580    	JR	L_156
0B1537                     A  4581    L_152:
0B1537 DD3109              A  4582    	LD	IY,(IX+%9)
0B153A ED230C              A  4583    	LEA	HL,IY+%C
0B153D ED07                A  4584    	LD	BC,(HL)
0B153F C5                  A  4585    	PUSH	BC
0B1540 CD C2 10 0B         A  4586    	CALL	_strtou16
0B1544 C1                  A  4587    	POP	BC
0B1545 E5C1                A  4588    	LD	BC,HL
0B1547 CD 42 29 0B         A  4589    	CALL	__stoiu
0B154B DD2FF9              A  4590    	LD	(IX+%FFFFFFF9),HL
0B154E                     A  4591    L_156:
                           A  4592    ;  406			
                           A  4593    ;  407			if (argv[4][0] == 'C' || argv[4
                           A  4594    .LINE 407
                           A  4595    
0B154E DD3109              A  4596    	LD	IY,(IX+%9)
0B1551 ED330C              A  4597    	LEA	IY,IY+%C
0B1554 DD3EFC              A  4598    	LD	(IX+%FFFFFFFC),IY
0B1557 DD27FC              A  4599    	LD	HL,(IX+%FFFFFFFC)
0B155A ED27                A  4600    	LD	HL,(HL)
0B155C 7E                  A  4601    	LD	A,(HL)
0B155D 47                  A  4602    	LD	B,A
0B155E 17ED62              A  4603    	SEXT	HL
0B1561 68                  A  4604    	LD	L,B
0B1562 01430000            A  4605    	LD	BC,67
0B1566 B7                  A  4606    	OR	A,A
0B1567 ED42                A  4607    	SBC	HL,BC
0B1569 28 14               A  4608    	JR	Z,L_154
0B156B DD27FC              A  4609    	LD	HL,(IX+%FFFFFFFC)
0B156E ED27                A  4610    	LD	HL,(HL)
0B1570 7E                  A  4611    	LD	A,(HL)
0B1571 47                  A  4612    	LD	B,A
0B1572 17ED62              A  4613    	SEXT	HL
0B1575 68                  A  4614    	LD	L,B
0B1576 01630000            A  4615    	LD	BC,99
0B157A B7                  A  4616    	OR	A,A
0B157B ED42                A  4617    	SBC	HL,BC
0B157D 20 2D               A  4618    	JR	NZ,L_155
0B157F                     A  4619    L_154:
0B157F DD77DE              A  4620    	LD	(IX+%FFFFFFDE),A
0B1582 CD 6B 22 0B         A  4621    	CALL	_getsysvar_scrheight
0B1586 DD7EDE              A  4622    	LD	A,(IX+%FFFFFFDE)
0B1589 E5C1                A  4623    	LD	BC,HL
0B158B CD 42 29 0B         A  4624    	CALL	__stoiu
0B158F E5D1                A  4625    	LD	DE,HL
0B1591 DD07F6              A  4626    	LD	BC,(IX+%FFFFFFF6)
0B1594 CD 42 29 0B         A  4627    	CALL	__stoiu
0B1598 E5C1                A  4628    	LD	BC,HL
0B159A D5E1                A  4629    	LD	HL,DE
0B159C B7                  A  4630    	OR	A,A
0B159D ED42                A  4631    	SBC	HL,BC
0B159F 01020000            A  4632    	LD	BC,2
0B15A3 CD 27 2B 0B         A  4633    	CALL	__idivs
0B15A7 DD2FEE              A  4634    	LD	(IX+%FFFFFFEE),HL
                           A  4635    ;  408			else y = strtou16(argv[4]);
                           A  4636    .LINE 408
                           A  4637    
0B15AA 18 14               A  4638    	JR	L_157
0B15AC                     A  4639    L_155:
0B15AC DD27FC              A  4640    	LD	HL,(IX+%FFFFFFFC)
0B15AF ED07                A  4641    	LD	BC,(HL)
0B15B1 C5                  A  4642    	PUSH	BC
0B15B2 CD C2 10 0B         A  4643    	CALL	_strtou16
0B15B6 C1                  A  4644    	POP	BC
0B15B7 E5C1                A  4645    	LD	BC,HL
0B15B9 CD 42 29 0B         A  4646    	CALL	__stoiu
0B15BD DD2FEE              A  4647    	LD	(IX+%FFFFFFEE),HL
0B15C0                     A  4648    L_157:
                           A  4649    ;  409			
                           A  4650    ;  410			vdp_bitmapDraw(bitmap_slot,x,y)
                           A  4651    .LINE 410
                           A  4652    
0B15C0 DD07EE              A  4653    	LD	BC,(IX+%FFFFFFEE)
0B15C3 C5                  A  4654    	PUSH	BC
0B15C4 DD07F9              A  4655    	LD	BC,(IX+%FFFFFFF9)
0B15C7 C5                  A  4656    	PUSH	BC
0B15C8 DD4EFF              A  4657    	LD	C,(IX+%FFFFFFFF)
0B15CB 0600                A  4658    	LD	B,%0
0B15CD C5                  A  4659    	PUSH	BC
0B15CE CD 88 1B 0B         A  4660    	CALL	_vdp_bitmapDraw
0B15D2 C1                  A  4661    	POP	BC
0B15D3 C1                  A  4662    	POP	BC
0B15D4 C1                  A  4663    	POP	BC
                           A  4664    ;  411			
                           A  4665    ;  412		}
0B15D5                     A  4666    L_164:
                           A  4667    .LINE 412
                           A  4668    
                           A  4669    ;  413	
                           A  4670    ;  414	    return 0;
                           A  4671    .LINE 414
                           A  4672    
0B15D5 B7                  A  4673    	OR	A,A
0B15D6 ED62                A  4674    	SBC	HL,HL
0B15D8                     A  4675    L_165:
                           A  4676    .LINE 415
                           A  4677    
0B15D8 DDF9                A  4678    	LD	SP,IX
0B15DA DDE1                A  4679    	POP	IX
0B15DC C9                  A  4680    	RET	
                           A  4681    
                           A  4682    
                           A  4683    ;**************************** _main ***********
                           A  4684    ;Name                         Addr/Register   S
                           A  4685    ;_vdp_bitmapDraw                     IMPORT  --
                           A  4686    ;_getsysvar_scrheight                IMPORT  --
                           A  4687    ;_getsysvar_scrwidth                 IMPORT  --
                           A  4688    ;___print_sendstring                 IMPORT  --
                           A  4689    ;___print_xputch                     IMPORT    
                           A  4690    ;___print_uputch                     IMPORT  --
                           A  4691    ;y                                    IX-18    
                           A  4692    ;G_1                                  IX-15    
                           A  4693    ;bmp                                  IX-12    
                           A  4694    ;x                                     IX-7    
                           A  4695    ;G_2                                   IX-4    
                           A  4696    ;bitmap_slot                           IX-1    
                           A  4697    ;argv                                  IX+9    
                           A  4698    ;argc                                  IX+6    
                           A  4699    
                           A  4700    
                           A  4701    ; Stack Frame Size: 46 (bytes)
                           A  4702    ;       Spill Code: -3 (instruction)
                           A  4703    
                           A  4704    
                           A  4705    .ENDFUNC "main",415,"_main"
                           A  4706    	SEGMENT STRSECT
0B2D40                     A  4707    L__117:
0B2D40 55736167 65206973   A  4708    	DB	"Usage is "
0B2D48 20 
0B2D49 00                  A  4709    	DB	0
0B2D4A                     A  4710    L__118:
0B2D4A 203C6669 6C656E61   A  4711    	DB	" <filename> [bitmap slot] [top-left x]
0B2D52 6D653E20 5B626974 
0B2D5A 6D617020 736C6F74 
0B2D62 5D205B74 6F702D6C 
0B2D6A 65667420 785D205B 
0B2D72 746F702D 6C656674 
0B2D7A 20795D 
0B2D7D 0D0A00              A  4712    	DB	13,10,0
                           A  4713    	XREF _write16bit:ROM
                           A  4714    	XREF _vdp_bitmapDraw:ROM
                           A  4715    	XREF _vdp_bitmapSelect:ROM
                           A  4716    	XREF _mos_getfil:ROM
                           A  4717    	XREF _mos_flseek:ROM
                           A  4718    	XREF _mos_fread:ROM
                           A  4719    	XREF _mos_fgetc:ROM
                           A  4720    	XREF _mos_fclose:ROM
                           A  4721    	XREF _mos_fopen:ROM
                           A  4722    	XREF _getsysvar_scrheight:ROM
                           A  4723    	XREF _getsysvar_scrwidth:ROM
                           A  4724    	XREF _mos_puts:ROM
                           A  4725    	XREF _waitvblank:ROM
                           A  4726    	XREF _putch:ROM
                           A  4727    	XREF _memcmp:ROM
                           A  4728    	XREF _memcpy:ROM
                           A  4729    	XREF _malloc:ROM
                           A  4730    	XREF _free:ROM
                           A  4731    	XREF ___print_sendstring:ROM
                           A  4732    	XREF ___print_xputch:ROM
                           A  4733    	XREF ___print_uputch:ROM
                           A  4734    	XREF __lcmps:ROM
                           A  4735    	XREF __lcmpu:ROM
                           A  4736    	XREF __ladd:ROM
                           A  4737    	XREF __lsub:ROM
                           A  4738    	XREF __idivs:ROM
                           A  4739    	XREF __ldivs:ROM
                           A  4740    	XREF __imuls:ROM
                           A  4741    	XREF __lmuls:ROM
                           A  4742    	XREF __lmulu:ROM
                           A  4743    	XREF __smulu:ROM
                           A  4744    	XREF __irems:ROM
                           A  4745    	XREF __lrems:ROM
                           A  4746    	XREF __stoiu:ROM
                           A  4747    	XREF __itol:ROM
                           A  4748    	XREF __ildix:ROM
                           A  4749    	XREF __istix:ROM
                           A  4750    	XREF __ladd_b:ROM
                           A  4751    	XDEF _main
                           A  4752    	XDEF _strtou24
                           A  4753    	XDEF _strtou8
                           A  4754    	XDEF _strtou16
                           A  4755    	XDEF _load_bmp_big
                           A  4756    	XDEF _reorder_and_insert
                           A  4757    	XDEF _reorder
                           A  4758    	XDEF _twiddle_buffer
                           A  4759    	XDEF _flip
                           A  4760    	XDEF _max
                           A  4761    	XDEF _min
                           A  4762    	XDEF _delay_secs
                           A  4763    	END


Errors: 0
Warnings: 0
Lines Assembled: 4764
